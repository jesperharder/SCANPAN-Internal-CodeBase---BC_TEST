#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50011_v7_0_0_2350) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50011) { }
        type("System.IO.Path"; System_IO_Path50011) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->






report 50011 "PalletShipmentReport"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Pallet Shipment Report';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/PalletShipmentReport50011.rdlc';

    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            MaxIteration = 1;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Posted Whse. Shipment Header"; "Posted Whse. Shipment Header")
            {
                RequestFilterFields = "No.", "Whse. Shipment No.";
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ItemDescription; ItemDescription)
                {
                    IncludeCaption = false;
                }
                column(NameShipTo; NameShipTo)
                {
                    IncludeCaption = false;
                }
                dataitem("MOB License Plate"; "MOB License Plate")
                {
                    DataItemLink = "Whse. Document No." = FIELD("No.");
                    column(MOBLicensePlateRecordNo; MOBLicensePlateRecordNo)
                    {
                        IncludeCaption = false;
                    }
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(TotalCubage; TotalCubage)
                    {
                        IncludeCaption = false;
                    }
                    column(TotalPalletWeight; TotalPalletWeight)
                    {
                        IncludeCaption = false;
                    }
                    dataitem("MOB License Plate Content"; "MOB License Plate Content")
                    {
                        DataItemLink = "License Plate No." = FIELD("No.");
                        column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
                        column(TotalItemBTWeight; TotalItemGrossWeight)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalItemNTWeight; TotalItemNetWeight)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalQuantity; TotalQuantity)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnAfterGetRecord();
                        var
                            Item: Record Item;
                            PostedWhseShipmentLine: Record "Posted Whse. Shipment Line";
                        begin
                            //Quantity
                            TotalQuantity += Quantity;
                            PostedWhseShipmentLine.Reset();
                            PostedWhseShipmentLine.SetFilter("No.", "MOB License Plate Content"."Whse. Document No.");
                            PostedWhseShipmentLine.SetFilter("Item No.", '%1', "MOB License Plate Content"."No.");
                            ItemDescription := '';

                            //ItemWeights
                            Item.Reset();
                            if Item.Get("MOB License Plate Content"."No.") then begin
                                TotalItemGrossWeight += (Item."Gross Weight" * "MOB License Plate Content".Quantity);
                                TotalItemNetWeight += (Item."Net Weight" * "MOB License Plate Content".Quantity);
                            end;

                            //ItemDescription
                            if PostedWhseShipmentLine.FindFirst() then ItemDescription := PostedWhseShipmentLine.Description;
                            //Try Item Card
                            if ItemDescription = '' then begin
                                Item.Reset;
                                if Item.Get("MOB License Plate Content"."No.") then
                                    ItemDescription := Item.Description;
                            end;
                        end;

                    }
                    trigger OnAfterGetRecord();
                    begin
                        MOBLicensePlateRecordNo += 1;

                        //Cubage
                        TotalCubage += (("MOB License Plate".Height * "MOB License Plate".Width * "MOB License Plate".Length) / 1000000);

                        //PalletWeight
                        TotalPalletWeight += "MOB License Plate".Weight;
                    end;

                }
                trigger OnAfterGetRecord();
                var
                    PostedWhseShipmentLine: Record "Posted Whse. Shipment Line";
                    SalesHeader: Record "Sales Header";
                    SalesInvoiceHeader: Record "Sales Invoice Header";
                begin
                    NameShipTo := '';

                    PostedWhseShipmentLine.SetFilter("No.", "Posted Whse. Shipment Header"."No.");
                    if PostedWhseShipmentLine.FindFirst() then begin
                        //Try salesheader
                        SalesHeader.Reset();
                        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
                        SalesHeader.SetFilter("No.", PostedWhseShipmentLine."Source No.");

                        if SalesHeader.FindFirst() then begin
                            NameShipTo := SalesHeader."Ship-to Name";
                            if NameShipTo = '' then NameShipTo := SalesHeader."Bill-to Name";
                        end else begin
                            //Try posted invoice
                            SalesInvoiceHeader.Reset();
                            SalesInvoiceHeader.SetFilter("Order No.", PostedWhseShipmentLine."Source No.");
                            if SalesInvoiceHeader.FindFirst() then begin
                                NameShipTo := SalesInvoiceHeader."Ship-to Name";
                                if NameShipTo = '' then NameShipTo := SalesInvoiceHeader."Bill-to Name";
                            end;
                        end;
                    end;
                end;

            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
            }
        }

    }

    var

        //CodeUnits here
        CU43: Codeunit Language;

        //Code
        ReportLanguageCode: Code[10];
        TotalCubage: Decimal;
        TotalItemGrossWeight: Decimal;
        TotalItemNetWeight: Decimal;
        TotalPalletWeight: Decimal;

        //Integer
        MOBLicensePlateRecordNo: Integer;
        TotalQuantity: Integer;

        //Option
        ReportLanguageOpt: Option;

        //Text
        ReportCaptionName: Text[50];
        NonKeyFieldValue: Text[100];
        ItemDescription: Text[120];
        NameShipTo: Text[120];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50011_v7_0_0_2350;

    trigger OnInitReport();
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPreReport()
    begin
        ;
        //Language
        ReportLanguageCode := 'ENU';
        /*
		ReportCaptionName := 'Customs Declaration';
		if ReportLanguageOpt = 0 then begin
			ReportLanguageCode := 'DAN';
			ReportCaptionName := 'Toldangivelse';
		end;
		*/
        CurrReport.LANGUAGE := CU43.GetLanguageId(ReportLanguageCode);  //GetLanguageID(ReportLanguageCode);


        ;
        ReportsForNavPre;
    end;

    trigger OnPostReport();
    begin
        ;
        ReportForNav.Post;
    end;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet System_IO_Path50011;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
