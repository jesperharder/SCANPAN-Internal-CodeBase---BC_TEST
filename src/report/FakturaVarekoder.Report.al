#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50009_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Faktura Varekoder 50009 (ID 50009).
/// </summary>
report 50009 "Faktura Varekoder"

// 
// 2022.11 JH   Konverteret kode fra NAV udviklet 2009 - Tarfiff
// 
//

{
    RDLCLayout = './src/report/layout/FakturaVarekoder50009.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Invoice TariffCode';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Sales Invoice Line"; "Sales Invoice Line")
            {
                DataItemTableView = sorting("Document No.", "Line No.");
                DataItemLink = "Document No." = FIELD("No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                trigger OnAfterGetRecord();
                var

                Begin
                    IF Items.GET("Sales Invoice Line"."No.") THEN BEGIN
                        //IF Items."Tariff No." = '' THEN Items."Tariff No." := 'NONEXIST';
                        IF "Sales Invoice Header"."Currency Code" = '' THEN
                            "Sales Invoice Header"."Currency Code" := GeneralLedgerSetup."LCY Code";

                        ItemTariff.Get(Items."Tariff No.");
                        Brugstarif[3, 1] := Items."Tariff No."; // + '		   ' + Items."Country/Region of Origin Code";
                        Brugstarif[3, 2] := "Sales Invoice Header"."Currency Code";
                        Brugstarif[3, 3] := Items."Country/Region of Origin Code";
                        Brugstarif[3, 4] := ItemTariff.Description;
                        Brugstarif[3, 5] := Items."Country/Region of Origin Code";
                        // 2010.06.10 JH
                        // Dobbelt prisliste
                        //	  BrugstarifValues[1,50] := "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[2,50] := Items."Gross Weight" * "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[3,50] := Items."Net Weight" * "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[4,50] := "Sales Invoice Line".Amount;

                        BrugstarifValues[1, 50] := "Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure";
                        BrugstarifValues[2, 50] :=
                                              Items."Gross Weight" *
                                              ("Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure");
                        BrugstarifValues[3, 50] :=
                                              Items."Net Weight" *
                                              ("Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure");
                        BrugstarifValues[4, 50] := "Sales Invoice Line".Amount;
                        // 2010.06.10 JH

                        BrugstarifValues[5, 50] := "Sales Invoice Line".Amount;
                        IF "Sales Invoice Header"."Currency Factor" <> 0 THEN
                            BrugstarifValues[5, 50] := "Sales Invoice Line".Amount /
                                                      "Sales Invoice Header"."Currency Factor";

                        buildTariff;
                    END;
                End;

            }
        }
        dataitem(Integer; Integer)
        {
            MaxIteration = 49;
            DataItemTableView = sorting(Number);
            column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
            column(Brugstarif_TariffCode; Brugstarif_TariffCode)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_TariffDescription; Brugstarif_TariffDescription)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_ItemCountryOriginCode; Brugstarif_ItemCountryOriginCode)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_CurrencyTxt; Brugstarif_CurrencyTxt)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_Quantity; BrugstarifValues_Quantity)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_BTWeight; BrugstarifValues_BTWeight)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_NTWeight; BrugstarifValues_NTWeight)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueCurrency; BrugstarifValues_ValueCurrency)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueRV; BrugstarifValues_ValueRV)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_Quantity_Total; BrugstarifValues_Quantity_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_BTWeight_Total; BrugstarifValues_BTWeight_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_NTWeight_Total; BrugstarifValues_NTWeight_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueCurrency_Total; BrugstarifValues_ValueCurrency_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueRV_Total; BrugstarifValues_ValueRV_Total)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            var

            begin
                c := 0;
            end;

            trigger OnAfterGetRecord();
            var

            begin
                If c > 49 then CurrReport.SKIP;
                c += 1;
                IF Brugstarif[1, c] = '' THEN CurrReport.SKIP;


                Brugstarif_TariffCode := Brugstarif[1, c];
                Brugstarif_CurrencyTxt := Brugstarif[2, c];
                Brugstarif_TariffDescription := Brugstarif[4, c];
                Brugstarif_ItemCountryOriginCode := Brugstarif[5, c];

                BrugstarifValues_Quantity := BrugstarifValues[1, c];
                BrugstarifValues_BTWeight := BrugstarifValues[2, c];
                BrugstarifValues_NTWeight := BrugstarifValues[3, c];
                BrugstarifValues_ValueCurrency := BrugstarifValues[4, c];
                BrugstarifValues_ValueRV := BrugstarifValues[5, c];



                BrugstarifValues[1, 51] += BrugstarifValues[1, c];
                BrugstarifValues[2, 51] += BrugstarifValues[2, c];
                BrugstarifValues[3, 51] += BrugstarifValues[3, c];
                BrugstarifValues[4, 51] += BrugstarifValues[4, c];
                BrugstarifValues[5, 51] += BrugstarifValues[5, c];
                BrugstarifValues[6, 51] += BrugstarifValues[6, c];

            end;

        }
        dataitem("Integer Total"; Integer)
        {
            MaxIteration = 1;
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
            trigger OnAfterGetRecord();
            begin
                BrugstarifValues_Quantity_Total := BrugstarifValues[1, 51];
                BrugstarifValues_BTWeight_Total := BrugstarifValues[2, 51];
                BrugstarifValues_NTWeight_Total := BrugstarifValues[3, 51];
                BrugstarifValues_ValueCurrency_Total := BrugstarifValues[4, 51];
                BrugstarifValues_ValueRV_Total := BrugstarifValues[5, 51];

                //BrugstarifValues[6, 51];

            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    local procedure BuildTariff();
    var
        cInt: Integer;
        hit: Boolean;
    begin

        //  Brugstarif[1,c] = Tariff
        //  Brugstarif[3,2] := "Sales Invoice Header"."Currency Code";

        //  BrugstarifValues[1,c] = Quantity
        //  BrugstarifValues[2,c] = GrossWeight * Quantity
        //  BrugstarifValues[3,c] = NetWeight * Quantity
        //  BrugstarifValues[4,c] = ItemCost
        //  BrugstarifValues[5,c] = ItemCost * CurrencyFactor / 100

        hit := false;
        for cInt := 1 to 49 do begin
            if Brugstarif[1, cInt] = Brugstarif[3, 1] then begin
                Brugstarif[2, cInt] := Brugstarif[3, 2];
                Brugstarif[4, cInt] := Brugstarif[3, 4];
                Brugstarif[5, cInt] := Brugstarif[3, 5];
                BrugstarifValues[1, cInt] += BrugstarifValues[1, 50];
                BrugstarifValues[2, cInt] += BrugstarifValues[2, 50];
                BrugstarifValues[3, cInt] += BrugstarifValues[3, 50];
                BrugstarifValues[4, cInt] += BrugstarifValues[4, 50];
                BrugstarifValues[5, cInt] += BrugstarifValues[5, 50];
                BrugstarifValues[6, cInt] += BrugstarifValues[6, 50];
                hit := true;
            end;
        end;
        if not hit then begin
            for cInt := 1 to 49 do begin
                if Brugstarif[1, cInt] = '' then begin
                    Brugstarif[1, cInt] := Brugstarif[3, 1];
                    Brugstarif[2, cInt] := Brugstarif[3, 2];
                    Brugstarif[4, cInt] := Brugstarif[3, 4];
                    Brugstarif[5, cInt] := Brugstarif[3, 5];
                    BrugstarifValues[1, cInt] := BrugstarifValues[1, 50];
                    BrugstarifValues[2, cInt] := BrugstarifValues[2, 50];
                    BrugstarifValues[3, cInt] := BrugstarifValues[3, 50];
                    BrugstarifValues[4, cInt] := BrugstarifValues[4, 50];
                    BrugstarifValues[5, cInt] := BrugstarifValues[5, 50];
                    BrugstarifValues[6, cInt] := BrugstarifValues[6, 50];

                    exit;
                end;
            end;
        end;
    end;

    var
        c: Integer;
        Items: Record Item;
        ItemTariff: Record "Tariff Number";
        GeneralLedgerSetup: Record "General Ledger Setup";
        Brugstarif: array[5, 50] of code[100];
        BrugstarifValues: array[7, 51] of Decimal;

        Brugstarif_TariffCode: Text[20];
        Brugstarif_TariffDescription: Text[100];
        Brugstarif_ItemCountryOriginCode: Text[10];
        Brugstarif_CurrencyTxt: Text[20];
        BrugstarifValues_Quantity: Decimal;
        BrugstarifValues_BTWeight: Decimal;
        BrugstarifValues_NTWeight: Decimal;
        BrugstarifValues_ValueCurrency: Decimal;
        BrugstarifValues_ValueRV: Decimal;

        BrugstarifValues_Quantity_Total: Decimal;
        BrugstarifValues_BTWeight_Total: Decimal;
        BrugstarifValues_NTWeight_Total: Decimal;
        BrugstarifValues_ValueCurrency_Total: Decimal;
        BrugstarifValues_ValueRV_Total: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50009_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
