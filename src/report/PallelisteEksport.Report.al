/*
//SHIPITREMOVE

/// <summary>
/// Report Palleliste Eksport 50011 (ID 50011).
/// </summary>

#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50011_v7_0_0_2350) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50011) { }
        type("System.IO.Path"; System_IO_Path50011) { }
    } 
} // Reports ForNAV Autogenerated code - do not delete or modify -->
Report 50011 "Palleliste Eksport"
{

    RDLCLayout = './src/report/layout/Palleliste50011.rdlc';
    DefaultLayout = RDLC;

        Caption = 'Exportpallets report';
        AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("IDYS Transport Order Header"; "IDYS Transport Order Header")
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
            dataitem("IDYS Transport Order Package"; "IDYS Transport Order Package")
            {
                DataItemLink = "Transport Order No." = FIELD("No.");
                DataItemTableView = sorting("Transport Order No.", "Line No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                dataitem(MOSLicensePlateContent2; "MOS License Plate Content")
                {
                    DataItemLink = "License Plate No." = FIELD("License Plate No.");
                    DataItemLinkReference = "IDYS Transport Order Package";
                    DataItemTableView = sorting("License Plate No.", "No.");
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(tolDescription; tolDescription)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemCu2; ItemCu2)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemGrossWeight; ItemGrossWeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemHeight; ItemHeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemLength; ItemLength)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemNetWeight; ItemNetWeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemWidth; ItemWidth)
                    {
                        IncludeCaption = false;
                    }
                    column(TotalQuantity; TotalQuantity)
                    {
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    var
                        Text000Lbl: Label 'Please set the filter for Transport Order No.';
                    begin
                        if "IDYS Transport Order Header".GetFilter("No.") = '' then Error(Text000Lbl);

                        getTotals("IDYS Transport Order Header".GetFilter("No."))
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        GetItem(MOSLicensePlateContent2."No.");

                        IDYSTransportOrderLine.SetFilter("Transport Order No.", "IDYS Transport Order Header"."No.");
                        IDYSTransportOrderLine.SetFilter("Source Document No.", MOSLicensePlateContent2."Source No.");
                        IDYSTransportOrderLine.SetFilter("Item No.", tolItemNo);
                        tolDescription := tolItemNo;

                        If not IDYSTransportOrderLine.FindFirst() then CurrReport.Skip();
                        tolDescription := IDYSTransportOrderLine.Description;
                    end;

                }
            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        IDYSTransportOrderLine: Record "IDYS Transport Order Line";
        tolItemNo: code[20];
        tolDescription: Text[200];

        ItemWidth: Decimal;
        ItemHeight: Decimal;
        ItemLength: Decimal;
        ItemGrossWeight: Decimal;
        ItemNetWeight: Decimal;
        ItemCu2: Decimal;
        TotalQuantity: Decimal;

    local procedure getItem(ItemNo: code[20])
    var
        items: Record Item;
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        If Items.Get(ItemNo) then begin
            ItemGrossWeight := items."Gross Weight";
            ItemNetWeight := items."Net Weight";
            tolItemNo := items."No.";
        end;
        if ItemUnitOfMeasure.Get(ItemNo, Items."Base Unit of Measure") then begin
            ItemWidth := ItemUnitOfMeasure.Width;
            ItemHeight := ItemUnitOfMeasure.Height;
            ItemLength := ItemUnitOfMeasure.Length;
            ItemCu2 := ItemUnitOfMeasure.Cubage;
        end;
    end;

    local procedure getTotals(TransportOrderNo: Text)
    var
        TransportOrderLine: Record "IDYS Transport Order Line";
    begin
        TransportOrderLine.SetFilter("Transport Order No.", TransportOrderNo);
        TotalQuantity := 0;
        If TransportOrderLine.FindSet() then
            repeat
                TotalQuantity += TransportOrderLine."Qty. (Base)";
            until TransportOrderLine.Next() = 0;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50011_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path50011;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->

}
*/