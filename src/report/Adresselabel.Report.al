#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50005_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Adresselabel 50005 (ID 50005).
/// </summary>
report 50005 "Adresselabel"
{
    AdditionalSearchTerms = 'Scanpan';

    Caption = 'Adresslabel';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/Adresselabel_50005.rdlc';


    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 10;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(LocationName; LocationName)
            {
                IncludeCaption = false;
            }
            column(LocationAddress; LocationAddress)
            {
                IncludeCaption = false;
            }
            column(LocationAddress2; LocationAddress2)
            {
                IncludeCaption = false;
            }
            column(LocationPoNo; LocationPoNo)
            {
                IncludeCaption = false;
            }
            column(LocationCity; LocationCity)
            {
                IncludeCaption = false;
            }
            column(LocationCountry; LocationCountry)
            {
                IncludeCaption = false;
            }
            column(SelectedLocation; SelectedLocationCode)
            {
                IncludeCaption = false;
            }
            column(Name; NameText)
            {
                IncludeCaption = false;
            }
            column(Address; AddressText)
            {
                IncludeCaption = false;
            }
            column(Address2; Address2Text)
            {
                IncludeCaption = false;
            }
            column(PoCode; PoCodeText)
            {
                IncludeCaption = false;
            }
            column(City; CityText)
            {
                IncludeCaption = false;
            }
            column(CountryName; CountryNameText)
            {
                IncludeCaption = false;
            }
            column(CountryCode; CountryCodeText)
            {
                IncludeCaption = false;
            }
            column(Reference; ReferenceText)
            {
                IncludeCaption = false;
            }
            column(Copies; CopiesInt)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, CopiesInt);
                if CopiesInt = 0 then Error('Du skal vælge et antal labels til udskrift');
                if CopiesInt > 20 then Error('Du må ikke vælge mere end 20 antal labels');
                if LocationName = '' then Error('Du skal vælge en afsenderlokation');
            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(LookupAddress)
                {
                    Caption = 'Address Lookup';

                    field(Copies; CopiesInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Number of labels';
                    }
                    label(Space3)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = ' ';
                    }

                    label(SenderLocation)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Choose Sender Location';
                    }
                    field(SelectedLocation; SelectedLocationCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sender Location';
                        TableRelation = Location.Code;
                        ToolTip = 'Select sender location';

                        trigger OnValidate()
                        var
                        begin
                            SenderLocationLookup;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Locations.Reset();
                            Locations.SetFilter(Code, '%1|%2', 'AUNING', 'RYOM');
                            if page.RunModal(Page::"Location List", Locations) = Action::LookupOK then begin
                                SelectedLocationCode := Locations.Code;
                                SenderLocationLookup;
                            end;

                        end;
                    }


                    label(Space4)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }


                    label(lblChooser)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Choose Customer';
                    }
                    field(CustomerSelected; CustomerSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Customer';
                        TableRelation = Customer."No.";
                        Tooltip = 'Select Customer';

                        trigger OnValidate()
                        var
                        begin
                            FillCustomerAddress;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Customers.Reset;
                            if page.RunModal(Page::"Customer List", Customers) = Action::LookupOK then begin
                                CustomerSelectedCode := Customers."No.";
                                FillCustomerAddress;
                            end;

                        end;
                    }
                    field(ShipToAddressSelected; ShipToAddressSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Ship-To-Address';
                        TableRelation = "Ship-to Address".Code;
                        Tooltip = 'Select Ship-To-Address';


                        trigger OnValidate()
                        var
                        begin
                            FillShipToAddress;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            CustomerShipToAddress.Reset();
                            CustomerShipToAddress.SetFilter("Customer No.", CustomerSelectedCode);
                            if page.RunModal(Page::"Ship-to Address List", CustomerShipToAddress) = Action::LookupOK then begin
                                ShipToAddressSelectedCode := CustomerShipToAddress.Code;
                                FillShipToAddress;
                            end else
                                ClearAddress;
                        end;

                    }
                    label(Space1)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }
                    label(VendorAddress)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Choose Vendor';
                    }
                    field(VendorSelected; VendorSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Vendor';
                        TableRelation = Vendor."No.";
                        Tooltip = 'Select Vendor';

                        trigger OnValidate()
                        begin
                            FillVendor();
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Vendors.Reset();
                            //Vendors.SetFilter("Customer No.", CustomerSelected);
                            if page.RunModal(Page::"Vendor List", Vendors) = Action::LookupOK then begin
                                VendorSelectedCode := Vendors."No.";
                                FillVendor;
                            end else
                                ClearAddress;
                        end;

                    }
                    field(OrderAddressSelected; OrderAddressSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Order Address';
                        TableRelation = "Order Address".Code;
                        Tooltip = 'Select Order Address';

                        trigger OnValidate()
                        var
                        begin
                            FillVendor;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            VendorOrderAddress.Reset();
                            VendorOrderAddress.SetFilter("Vendor No.", VendorSelectedCode);
                            if page.RunModal(Page::"Order Address List", VendorOrderAddress) = Action::LookupOK then begin
                                OrderAddressSelectedCode := VendorOrderAddress.Code;
                                FillVendor;
                            end else
                                ClearAddress;
                        end;

                    }
                    label(Space2)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }

                    group(ShowAddress)
                    {
                        Caption = 'Address to print';

                        field(Name; NameText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Name';
                        }
                        field(Address; AddressText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Address';
                        }
                        field(Address2; Address2Text)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Address 2';
                        }
                        field(PoCode; PoCodeText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Post Code';
                        }
                        field(City; CityText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'City';
                        }
                        field(CountryName; CountryNameText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Country Name';
                        }
                        field(CountryCode; CountryCodeText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Country Code';
                        }
                        field(Reference; ReferenceText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Reference';
                        }


                    }
                    group(Options)
                    {
                        Caption = 'Options';
                        field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Design';
                            Visible = ReportForNavAllowDesign;
                            trigger OnValidate()
                            begin
                                ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                                CurrReport.RequestOptionsPage.Close();
                            end;

                        }
                    }
                }

            }

        }

        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
        CopiesInt := 1;
        SelectedLocationCode := 'AUNING';
        SenderLocationLookup();
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        CountryRegions: Record "Country/Region";
        Customers: Record Customer;
        Locations: Record Location;
        VendorOrderAddress: Record "Order Address";
        CustomerShipToAddress: Record "Ship-to Address";
        Vendors: Record Vendor;
        CustomerSelectedCode: code[20];
        OrderAddressSelectedCode: Code[20];

        SelectedLocationCode: code[20];
        ShipToAddressSelectedCode: Code[20];

        VendorSelectedCode: Code[20];
        CopiesInt: Integer;
        Address2Text: Text[200];
        AddressText: Text[200];
        CityText: Text[200];
        CountryCodeText: Text[200];
        CountryNameText: Text[200];
        LocationAddress: Text[200];
        LocationAddress2: Text[200];
        LocationCity: Text[200];
        LocationCountry: Text[200];

        LocationName: Text[200];
        LocationPoNo: Text[200];
        NameText: Text[200];
        PoCodeText: Text[200];
        ReferenceText: Text[200];

    local procedure SenderLocationLookup()
    begin
        if Locations.Get(SelectedLocationCode) then begin
            LocationName := Locations.Name;
            LocationAddress := Locations.Address;
            LocationAddress2 := Locations."Address 2";
            LocationPoNo := Locations."Post Code";
            LocationCity := Locations.City;

            CountryRegions.Get(Locations."Country/Region Code");
            LocationCountry := CountryRegions.GetNameInCurrentLanguage();
        end;


    end;

    local procedure FillCustomerAddress()
    var
    begin
        Customers.Get(CustomerSelectedCode);
        NameText := Customers.Name;
        AddressText := Customers.Address;
        Address2Text := Customers."Address 2";
        PoCodeText := Customers."Post Code";
        CityText := Customers.City;
        CountryCodeText := Customers."Country/Region Code";

        CountryRegions.Get(Customers."Country/Region Code");
        CountryNameText := CountryRegions.GetNameInCurrentLanguage();

    end;

    local procedure FillShipToAddress()
    var
    begin
        CustomerShipToAddress.SetFilter("Customer No.", CustomerSelectedCode);
        CustomerShipToAddress.SetFilter(Code, ShipToAddressSelectedCode);
        If CustomerShipToAddress.Get(CustomerSelectedCode, ShipToAddressSelectedCode) then begin
            //If CustomerShipToAddress.find then begin
            NameText := CustomerShipToAddress.Name;
            AddressText := CustomerShipToAddress.Address;
            Address2Text := CustomerShipToAddress."Address 2";
            PoCodeText := CustomerShipToAddress."Post Code";
            CityText := CustomerShipToAddress.City;
            CountryCodeText := CustomerShipToAddress."Country/Region Code";

            If CountryRegions.Get(CustomerShipToAddress."Country/Region Code") then
                CountryNameText := CountryRegions.GetNameInCurrentLanguage() else
                CountryNameText := '';
        end else
            ClearAddress;
    end;

    local procedure FillVendor()
    var
    begin
        Vendors.Get(VendorSelectedCode);
        NameText := Vendors.Name;
        AddressText := Vendors.Address;
        Address2Text := Vendors."Address 2";
        PoCodeText := Vendors."Post Code";
        CityText := Vendors.City;
        CountryCodeText := Vendors."Country/Region Code";

        CountryRegions.Get(Vendors."Country/Region Code");
        CountryNameText := CountryRegions.GetNameInCurrentLanguage();

    end;

    local procedure ClearAddress()
    var
    begin
        NameText := '';
        AddressText := '';
        Address2Text := '';
        PoCodeText := '';
        CityText := '';
        CountryCodeText := '';
        CountryNameText := '';
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50005_v7_0_0_2350;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet Path;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
