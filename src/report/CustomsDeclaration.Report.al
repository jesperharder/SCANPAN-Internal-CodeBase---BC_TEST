#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50002_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->
/// <summary>
/// Report Customs Declaration 50002 (ID 50002).
/// </summary>
report 50002 "Customs Declaration"

{
    RDLCLayout = './src/report/layout/CustomsDeclaration.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Customs Declaration';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("Company Information"; "Company Information")
        {
            CalcFields = Picture;
            DataItemTableView = sorting("Primary Key");
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
        }
        dataitem(Item; Item)
        {
            CalcFields = Inventory;
            DataItemTableView = where("Gen. Prod. Posting Group" = FILTER('BRUND' | 'INTERN' | 'EKSTERN')
            //, Quality = FILTER(1)
            //, "ABCD Category" = FILTER('A|A+|B')
            );
            RequestFilterFields = "No.", "Gen. Prod. Posting Group", Quality, "ABCD Category";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportLanguageCode; ReportLanguageCode)
            {
                IncludeCaption = false;
            }
            column(ReportCaptionName; ReportCaptionName)
            {
                IncludeCaption = false;
            }
            dataitem("Item Translation"; "Item Translation")
            {
                RequestFilterFields = "Language Code";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ItemUnitMeasureSALESLength; ItemUnitMeasureSALESLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESWidth; ItemUnitMeasureSALESWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESHeight; ItemUnitMeasureSALESHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceSALESReferenceNo; ItemReferenceSALESReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESNetWeight; ItemSALESNetWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESGrossWeight; ItemUnitMeasureSALESGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESCubage; ItemUnitMeasureSALESCubage)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESTariffNo; ItemSALESTariffNo)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESCountryOfOriginLookupName; ItemSALESCountryOfOriginLookupName)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERQuantity; ItemUnitMeasureINNERQuantity)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERLength; ItemUnitMeasureINNERLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERWidth; ItemUnitMeasureINNERWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERHeight; ItemUnitMeasureINNERHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceINNERReferenceNo; ItemCrossReferenceINNERReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERGrossWeight; ItemUnitMeasureINNERGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERCubage; ItemUnitMeasureINNERCubage)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERQuantity; ItemUnitMeasureOUTERQuantity)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERLength; ItemUnitMeasureOUTERLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERWidth; ItemUnitMeasureOUTERWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERHeight; ItemUnitMeasureOUTERHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceOUTERReferenceNo; ItemReferenceOUTERReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERGrossWeight; ItemUnitMeasureOUTERGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERCubage; ItemUnitMeasureOUTERCubage)
                {
                    IncludeCaption = false;
                }
            }
            trigger OnAfterGetRecord();
            begin
                //Reset

                ItemSALESNetWeight := 0;
                ItemUnitMeasureSALESGrossWeight := 0;
                ItemUnitMeasureSALESCubage := 0;
                ItemSALESTariffNo := '';

                ItemSALESCountryOfOriginLookupName := '';

                ItemUnitMeasureINNERQuantity := 0;
                ItemUnitMeasureINNERLength := 0;
                ItemUnitMeasureINNERWidth := 0;
                ItemUnitMeasureINNERHeight := 0;
                ItemCrossReferenceINNERReferenceNo := '';
                ItemUnitMeasureINNERGrossWeight := 0;
                ItemUnitMeasureINNERCubage := 0;

                ItemUnitMeasureOUTERQuantity := 0;
                ItemUnitMeasureOUTERLength := 0;
                ItemUnitMeasureOUTERWidth := 0;
                ItemUnitMeasureOUTERHeight := 0;
                ItemReferenceOUTERReferenceNo := '';
                ItemUnitMeasureOUTERGrossWeight := 0;
                ItemUnitMeasureOUTERCubage := 0;


                //Sales Item
                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, Item."Base Unit of Measure");
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureSALESLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureSALESWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureSALESHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureSALESGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureSALESCubage := ItemUnitofMeasure.Cubage;
                end;

                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", Item."Base Unit of Measure");
                If ItemReference.FindFirst then begin
                    ItemReferenceSALESReferenceNo := ItemReference."Reference No.";
                end;

                ItemSALESNetWeight := Item."Net Weight";
                ItemSALESTariffNo := Item."Tariff No.";

                ItemSALESCountryOfOriginLookupName := Item."Country/Region of Origin Code";

                //INNER,,MASTER Item
                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, 'INNER');
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureINNERQuantity := ItemUnitofMeasure."Qty. per Unit of Measure";
                    ItemUnitMeasureINNERLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureINNERWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureINNERHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureINNERGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureINNERCubage := ItemUnitofMeasure.Cubage;
                end;

                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", '%1|%2', 'INNER', 'INNER');
                If ItemReference.FindFirst() then begin
                    ItemCrossReferenceINNERReferenceNo := ItemReference."Reference No.";
                end;


                //OUTER Item
                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", '%1|%2', 'MASTER', 'OUTER');
                If ItemReference.FindFirst() then begin
                    ItemReferenceOUTERReferenceNo := ItemReference."Reference No.";
                end;

                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, '%1|%2', 'MASTER', 'OUTER');
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureOUTERQuantity := ItemUnitofMeasure."Qty. per Unit of Measure";
                    ItemUnitMeasureOUTERLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureOUTERWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureOUTERHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureOUTERGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureOUTERCubage := ItemUnitofMeasure.Cubage;
                end;

            end;

        }
    }

    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Scanpan)
                {
                    Caption = 'Scanpan';

                    field(ReportLanguageOption; ReportLanguageOpt)
                    {
                        Caption = 'Select report language';
                        ToolTip = 'What language format the report should be in.';
                        OptionCaption = 'Dansk,English';
                        ApplicationArea = Basic;
                    }
                }
                group(Options)
                {
                    Visible = false;
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    labels
    {
        LabelName = 'Label Text';
    }

    local procedure getItemUnitofMeasure()
    begin

    end;

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        //Language
        ReportLanguageCode := 'ENU';
        ReportCaptionName := 'Customs Declaration';
        if ReportLanguageOpt = 0 then begin
            ReportLanguageCode := 'DAN';
            ReportCaptionName := 'Toldangivelse';
        end;
        CurrReport.LANGUAGE := CU43.GetLanguageId(ReportLanguageCode);  //GetLanguageID(ReportLanguageCode);


        ;
        ReportsForNavPre;
    end;

    var
        //Varables here

        //Report fields
        ItemUnitMeasureSALESLength: Decimal;
        ItemUnitMeasureSALESWidth: Decimal;
        ItemUnitMeasureSALESHeight: Decimal;

        ItemReferenceSALESReferenceNo: Text[50];

        ItemSALESNetWeight: Decimal;
        ItemUnitMeasureSALESGrossWeight: Decimal;
        ItemUnitMeasureSALESCubage: Decimal;
        ItemSALESTariffNo: Text[20];

        ItemSALESCountryOfOriginLookupName: Text[100];

        ItemUnitMeasureINNERQuantity: Decimal;
        ItemUnitMeasureINNERLength: Decimal;
        ItemUnitMeasureINNERWidth: Decimal;
        ItemUnitMeasureINNERHeight: Decimal;
        ItemCrossReferenceINNERReferenceNo: Text[50];
        ItemUnitMeasureINNERGrossWeight: Decimal;
        ItemUnitMeasureINNERCubage: Decimal;

        ItemUnitMeasureOUTERQuantity: Decimal;
        ItemUnitMeasureOUTERLength: Decimal;
        ItemUnitMeasureOUTERWidth: Decimal;
        ItemUnitMeasureOUTERHeight: Decimal;
        ItemReferenceOUTERReferenceNo: Text[50];
        ItemUnitMeasureOUTERGrossWeight: Decimal;
        ItemUnitMeasureOUTERCubage: Decimal;
        //



        ReportLanguageOpt: Option;
        ReportLanguageCode: Code[10];
        ReportCaptionName: Text[50];
        //Records here
        ItemUnitofMeasure: Record "Item Unit of Measure";

        ItemReference: record "Item Reference";

        //CodeUnits here
        CU43: Codeunit Language;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50002_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
