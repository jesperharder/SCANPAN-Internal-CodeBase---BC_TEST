#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50000_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Varelabel (ID 50000).
/// </summary>
Report 50000 "Varelabel"
{
    AdditionalSearchTerms = 'Scanpan';

    Caption = 'Item label';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/Varelabel.rdlc';
    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 25;
            column(BarCode; BarCodeTxt)
            {
                IncludeCaption = false;
            }
            column(ItemDescription; ItemDescriptionTxt)
            {
                IncludeCaption = false;
            }
            column(ItemNo; ItemNumber)
            {
                IncludeCaption = false;
            }
            column(ItemTranslation; ItemTranslationTxt)
            {
                IncludeCaption = false;
            }
            column(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
            {
                IncludeCaption = false;
            }
            column(ItemUnitQuantity; ItemUnitQuantityInt)
            {
                IncludeCaption = false;
            }
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, NoOfCopiesInt);
                if NoOfCopiesInt = 0 then Error(NumberOfLabelsLbl);
                if NoOfCopiesInt > 25 then Error(MaxPrintOutLbl);
            end;

        }
    }
    requestpage
    {

        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                    field(NoOfCopies; NoOfCopiesInt)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. Of Copies';
                        ToolTip = 'Select number of labels to print.';
                    }

                    field(ItemNo; ItemNumber)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Item No.';
                        TableRelation = Item."No.";
                        ToolTip = 'Select Item No.';

                        trigger OnValidate()
                        var
                            Item: Record Item;
                        begin
                            Item.get(ItemNumber);
                            ItemDescriptionTxt := Item.Description;
                            BarCodeTxt := '';
                            ItemUnitOfMeasureCode := '';
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            Item: Record Item;
                        begin
                            if page.RunModal(Page::"Item List", Item) = Action::LookupOK then begin
                                ItemNumber := Item."No.";
                                ItemDescriptionTxt := Item.Description;

                                BarCodeTxt := '';
                                ItemUnitOfMeasureCode := '';
                            end;
                        end;
                    }
                    field(ItemDescription; ItemDescriptionTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Description';
                        Editable = false;
                    }
                    field(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Item Unit';
                        TableRelation = "Item Unit Of Measure"."Code";
                        ToolTip = 'Select Item Unit.';

                        trigger OnValidate()
                        var

                            ItemCrossReference: Record "Item Reference";

                            ItemUOM: Record "Item Unit of Measure";
                        begin
                            ItemCrossReference.SetFilter("Item No.", ItemNumber);
                            ItemCrossReference.SetFilter("Unit of Measure", ItemUnitOfMeasureCode);
                            ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
                            ItemCrossReference.FindFirst();
                            BarCodeTxt := ItemCrossReference."Reference No.";

                            ItemUOM.Get(ItemNumber, ItemUnitOfMeasureCode);
                            ItemUnitQuantityInt := ItemUOM."Qty. per Unit of Measure";
                        END;



                        trigger OnLookup(var Text: Text): Boolean
                        var

                            ItemCrossReference: Record "Item Reference";

                            ItemUOM: Record "Item Unit of Measure";
                        begin
                            ItemCrossReference.RESET;
                            ItemCrossReference.SETRANGE("Item No.", ItemNumber);
                            ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
                            if page.RUNMODAL(0, ItemCrossReference) = ACTION::LookupOK then begin
                                ItemUnitOfMeasureCode := ItemCrossReference."Unit of Measure";
                                BarCodeTxt := ItemCrossReference."Reference No.";

                                ItemUOM.Get(ItemNumber, ItemUnitOfMeasureCode);
                                ItemUnitQuantityInt := ItemUOM."Qty. per Unit of Measure";
                            end;
                        end;
                    }
                    field(BarCode; BarCodeTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Barcode';
                        Editable = false;
                    }
                    field(ItemUnitQuantity; ItemUnitQuantityInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Unit of Measure Quantity';
                        Editable = false;
                        ToolTip = 'Displays Quantity of the selected unit.';
                    }
                    field(ItemTranslation; ItemTranslationTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Translation';
                        ToolTip = 'Select Item Translation or blank for Item Card description.';
                        trigger OnValidate()
                        var
                            Item: Record Item;
                            ItmTranslation: Record "Item Translation";
                        begin
                            ItmTranslation.SetFilter("Item No.", ItemNumber);
                            ItmTranslation.SetFilter("Language Code", ItemTranslationTxt);
                            if ItmTranslation.Get(ItemNumber, ItemTranslationTxt) then begin
                                ItemDescriptionTxt := ItmTranslation.Description;
                                ItemTranslationTxt := ItmTranslation."Language Code";
                            end else begin
                                Item.get(ItemNumber);
                                ItemDescriptionTxt := Item.Description;
                            end;
                        end;


                        trigger OnLookup(var Text: Text): Boolean
                        var
                            Item: Record Item;
                            ItmTranslation: Record "Item Translation";
                        begin
                            ItmTranslation.SetFilter("Item No.", ItemNumber);
                            IF page.RUNMODAL(0, ItmTranslation) = ACTION::LookupOK THEN BEGIN
                                ItemDescriptionTxt := ItmTranslation.Description;
                                ItemTranslationTxt := ItmTranslation."Language Code";
                            end else begin
                                Item.get(ItemNumber);
                                ItemDescriptionTxt := Item.Description;
                            end;
                        end;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    var
        ItemNumber: code[20];
        ItemSelected: code[20];
        ItemUnitOfMeasureCode: code[20];
        ItemUnitQuantityInt: Integer;

        NoOfCopiesInt: Integer;
        MaxPrintOutLbl: Label 'No more than 25 labels per print.';
        NumberOfLabelsLbl: label 'Select labels to print.';
        BarCodeTxt: Text[50];
        ItemDescriptionTxt: Text[100];
        ItemTranslationTxt: Text[100];

    trigger OnInitReport()
    begin
        NoOfCopiesInt := 1;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]

        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50000_v7_0_0_2350;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet Path;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
