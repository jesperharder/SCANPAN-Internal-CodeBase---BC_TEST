#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.3.0.2533")
    {
        type(ForNav.Report_7_3_0_2533; ForNavReport50008_v7_3_0_2533) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50008) { }
        type("System.IO.Path"; System_IO_Path50008) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->


/// <summary>
/// 2024.07             Jesper Harder       074         Salespricelist with switch to show stock levels.
/// </summary>




Report 50008 "Salgsprisliste"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Sales Pricelist';
    RDLCLayout = './src/report/layout/ForNAV50008.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Price List Line"; "Price List Line")
        {
            column(Barcode; Barcode)
            {
                IncludeCaption = false;
            }
            column(CustomerItemNo; CustomerItemNo)
            {
                IncludeCaption = false;
            }
            column(CustomerName; CustomerName)
            {
                IncludeCaption = false;
            }
            column(CustomerNo; CustomerNo)
            {
                IncludeCaption = false;
            }
            column(CustomerPriceGroup; CustomerPriceGroup)
            {
                IncludeCaption = false;
            }
            column(dVat; dVat)
            {
                IncludeCaption = false;
            }
            column(HasCustomerItemNo; HasCustomerItemNo)
            {
                IncludeCaption = false;
            }
            column(ItemCategoryCode; ItemCategoryCode)
            {
                IncludeCaption = false;
            }
            column(ItemDescription; ItemDescription)
            {
                IncludeCaption = false;
            }
            column(ItemInventoryPostingCode; ItemInventoryPostingCode)
            {
                IncludeCaption = false;
            }
            column(ItemProductGroupCode; ItemProductGroupCode)
            {
                IncludeCaption = false;
            }
            column(ItemProductLineCode; ItemProductLineCode)
            {
                IncludeCaption = false;
            }
            column(ItemQuantiy; ItemQuantiy)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailable; ItemstockAvailable)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailableDate; ItemStockAvailableDate)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailableExt; ItemStockAvailableExt)
            {
                IncludeCaption = false;
            }
            column(ItemStockLevel; ItemStockLevel)
            {
                IncludeCaption = false;
            }
            column(ItemUnit; ItemUnit)
            {
                IncludeCaption = false;
            }
            column(ItemWeight; ItemWeight)
            {
                IncludeCaption = false;
            }
            column(LanguageSelected; LanguageSelected)
            {
                IncludeCaption = false;
            }
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(SalesPriceNET; SalesPriceNET)
            {
                IncludeCaption = false;
            }
            column(SalesPriceRRP; SalesPriceRRP)
            {
                IncludeCaption = false;
            }
            column(ShowStockLevel; ShowStockLevel)
            {
                IncludeCaption = false;
            }
            column(tVat; tVat)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            var
            begin
                Evaluate(dVat, tVat);

                "Price List Line".SetRange("Asset Type", "Price List Line"."Asset Type"::Item);
                "Price List Line".SetRange("Ending Date", 0D);
                "Price List Line".SetFilter("Starting Date", '<%1', Today());
                "Price List Line".SetRange("Source Type", "Price List Line"."Source Type"::"Customer Price Group");

                if CustomerPriceGroup <> '' then "Price List Line".SetFilter("Source No.", CustomerPriceGroup);
                if ItemProductLineCode <> '' then Items.SetFilter("Product Line Code", ItemProductLineCode);
                if ItemProductGroupCode <> '' then Items.SetFilter("Prod. Group Code", ItemProductGroupCode);
                if ItemInventoryPostingCode <> '' then Items.SetFilter("Gen. Prod. Posting Group", ItemInventoryPostingCode);
                if ItemCategoryCode <> '' then Items.SetFilter("Item Category Code", ItemCategoryCode);
            end;

            trigger OnAfterGetRecord();
            var
                PriceListLine: Record "Price List Line";
            begin

                //Hent alle værdier
                ItemNo := "Price List Line"."Asset No.";

                /* PriceListLine.Copy("Price List Line");
																PriceListLine.SetFilter("Asset No.", ItemNo);
																PriceListLine.FindFirst();
																If (PriceListLine.Count > 1) and (PriceListLine."Minimum Quantity" <= 1) then
																	CurrReport.Skip();
																 */

                //Skip hvis ikke varen er inden for filter
                Items.SetFilter("No.", ItemNo);

                ItemStockAvailable := 0;
                ItemStockAvailableExt := 0;
                ItemStockLevel := 0;
                ItemStockAvailableDate := 0D;

                if not Items.FINDFIRST() then
                    CurrReport.Skip();

                Items.CalcFields(Inventory);
                ItemStockLevel := Items.Inventory;
                ItemStockAvailable := Items."Calculated Available NOTO";
                ItemStockAvailableExt := items."Calculated Available Ext. NOTO";
                ItemStockAvailableDate := items."Calculated Available Date NOTO";

                ItemDescription := ItemDescriptionGet(ItemNo, LanguageSelected);
                if CustomerNo <> '' then begin
                    CustomerItemNo := CustomerItemNoGet(CustomerNo, ItemNo);
                end;




                Barcode := BarcodeGet(ItemNo, 0);
                ItemUnit := BarcodeGet(ItemNo, 1);
                ItemWeight := ItemUnitsGet(ItemNo, 0);
                ItemQuantiy := SalespriceGet(ItemNo, 2);

                //Option NetPrice,RRPPrice,MinQuantity
                SalesPriceNET := SalespriceGet(ItemNo, 0);
                SalesPriceRRP := SalespriceGet(ItemNo, 1);
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(OutputType)
                {
                    Caption = 'Report Output Type';
                    field(ShowStockLevel; ShowStockLevel)
                    {
                        Caption = 'Show Stock Levels';
                        ToolTip = 'Toggle stocklevel or Price Details.';
                        ApplicationArea = Basic;

                        trigger OnValidate()
                        begin
                            // Call a procedure to update the visibility or enablement of controls
                            //UpdateControls();

                        end;
                    }
                }
                group(Scanpan)
                {
                    Caption = 'Scanpan';
                    field(oVat; oVat)
                    {
                        Caption = 'Select VAT location';
                        OptionCaption = 'Selvvalgt sats,Ingen moms,Østrig,Finland,Danmark,Norge';
                        ToolTip = 'Choose the VAT percentage to be used in report price calculations';
                        ApplicationArea = Basic;
                        Enabled = IsControlEnabled; // Bind Enabled property to a function

                        trigger OnValidate()
                        var
                        begin
                            tVat := '';
                            case oVat of
                                0: //Selvvalgt
                                    tVat := '0';
                                1: //Ingen moms
                                    tVat := '0';
                                2: //Østrig
                                    tVat := '20';
                                3: //Finland
                                    tVat := '23';
                                4: //Danmark
                                    tVat := '25';
                                5: //Norge
                                    tVat := '25';
                            end;
                            Evaluate(dvat, tVat);
                        end;

                    }
                    field(tVat; tVat)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Momssats pct';

                        trigger OnValidate()
                        var
                        begin
                            Evaluate(dVat, tVat);
                        end;
                    }
                    field(LanguageSelected; LanguageSelected)
                    {

                        Caption = 'Sprog';
                        ApplicationArea = Basic;
                        TableRelation = Language.Code;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            rLanguage: Record Language;
                        begin
                            rLanguage.SetFilter(Code, 'DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL');
                            if page.RunModal(Page::Languages, rLanguage) = Action::LookupOK then LanguageSelected := rLanguage.Code;

                        end;

                    }
                    field(CustomerNo; CustomerNo)
                    {
                        Caption = 'Kunde til kunde/varenummer';
                        ApplicationArea = Basic;
                        TableRelation = Customer."No.";

                        trigger OnValidate()
                        var
                        begin
                            CustomerName := CustomerGet;
                            if CustomerName <> '' then HasCustomerItemNo := 1 else HasCustomerItemNo := 0;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            if page.RunModal((Page::"Customer List"), Customers) = Action::LookupOK then begin
                                CustomerNo := Customers."No.";
                                CustomerName := CustomerGet();
                                If CustomerName <> '' then HasCustomerItemNo := 1 else HasCustomerItemNo := 0;
                            end;

                        end;
                    }
                    field(CustomerName; CustomerName)
                    {
                        Caption = 'Kundnavn';
                        ApplicationArea = Basic;
                        Enabled = false;
                    }

                    field(CustomerPriceGroup; CustomerPriceGroup)
                    {
                        Caption = 'Debitor prisgruppe';
                        ApplicationArea = Basic;
                        TableRelation = "Customer Price Group";

                        trigger OnValidate()
                        var
                        begin
                            CustomerPriceGroup := CustomerPriceGroupGet(CustomerPriceGroup);
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            if page.RunModal((Page::"Customer Price Groups"), CustomerPriceGroups) = Action::LookupOK then
                                CustomerPriceGroup := CustomerPriceGroups.Code;
                        end;
                    }
                    field(ItemInventoryPostingCode; ItemInventoryPostingCode)
                    {
                        Caption = 'Produktbogføringsgruppe';
                        ApplicationArea = Basic;
                        TableRelation = "Gen. Product Posting Group";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemProductPostingGroups);
                            ItemProductPostingGroups.SetFilter(Code, '%1|%2|%3', 'INTERN', 'EKSTERN', 'BRUND');
                            if page.RunModal((Page::"Gen. Product Posting Groups"), ItemProductPostingGroups) = Action::LookupOK then begin
                                ItemInventoryPostingCode := ItemProductPostingGroups.Code;
                            end;
                        end;

                    }





                    field(ItemProductLineCode; ItemProductLineCode)
                    {
                        Caption = 'Produktlinjekode';
                        ApplicationArea = Basic;
                        //TableRelation = "NOTO Item Categories";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemCategories);
                            ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductLineCode);
                            if page.RunModal((Page::"NOTO Item Categories"), ItemCategories) = Action::LookupOK then begin
                                ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductLineCode);
                                ItemProductLineCode := ItemCategories.Code;
                            end;

                        end;

                    }
                    field(ItemCategoryCode; ItemCategoryCode)
                    {
                        Caption = 'Varekategorier';
                        ApplicationArea = Basic;
                        TableRelation = "Item Category";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemBCCategories);
                            ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductUsage);
                            if page.RunModal((Page::"Item Categories"), ItemBCCategories) = Action::LookupOK then begin
                                ItemCategoryCode := ItemBCCategories.Code;
                            end;
                        end;

                    }
                    /* 
					field(ItemProductGroupCode; ItemProductGroupCode)
					{
						Caption = 'Produktgruppekode';
						ApplicationArea = Basic;
						//TableRelation = "NOTO Item Categories";

						trigger OnLookup(var Text: Text): Boolean
						var
						begin
							Clear(ItemCategories);
							ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductGroupCode);
							if page.RunModal((Page::"NOTO Item Categories"), ItemCategories) = Action::LookupOK then begin
								ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductGroupCode);
								ItemProductGroupCode := ItemCategories.Code;
							end;
						end;
					}
					 */
                }
                group(SelectorsScanpan)
                {
                    Visible = false;

                    field(HasCustomerItemNo; HasCustomerItemNo)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'HasCustomerItemNo';
                        Visible = false;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;

            //SCANPAN
            //LanguageSelected := 'DAN';
            //tVat := '25';
            //dVat := 25;

        end;

    }

    trigger OnInitReport()
    begin
        IsControlEnabled := true;
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;

        //Set Report language

        //CurrReport.LANGUAGE := ReportLanguage.GetLanguageID(LanguageSelected);

        CurrReport.LANGUAGE := LanguageCU.GetLanguageID(LanguageSelected);

    end;

    var

        Customers: Record Customer;
        CustomerPriceGroups: Record "Customer Price Group";
        ItemProductPostingGroups: Record "Gen. Product Posting Group";

        //TABLES
        Items: Record Item;
        ItemBCCategories: Record "Item Category";

        ItemCrossReference: Record "Item Reference";

        ItemTranslation: Record "Item Translation";
        ItemUnitOfMeasure: Record "Item Unit of Measure";

        ItemCategories: Record "NOTO Item Categories";
        //ReportLanguage: Record Language;
        LanguageCU: Codeunit Language;
        IsControlEnabled: Boolean;
        ShowStockLevel: Boolean;
        tVat: code[2];
        Barcode: Code[20];
        CustomerItemNo: Code[20];
        CustomerNo: Code[20];
        ItemNo: code[20];
        ItemUnit: Code[20];
        ItemWeight: Code[20];
        LanguageSelected: Code[20];
        ReportLanguageCode: Code[20];
        CustomerPriceGroup: code[50];
        ItemCategoryCode: Code[50];
        ItemInventoryPostingCode: Code[50];
        ItemProductGroupCode: Code[50];
        ItemProductLineCode: Code[50];
        ItemStockAvailableDate: date;
        dVat: Decimal;
        ItemQuantiy: Decimal;
        ItemStockAvailable: Decimal;
        ItemStockAvailableExt: Decimal;

        ItemStockLevel: Decimal;
        NetUnitPrice: Decimal;
        SalesPriceNET: Decimal;
        SalesPriceRRP: Decimal;
        HasCustomerItemNo: Integer;
        PackageQty: Integer;
        oVat: Option;

        ReportLanguageOption: Option;
        ItemDescription: Text;
        ReportCaptionName: Text[50];
        CustomerName: Text[120];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50008_v7_3_0_2533;

    local procedure BarcodeGet(ItemNo: Code[20]; GetType: Option BarCode,"Item Unit"): code[20];
    var

        ItemCrossReference: Record "Item Reference";

    begin

        ItemCrossReference.Reset();
        ItemCrossReference.SetFilter("Item No.", ItemNo);
        ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
        ItemCrossReference.SETFILTER("Reference Type No.", '<>%1', 'EAN');
        ItemCrossReference.SETFILTER("Unit of Measure", '%1|%2|%3', 'STK', 'SET', 'SÆT');
        if ItemCrossReference.FindFirst() then begin
            if GetType = GetType::BarCode then Exit(ItemCrossReference."Reference No.");
            if GetType = GetType::"Item Unit" then exit(ItemCrossReference."Unit of Measure");
        end;
    end;

    local procedure CustomerGet(): Text[120];
    var
    begin
        Customers.Reset();
        If Customers.Get(CustomerNo) then begin
            CustomerPriceGroup := Customers."Customer Price Group";
            exit(Customers.Name);
        end;
    end;

    local procedure CustomerItemNoGet(CustNo: code[20]; ItemNo: Code[20]): Code[20]
    var

        ItemCrossReference: Record "Item Reference";

    begin
        ItemCrossReference.Reset();
        ItemCrossReference.SetFilter("Item No.", ItemNo);
        ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::Customer);
        ItemCrossReference.SETFILTER("Reference Type No.", CustNo);

        if ItemCrossReference.FindFirst() then begin
            exit(ItemCrossReference."Reference No.");
        end;

        //exit(CopyStr('**' + ItemNo, 1, 20));
    end;

    local procedure CustomerPriceGroupGet(CustomerPriceGroup: Code[20]): code[50]
    var
    begin
        CustomerPriceGroups.Reset();
        If CustomerPriceGroups.Get(CustomerPriceGroup) then begin
            Exit(CustomerPriceGroups.Code);
        end;
    end;

    local procedure ItemDescriptionGet(ItemNo: code[20]; LanguageCode: Code[20]): Text
    var
        Items: Record Item;
        ItemTranslation: Record "Item Translation";
    begin
        ItemTranslation.SetFilter("Item No.", ItemNo);
        ItemTranslation.SetFilter("Language Code", LanguageCode);
        if ItemTranslation.FindFirst() then Exit(ItemTranslation.Description + ItemTranslation."Description 2");
        if Items.Get(ItemNo) then Exit(Items.Description);
    end;

    local procedure ItemUnitsGet(ItemNo: code[20]; GetType: Option Weight,NA): Code[20];
    var
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        ItemUnitOfMeasure.Reset();
        ItemUnitOfMeasure.SetFilter("Item No.", "Price List Line"."Asset No.");
        ItemUnitOfMeasure.SetFilter(Code, ItemUnit);
        if ItemUnitOfMeasure.FindFirst() then Exit(Format(ItemUnitOfMeasure.Weight, 0, '<Precision,2:2><Standard Format,2>'));

    end;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet System_IO_Path50008;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2533\ForNav.Reports.7.3.0.2533.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2533.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2533 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    local procedure SalespriceGet(ItemNo: code[20]; GetType: Option NetPrice,RRPPrice,MinQuantity): Decimal;
    var
        PriceLists: Record "Price List Line";
        MinQty: Decimal;
    begin
        PriceLists.Reset();
        PriceLists.SetFilter("Asset No.", ItemNo);
        PriceLists.SetFilter("Asset Type", 'Item');
        PriceLists.SetFilter("Ending Date", '');
        PriceLists.SetFilter("Starting Date", '<%1', Today);
        If PriceLists.FindFirst() then begin
            if Gettype = Gettype::NetPrice then exit(PriceLists."Line Amount");
            if GetType = GetType::RRPPrice then exit(9999);
            if GetType = GetType::MinQuantity then begin
                MinQty := PriceLists."Minimum Quantity";
                exit(PriceLists."Minimum Quantity");
            end
        end;
        if (MinQty = 0) and (GetType = GetType::MinQuantity) then begin
            PriceLists.SetFilter("Minimum Quantity", '>%1', 0);
            If PriceLists.FindFirst() then begin
                exit(PriceLists."Minimum Quantity");
            end;
        end;

    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
