dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50006_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Vareenhedsliste 50006 (ID 50006).
/// </summary>
#pragma warning disable AW0006
Report 50006 "Vareenhedsliste"
#pragma warning restore AW0006
{
    RDLCLayout = './src/report/layout/Vareenhedsliste50006.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Item Units list';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Item; Item)
        {
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Inventory Posting Group", "Product Line Code", "ABCD Category", Blocked;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(OnlyQtyOver; OnlyQtyOverInt)
            {
                IncludeCaption = false;
            }
            column(ItemTranslation; ItemTranslationCode)
            {
                IncludeCaption = false;
            }
            column(ItemTranslationDescription; ItemTranslationDescription)
            {
                IncludeCaption = false;
            }
            dataitem("Item Unit of Measure"; "Item Unit of Measure")
            {
                RequestFilterFields = "Code";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                trigger OnAfterGetRecord();
                begin
                    //"Item Unit of Measure".SetFilter("Qty. per Unit of Measure", '<%1', OnlyQtyOver);
                    if "Item Unit of Measure"."Qty. per Unit of Measure" < OnlyQtyOverInt then
                        CurrReport.Skip();
                end;
            }
            trigger OnAfterGetRecord();
            begin
                ItemTranslations.Reset();
                ItemTranslations.SetFilter("Language Code", ItemTranslationCode);
                ItemTranslations.SetFilter("Item No.", Item."No.");
                ItemTranslationDescription := '****' + Item.Description;
                if ItemTranslations.FindFirst() then ItemTranslationDescription := ItemTranslations.Description + ItemTranslations."Description 2";
            end;
        }
    }

    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                    /*					 field(ReportLanguageOption; ReportLanguageOption)
										{
											//Caption = 'Select report language';
											Caption = 'Report Caption Language';
											OptionCaption = 'Dansk,English';
											ApplicationArea = Basic;
										}
					 */
                    field(OnlyQtyOver; OnlyQtyOverInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Vis kun enheder over antal';
                        ToolTip = 'Angiv det minimumsantal en enhed skal have, for at blive vist';
                    }
                    field(ItemTranslation; ItemTranslationCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sprog varetekster';
                        TableRelation = Language;
                        ToolTip = 'Specifies the value of the Sprog varetekster field.';
                        trigger OnLookup(var Text: Text): Boolean
                        var
                        //ItemRec: Record Item;
                        begin
                            ItemLanguage.Reset();
                            ItemLanguage.SetFilter(Code, 'DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL');
                            if page.RunModal(9, ItemLanguage) = Action::LookupOK then
                                ItemTranslationCode := ItemLanguage.Code;
                        end;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies the value of the Design field.';
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    var
        ItemTranslations: Record "Item Translation";
        ItemLanguage: Record Language;
        //Records here
        LanguageCU: Codeunit Language;
        ItemTranslationCode: Code[10];
        ReportLanguageCode: Code[20];
        //Varables here
        OnlyQtyOverInt: Integer;
        ReportLanguageOption: Option;
        ItemTranslationDescription: Text;
        ReportCaptionName: Text[50];

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit();
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post();
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre();

        //Language
#pragma warning disable AA0206
        ReportLanguageCode := 'ENU';
#pragma warning restore AA0206
        ReportCaptionName := 'Item Unit list';
        if ReportLanguageOption = 0 then begin
            ReportLanguageCode := 'DAN';
            ReportCaptionName := 'Vareenhedsliste';
        end;
        //CurrReport.LANGUAGE := ReportLanguage.GetLanguageID(ItemTranslation);
        CurrReport.LANGUAGE := LanguageCU.GetLanguageId(ItemTranslationCode);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50006_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
#pragma warning disable AA0072
        ReportForNavObject: Variant;
#pragma warning restore AA0072
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID(), CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
