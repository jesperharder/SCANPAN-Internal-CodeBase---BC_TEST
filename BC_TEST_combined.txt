


/// <summary>
/// /// 2024.08             Jesper Harder       077         Generated Permissions Set file, preparing for CloudShift
/// </summary>

permissionset 50000 GeneratedPermission
{
    Assignable = true;
    Permissions = tabledata "Address List" = RIMD,
        tabledata BarCodesTmpSC = RIMD,
        tabledata CampaignStatistics = RIMD,
        tabledata DocumentLines = RIMD,
        tabledata ExtSalesLines = RIMD,
        tabledata "Field Selection Table" = RIMD,
        tabledata IICTrackingTmpSC = RIMD,
        tabledata InventoryJournalStatus = RIMD,
        tabledata InventoryMapShelfSC = RIMD,
        tabledata InventoryRessourceID = RIMD,
        //tabledata MandatoryFieldSetup=RIMD,
        tabledata MandatoryFieldSetup2 = RIMD,
        tabledata MapCustomerSalesPerson = RIMD,
        tabledata ProdContllingRoutingLinesTMP = RIMD,
        tabledata ProdControllingItemMap = RIMD,
        tabledata ProdControllingLinesTMP = RIMD,
        tabledata ProdControllingPanPlan = RIMD,
        tabledata ProdControllingRoutes = RIMD,
        tabledata SalesLineTMP = RIMD,
        tabledata SalespriceListTMP = RIMD,
        tabledata "Scanpan API Setup" = RIMD,
        tabledata UserSettingsPage = RIMD,
        tabledata VATEntriesBaseAmtSum = RIMD,
        tabledata WMSPickBinBalanceTMP = RIMD,
        table "Address List" = X,
        table BarCodesTmpSC = X,
        table CampaignStatistics = X,
        table DocumentLines = X,
        table ExtSalesLines = X,
        table "Field Selection Table" = X,
        table IICTrackingTmpSC = X,
        table InventoryJournalStatus = X,
        table InventoryMapShelfSC = X,
        table InventoryRessourceID = X,
        //table MandatoryFieldSetup=X,
        table MandatoryFieldSetup2 = X,
        table MapCustomerSalesPerson = X,
        table ProdContllingRoutingLinesTMP = X,
        table ProdControllingItemMap = X,
        table ProdControllingLinesTMP = X,
        table ProdControllingPanPlan = X,
        table ProdControllingRoutes = X,
        table SalesLineTMP = X,
        table SalespriceListTMP = X,
        table "Scanpan API Setup" = X,
        table UserSettingsPage = X,
        table VATEntriesBaseAmtSum = X,
        table WMSPickBinBalanceTMP = X,
        report Adresselabel = X,
        report CalculateInventory = X,
        report "Customs Declaration" = X,
        report DebitorAddress = X,
        report EmployeeSales = X,
        report "Faktura Varekoder" = X,
        report "ForNAV 50014" = X,
        report Hyldelabel = X,
        report Licenseplate = X,
        report Ordrebeholdning = X,
        report PalletShipmentReport = X,
        report ProductionControllingPriority = X,
        report Salgsprisliste = X,
        report "Scanpan Pallelabel" = X,
        report Vareenhedsliste = X,
        report Varelabel = X,
        codeunit ChartBuilder = X,
        codeunit CompanyTestDetection = X,
        codeunit DeleteBackOrders = X,
        codeunit DSVAPI = X,
        codeunit JSONMethods = X,
        codeunit LTSautomate = X,
        codeunit OneTimeSetQuantityUpdate = X,
        codeunit PIMimages = X,
        codeunit ScanpanMiscellaneous = X,
        codeunit SubscriberCU = X,
        codeunit TEST_CU = X,
        page Addresses = X,
        page BC_LICENSE_INFORMATION_SC = X,
        page BC_LICENSE_PERMISSION_SC = X,
        page CampaignSales = X,
        page "CDOE-MailRecipient" = X,
        //page "Chart CustomerTopX"=X,
        page CreateMultipleBarcodes = X,
        page DSVAPI = X,
        page ExtSalesCustomerSales = X,
        page ExtSalesItemListSC = X,
        page ExtSalesLinesSC = X,
        page ExtSalesMapSalespersonSC = X,
        page ExtSalesRoleCenter = X,
        page FieldPage = X,
        //page IICBufferStatusPart=X,
        page IICTracking_BC = X,
        page InventoryJournalStatusSC = X,
        page InventoryMapShelfNoSC = X,
        page InventoryRessources = X,
        page MandatoryFieldSetup = X,
        page PhysInventoryJournalReplace = X,
        page "Picture URL Dialog" = X,
        page ProdBomLine = X,
        page ProdControllingDashboard = X,
        page ProdControllingItemMap = X,
        page ProdControllingPanPlan = X,
        page ProdControllingRoutingLine = X,
        page ProdControlListRoutingLine = X,
        page ProdDeleteBomComponents = X,
        page ProductionControlling = X,
        page PurchLines = X,
        page "Sales Commission" = X,
        page SalesBackordersInterCompany = X,
        page SalesLine = X,
        page "SalesLine Subform" = X,
        page SalesLine1 = X,
        page Salespricelist_Card_SC = X,
        page SalespriceSubPageSC = X,
        page "Scanpan API Setup" = X,
        page ScanpanCardPart = X,
        page ScanpanSetup = X,
        page SearchAndReplace = X,
        page TestPage = X,
        page WebServiceOrderFormCustomer = X,
        page WebServiceOrderFormItems = X,
        page WebServiceSalesPriceListSource = X,
        page "WMSPickBinBalance" = X,
        query AddressesCustomer = X,
        query AddressesVendor = X,
        query ProdRoutingLinesList = X,
        query "Query SalesCreditNote" = X,
        query "Query SalesInvoice" = X,
        query "SalesOrderForm PriceList" = X;
} 
/// <summary>
/// Codeunit Sorting (ID 50008).
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
codeunit 50008 "ChartBuilder"
{
    Permissions =
        tabledata "Business Chart Buffer" = R,
        tabledata Customer = R,
        tabledata Date = R,
        tabledata "Prod. Order Routing Line" = R,
        tabledata "Sorting Table" = RIM;


    var
        DemoActive: Boolean;

    /// <summary>
    /// TriggerDemoActive.
    /// </summary>
    /// <param name="Active">Boolean.</param>
    procedure TriggerDemoActive(Active: Boolean)
    begin
        DemoActive := Active;
    end;


    #region ProductionChartBuilder

    /// <summary>
    /// UpdateProductionChart.
    /// </summary>
    /// <param name="CapacityNo">Code[10].</param>
    /// <param name="CapacityType">enum "Capacity Type".</param>
    /// <param name="BusinessChartBuffer">VAR Record "Business Chart Buffer".</param>
    /// <param name="OrderStatus">array[5] of Boolean.</param>
    /// <param name="PeriodType">Enum "PeriodType".</param>
    /// <param name="PeriodStart">Text[2048].</param>
    /// <param name="PeriodLength">Integer.</param>
    /// <param name="BusinessChartType">enum "Business Chart Type".</param>
    /// <param name="ChartDataType">enum EnumChartDataType.</param>
    procedure UpdateProductionChart(CapacityNo: Code[20];
                            CapacityType: enum "Capacity Type";
                            var BusinessChartBuffer: Record "Business Chart Buffer";
                            OrderStatus: array[5] of Boolean;
                            PeriodType: Enum "PeriodType";
                            PeriodStart: Text[2048];
                            PeriodLength: Integer;
                            BusinessChartType: enum "Business Chart Type";
                            ChartDataType: enum EnumChartDataType
                        )
    var
        CalendarDate: Record Date;
        Qty: Decimal;
        PorderStatus: Enum "Production Order Status";
        ColumnNo: Integer;
        MeassureIndex: Integer;
        StatusLvl: Integer;
        SecondaryChartLbl: Label 'Planned Qty';
    begin
        BusinessChartBuffer.Initialize();
        //"Simulated","Planned","Firm Planned","Released","Finished"
        StatusLvl := 0;
        MeassureIndex := 0;
        foreach StatusLvl in enum::"Production Order Status".ordinals do
            if OrderStatus[StatusLvl + 1] = true then begin

                PorderStatus := enum::"Production Order Status".FromInteger(StatusLvl);
                BusinessChartBuffer.AddMeasure(Format(PorderStatus),
                                                MeassureIndex,
                                                BusinessChartBuffer."Data Type"::Decimal,
                                                BusinessChartType.AsInteger()
                                                );
                MeassureIndex += 1;
            end;

        //DEMO
        if DemoActive then
            BusinessChartType := BusinessChartType::Line;
            BusinessChartBuffer.AddMeasure(SecondaryChartLbl,
                                            MeassureIndex,
                                            BusinessChartBuffer."Data Type"::Decimal,
                                            BusinessChartType.AsInteger()
                                            );

        //Y-Axis

        //X-Axis
        BusinessChartBuffer.SetXAxis(Format(PeriodType), BusinessChartBuffer."Data Type"::String);

        //GetDateSet
        GetCalendarPeriodType(CalendarDate,
                    PeriodType,
                    PeriodLength,
                    PeriodStart);
        //X-Axis Columns
        ColumnNo := 0;
        if CalendarDate.FindSet() then
            repeat
                if PeriodType = PeriodType::Date then
                    BusinessChartBuffer.AddColumn(format(CalendarDate."Period Start"))
                else
                    BusinessChartBuffer.AddColumn(format(Date2DMY(CalendarDate."Period Start", 3)) + '-' + format(CalendarDate."Period Name"));

                //"Simulated","Planned","Firm Planned","Released","Finished"
                MeassureIndex := 0;
                for StatusLvl := 0 to 4 do
                    if OrderStatus[StatusLvl + 1] = true then begin
                        Qty := 0;
                        if StatusLvl = 4 then PorderStatus := PorderStatus::Finished;
                        if StatusLvl = 3 then PorderStatus := PorderStatus::Released;
                        if StatusLvl = 2 then PorderStatus := PorderStatus::"Firm Planned";
                        if StatusLvl = 1 then PorderStatus := PorderStatus::Planned;
                        if StatusLvl = 0 then PorderStatus := PorderStatus::Simulated;

                        //Planned
                        if (ChartDataType = ChartDataType::"Planned Quantity") or (ChartDataType = ChartDataType::"Planned Time") then begin
                            //Finished
                            if StatusLvl = 4 then
                                Qty := GetProductionPostedCapacityLedgerQuantity(PorderStatus,
                                                                           CapacityNo,
                                                                           CapacityType,
                                                                           ChartDataType,
                                                                           CalendarDate);

                            //Not Status Finished
                            if StatusLvl <> 4 then
                                Qty := GetProductionOrderRoutingLineQuantity(PorderStatus,
                                                                            CapacityNo,
                                                                            CapacityType,
                                                                            ChartDataType,
                                                                            CalendarDate);
                        end;
                        //Actual
                        if (ChartDataType = ChartDataType::"Actual Quantity") or (ChartDataType = ChartDataType::"Actual Time") then
                            Qty := GetProductionPostedCapacityLedgerQuantity(PorderStatus,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType,
                                                                       CalendarDate);


                        BusinessChartBuffer.SetValueByIndex(MeassureIndex, ColumnNo, Qty);
                        MeassureIndex += 1;
                    end;

                //DEMO
                if DemoActive then begin
                    Qty := GetProductionOrderRoutingLineQuantity(PorderStatus::Finished,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);

                    Qty += GetProductionOrderRoutingLineQuantity(PorderStatus::Released,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);
                    Qty += GetProductionOrderRoutingLineQuantity(PorderStatus::"Firm Planned",
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);

                    BusinessChartBuffer.SetValueByIndex(MeassureIndex, ColumnNo, Qty);
                end;

                ColumnNo += 1;
            until CalendarDate.Next() = 0;
    end;

    #endregion

    #region GetTopX Customers SalesLCY
    /// <summary>
    /// GetTopXCustomers.
    /// </summary>
    /// <param name="TempCustomer">Temporary VAR Record Customer.</param>
    /// <param name="TopX">Integer.</param>
    procedure GetTopXCustomersSalesLCY(var
                                           TempCustomer: Record Customer temporary;
                                           TopX: Integer)
    var
        Customer: Record Customer;
        TempSortingTable: Record "Sorting Table" temporary;
        i: Integer;
    begin
        Customer.Reset();
        Customer.FindSet();
        repeat
            Customer.CalcFields("Sales (LCY)");
            i += 1;
            TempSortingTable.Init();
            TempSortingTable.Integer := i;
            TempSortingTable.Code := Customer."No.";
            TempSortingTable.Decimal := Customer."Sales (LCY)";
            TempSortingTable.Insert();
        until Customer.Next() = 0;

        TempSortingTable.SetCurrentKey(Decimal);
        TempSortingTable.Ascending(false);
        i := 0;
        Customer.Reset();
        TempCustomer.Init();
        if TempSortingTable.FindSet() then
            repeat
                i += 1;
                Customer.Get(TempSortingTable.Code);
                TempCustomer.TransferFields(Customer);
                TempCustomer.Insert();
            until (i = TopX + 1) or (TempSortingTable.Next() = 0);
    end;
    #endregion

    #region helper code

    /// <summary>
    /// GetYearWeekNoInt.
    /// </summary>
    /// <param name="DateToConvert">Date.</param>
    /// <returns>Return value of type Integer.</returns>
    procedure ConvertDateToYearWeekInt(DateToConvert: Date): Integer
    var
        YearWeekInt: Integer;
        YearWeekNo: Text[6];
    begin
        YearWeekNo := '0' + Format(Date2DWY(DateToConvert, 2));
        if StrLen(YearWeekNo) = 3 then
            YearWeekNo := Format(Date2DWY(DateToConvert, 2));
        YearWeekNo := Format(Date2DWY(DateToConvert, 3)) + YearWeekNo;
        Evaluate(YearWeekInt, YearWeekNo);
        exit(YearWeekInt);
    end;

    /// <summary>
    /// FormatYearWeekIntToString.
    /// </summary>
    /// <param name="YearWeekNo">Integer.</param>
    /// <returns>Return value of type Text[6].</returns>
    procedure FormatYearWeekIntToStringPresentation(YearWeekNo: Integer): Text[6]
    var
        ConvText: Text[6];
    begin
        ConvText := Format(YearWeekNo, 6);
        exit(DelStr(ConvText, 1, 4));
        // + '-' + DelStr(Format(TempSortingTable.Integer), 5, 2);
    end;

    /// <summary>
    /// GetCalendar.
    /// </summary>
    /// <param name="CalendarDate">VAR Record Date.</param>
    /// <param name="PeriodType">enum PeriodType.</param>
    /// <param name="PeriodLength">Integer.</param>
    /// <param name="PeriodStart">Text[2048].</param>
    procedure GetCalendarPeriodType(var CalendarDate: Record Date;
                          PeriodType: enum PeriodType;
                                          PeriodLength: Integer;
                                          PeriodStart: Text[2048]
                          )
    var
        PeriodStartDate: Date;
        DateFormula: Text[50];
    begin
        CalendarDate.Reset();
        case PeriodType of
            PeriodType::Date:
                DateFormula := '<+' + Format(PeriodLength) + 'D>';
            PeriodType::Week:
                DateFormula := '<+' + Format(PeriodLength) + 'W>';
            PeriodType::Month:
                DateFormula := '<+' + Format(PeriodLength) + 'M>';
            PeriodType::Quarter:
                DateFormula := '<+' + Format(PeriodLength) + 'Q>';
            PeriodType::Year:
                DateFormula := '<+' + Format(PeriodLength) + 'Y>';
        end;

        CalendarDate.SetFilter("Period Type", '%1', PeriodType);
        Evaluate(PeriodStartDate, PeriodStart);
        CalendarDate.SetRange("Period Start", PeriodStartDate, CalcDate(DateFormula, PeriodStartDate));
    end;

    /// <summary>
    /// GetProductionOrderRoutingLineQuantity.
    /// </summary>
    /// <param name="ProductionOrderStatus">enum "Production Order Status".</param>
    /// <param name="CapacityNo">Code[20].</param>
    /// <param name="CapacityType">enum "Capacity Type".</param>
    /// <param name="ChartDataType">enum EnumChartDataType.</param>
    /// <param name="CalendarDate">Record Date.</param>
    /// <returns>Return value of type Decimal.</returns>
    procedure GetProductionOrderRoutingLineQuantity(ProductionOrderStatus: enum "Production Order Status";
                                                                               CapacityNo: Code[20];
                                                                               CapacityType: enum "Capacity Type";
                                                                               ChartDataType: enum EnumChartDataType;
                                                                               CalendarDate: Record Date): Decimal
    var
        CapacityUnitOfMeasure: Record "Capacity Unit of Measure";
        ProdOrderLine: Record "Prod. Order Line";
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        Qty: Decimal;
        RoutingTimeType: enum "Capacity Unit of Measure";
        TimeFactor: Integer;
    begin
        ProdOrderRoutingLine.Reset();
        ProdOrderRoutingLine.SetRange(Status, ProductionOrderStatus);
        ProdOrderRoutingLine.SetFilter(Type, '%1', CapacityType);
        ProdOrderRoutingLine.SetFilter("No.", CapacityNo);
        ProdOrderRoutingLine.SetRange("Starting Date", CalendarDate."Period Start", CalendarDate."Period End");
        Qty := 0;
        if ProdOrderRoutingLine.FindSet() then
            repeat
                TimeFactor := 100;
                CapacityUnitOfMeasure.Get(ProdOrderRoutingLine."Run Time Unit of Meas. Code");
                if CapacityUnitOfMeasure.Type = RoutingTimeType::"100/Hour" then TimeFactor := 100;
                if CapacityUnitOfMeasure.Type = RoutingTimeType::Hours then TimeFactor := 1;

                ProdOrderLine.SetRange(Status, ProdOrderRoutingLine.Status);
                ProdOrderLine.SetFilter("Prod. Order No.", ProdOrderRoutingLine."Prod. Order No.");
                if ProdOrderLine.FindSet() then
                    repeat
                        if ChartDataType = ChartDataType::"Planned Quantity" then
                            Qty += ProdOrderLine.Quantity * ScanpanMiscellaneous.GetItemSetMultiplier(ProdOrderLine."Item No.");

                        if ChartDataType = ChartDataType::"Planned Time" then
                            Qty += Round((ProdOrderRoutingLine."Run Time" / TimeFactor) * ProdOrderLine.Quantity);

                    until ProdOrderLine.Next() = 0;
            until ProdOrderRoutingLine.Next() = 0;
        exit(Qty);
    end;

    /// <summary>
    /// GetProductionCapacityLedgerQuantity.
    /// </summary>
    /// <param name="ProductionOrderStatus">enum "Production Order Status".</param>
    /// <param name="CapacityNo">Code[20].</param>
    /// <param name="CapacityType">enum "Capacity Type".</param>
    /// <param name="ChartDataType">enum EnumChartDataType.</param>
    /// <param name="CalendarDate">Record Date.</param>
    /// <returns>Return value of type Decimal.</returns>
    procedure GetProductionPostedCapacityLedgerQuantity(ProductionOrderStatus: enum "Production Order Status";
                                                                             CapacityNo: Code[20];
                                                                             CapacityType: enum "Capacity Type";
                                                                             ChartDataType: enum EnumChartDataType;
                                                                             CalendarDate: Record Date): Decimal
    var
        CapacityLedgerEntry: Record "Capacity Ledger Entry";
        CapacityUnitOfMeasure: Record "Capacity Unit of Measure";
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        Qty: Decimal;
        RoutingTimeType: enum "Capacity Unit of Measure";
        TimeFactor: Integer;
    begin
        Qty := 0;
        CapacityLedgerEntry.SetRange(Status, ProductionOrderStatus);
        CapacityLedgerEntry.SetRange("Order Type", CapacityLedgerEntry."Order Type"::Production);
        CapacityLedgerEntry.SetRange("Posting Date", CalendarDate."Period Start", CalendarDate."Period End");
        CapacityLedgerEntry.SetFilter(Type, '%1', CapacityType);
        CapacityLedgerEntry.SetFilter("No.", CapacityNo);
        CapacityLedgerEntry.CalcFields(Status);

        if CapacityLedgerEntry.FindSet() then
            repeat
                TimeFactor := 100;
                CapacityUnitOfMeasure.Get(CapacityLedgerEntry."Cap. Unit of Measure Code");
                if CapacityUnitOfMeasure.Type = RoutingTimeType::"100/Hour" then TimeFactor := 100;
                if CapacityUnitOfMeasure.Type = RoutingTimeType::Hours then TimeFactor := 1;

                if (ChartDataType = ChartDataType::"Planned Quantity") or (ChartDataType = ChartDataType::"Actual Quantity") then
                    Qty += CapacityLedgerEntry."Output Quantity" * ScanpanMiscellaneous.GetItemSetMultiplier(CapacityLedgerEntry."Item No.");

                if (ChartDataType = ChartDataType::"Planned Time") or (ChartDataType = ChartDataType::"Actual Time") then
                    Qty += Round(CapacityLedgerEntry."Run Time" / TimeFactor);

            until CapacityLedgerEntry.Next() = 0;

        exit(Qty);
    end;

    #endregion
}
 



/// <summary>
/// Codeunit "TestCompany" (ID 50003).
/// </summary>
/// <remarks>
/// 
/// 2023.07             Jesper Harder           041     Test for Company environment
/// 
/// </remarks>
/// 


codeunit 50003 "CompanyTestDetection"
{
#if CLEAN18
    trigger OnRun()
    begin
        OnAfterCompanyOpen();
    end;

    [EventSubscriber(ObjectType::Codeunit, Codeunit::LogInManagement, 'OnAfterCompanyOpen', '', false, false)]
    local procedure OnAfterCompanyOpen();
    var
        CurrDB: Record Database;
        Text000Lbl: Label 'Warning\You are in the Test Invironment\ "%1"\%2', Comment = '%1 = Displays the current database name., %2 = Curremnt Company Name';
    begin
        if not GuiAllowed then
            exit;

        CurrDB.SetRange("My Database", true);
        if CurrDB.FindFirst() then
            if CurrDB."Database Name" <> 'BC_DRIFT' then
                Message(Text000Lbl, CurrDB."Database Name", CompanyName);
    end;
#endif
}

 



codeunit 50011 "DeleteBackOrders"
{
    trigger OnRun()
    var
        NotoCustomization: codeunit "NOTOCustomization";
        SalesHeader: Record "Sales Header";
        dialog: Dialog;
        MessageLbl: Label 'Salesorder #1';
    begin
        SalesHeader.Reset();
        SalesHeader.SetRange("Del. SO's With Rem. Qty. NOTO", true);
        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
        SalesHeader.SetRange(Status, SalesHeader.Status::Released);
        SalesHeader.FindSet();
        dialog.Open(MessageLbl);
        repeat
            dialog.Update(1, SalesHeader."No.");
            NotoCustomization.DeleteSORemainingQty(SalesHeader);
        until SalesHeader.Next() = 0;
    end;
} 
///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>
//https,//learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/httpclient/httpclient-post-method
//http://thedenster.com/2022/03/create-json-in-al/
codeunit 50006 "DSVAPI"
{
    Access = Public;
    Subtype = Normal;

    /// <summary>
    /// DSVGetOrder.
    /// </summary>
    /// <param name="APIProfileID">Integer.</param>
    /// <param name="PurchaseOrderNo">code[20].</param>
    procedure DSVGetOrder(APIProfileID: Integer; PurchaseOrderNo: code[20])
    var
        TempJSONBuffer: Record "JSON Buffer" temporary;
        ScanpanAPISetup: Record "Scanpan API Setup";

        HttpClient: HttpClient;
        HttpContent: HttpContent;
        HttpHeaders: HttpHeaders;
        HttpResponseMessage: HttpResponseMessage;
        ErrorResponseStatusLbl: Label 'Web service returned an error message:\\ Status code: %1\ Description: %2', Comment = '%1 = Http response status code; %2 = status text.';
        HttpContentText: Text;
        JSONResponseMessage: Text;
        jsonText: Text;
        jsonToken: JsonToken;
        jsonObject: JsonObject;
        jsonOrderArray: JsonArray;
        jsonOrderToken: JsonToken;
        StateTxt: Text;
    begin
        //Get API profile
        ScanpanAPISetup.Get(APIProfileID);

        //'K101118'
        HttpContentText := ScanpanAPISetup.URL + '/' + PurchaseOrderNo;

        HttpClient.DefaultRequestHeaders.Add('Authorization', 'Basic ' + Base64EncodeUserPwd(ScanpanAPISetup."User Name", ScanpanAPISetup.Password));
        HttpClient.DefaultRequestHeaders.Add('Host', 'api.dsv.com');
        HttpClient.DefaultRequestHeaders.Add('Accept', 'application/json');
        HttpClient.DefaultRequestHeaders.Add('Cache-Control', 'no-cache');
        HttpClient.DefaultRequestHeaders.Add('DSV-Subscription-Key', ScanpanAPISetup."Subscription key");

        HttpContent.Clear();
        //HttpContent.WriteFrom(HttpContentText);

        HttpHeaders.Clear();
        HttpContent.GetHeaders(HttpHeaders);
        HttpHeaders.Remove('Content-Type');
        HttpHeaders.Add('Content-Type', 'application/json');
        HttpContent.GetHeaders(HttpHeaders);

        HttpClient.Get(HttpContentText, HttpResponseMessage);

        if not HttpResponseMessage.IsSuccessStatusCode then
            Error(
                ErrorResponseStatusLbl,
                HttpResponseMessage.HttpStatusCode,
                HttpResponseMessage.ReasonPhrase);

        HttpResponseMessage.Content.ReadAs(jsonText);

        jsonObject.ReadFrom(jsonText);

        TempJSONBuffer.DeleteAll();
        TempJSONBuffer.ReadFromText(jsonText);

        Message(jsonText);

        jsonOrderArray := jsonObject.AsToken().AsArray();

        jsonOrderArray.SelectToken('State', jsonOrderToken);
        jsonOrderArray.Get(jsonOrderArray.IndexOf('state'), jsonToken);


        //Status messages
        //Message(jsonToken.AsValue().AsText());
        //--do not re-enable TempJSONBuffer.Get('StateName',jsonToken)
        //Message(getJsonTextField(jsonObject, 'state'));

    end;

    /// <summary>
    /// DSVAPIorders.
    /// </summary>
    /// <param name="APIProfileID">Integer.</param>
    /// <param name="PurchaseOrderNo">code[20].</param>
    procedure DSVCreateOrder(APIProfileID: Integer; PurchaseOrderNo: code[20]; CancelOrder: Boolean)
    var
        TempJSONBuffer: Record "JSON Buffer" temporary;
        ScanpanAPISetup: Record "Scanpan API Setup";

        HttpClient: HttpClient;
        HttpContent: HttpContent;
        HttpHeaders: HttpHeaders;
        HttpResponseMessage: HttpResponseMessage;
        ErrorResponseStatusLbl: Label 'Web service returned an error message:\\ Status code: %1\ Description: %2', Comment = '%1 = Http response status code; %2 = status text.';
        HttpContentText: Text;
        JSONResponseMessage: Text;
        jsonText: Text;
    begin
        //Get API profile
        ScanpanAPISetup.Get(APIProfileID);

        //'K101118'
        HttpContentText := CreateDSVOrderJSON(PurchaseOrderNo, CancelOrder);

        HttpClient.DefaultRequestHeaders.Add('Authorization', 'Basic ' + Base64EncodeUserPwd(ScanpanAPISetup."User Name", ScanpanAPISetup.Password));
        HttpClient.DefaultRequestHeaders.Add('Host', 'api.dsv.com');
        HttpClient.DefaultRequestHeaders.Add('Accept', 'application/json');
        HttpClient.DefaultRequestHeaders.Add('Cache-Control', 'no-cache');
        HttpClient.DefaultRequestHeaders.Add('DSV-Subscription-Key', ScanpanAPISetup."Subscription key");

        HttpContent.Clear();
        HttpContent.WriteFrom(HttpContentText);

        HttpHeaders.Clear();
        HttpContent.GetHeaders(HttpHeaders);
        HttpHeaders.Remove('Content-Type');
        HttpHeaders.Add('Content-Type', 'application/json');
        HttpContent.GetHeaders(HttpHeaders);

        HttpClient.Post(ScanpanAPISetup.URL, HttpContent, HttpResponseMessage);

        if not HttpResponseMessage.IsSuccessStatusCode then begin
            Message(
                ErrorResponseStatusLbl,
                HttpResponseMessage.HttpStatusCode,
                HttpResponseMessage.ReasonPhrase);

            Error(HttpContentText);
        end;
        HttpResponseMessage.Content.ReadAs(jsonText);

        TempJSONBuffer.DeleteAll();
        TempJSONBuffer.ReadFromText(jsonText);

        if TempJSONBuffer.FindSet() then
            repeat
                JSONResponseMessage += TempJSONBuffer.GetValue() + '\';
            until TempJSONBuffer.Next() = 0;

        Message(JSONResponseMessage);

        Message(HttpContentText);
        Message(jsonText);
    end;

    //Create the PurchaseOrderJSON
    //https,//www.dvlprlife.com/2022/12/dynamics-365-business-central-read-a-json-file-with-al/
    local procedure CreateDSVOrderJSON(PurchaseOrderNumber: code[20]; CancelOrder: Boolean): Text
    var
        Item: Record Item;
        PurchaseHeader: Record "Purchase Header";
        PurchaseLine: Record "Purchase Line";
        DateTime: DateTime;
        CustomFieldsArray: JsonArray;
        JArray: JsonArray;
        OrderLinesArray: JsonArray;
        PackLinesArray: JsonArray;
        PartiesArray: JsonArray;
        CustomFieldsObject: jsonObject;
        JJsonObject: JsonObject;
        OrderLinesNested: JsonObject;
        OrderLinesObject: JsonObject;
        OrderObject: JsonObject;
        //PackLinesCustomFieldsObject: JsonObject;
        PackLinesObject: JsonObject;
        PartiesObject: JsonObject;
        NullJsonValue: JsonValue;
        JsonData: Text;
        DefaultTimeVar: Time;

        DSVTransportMode: Enum DSVTransportMode;
    begin
        NullJsonValue.SetValueToNull();
        Clear(JJsonObject);

        PurchaseHeader.Get(PurchaseHeader."Document Type"::Order, PurchaseOrderNumber);
        PurchaseLine.SetRange("Document Type", PurchaseHeader."Document Type");
        PurchaseLine.SetFilter("Document No.", PurchaseHeader."No.");
        PurchaseLine.SetRange(Type, PurchaseLine.Type::Item);
        PurchaseLine.FindSet();

        //ORDER - Purchase Header
        #region OrderObject
        Clear(OrderObject);
        Clear(DefaultTimeVar);
        OrderObject.Add('IsCancelled', CancelOrder);
        OrderObject.Add('OrderNumber', PurchaseHeader."No.");
        OrderObject.Add('OrderNumberSplit', 0);

        DateTime := System.CreateDateTime(PurchaseHeader."Order Date", DefaultTimeVar);
        if DateTime = 0DT then
            OrderObject.Add('OrderDate', '')
        else
            OrderObject.Add('OrderDate', DateTime);

        OrderObject.Add('OrderGoodsDescription', 'goods api');

        OrderObject.Add('TransportMode', EnumConvertTransportMode(DSVTransportMode::SEA)); //OrderObject.Add('TransportMode', 'AIR');
                                                                                           //OrderObject.Add('ContainerMode', 'LCL');
                                                                                           //OrderObject.Add('ServiceLevel', 'SRV');


        DateTime := System.CreateDateTime(PurchaseHeader."Promised Receipt Date", DefaultTimeVar);
        if DateTime = 0DT then
            OrderObject.Add('EstimatedExWorksDate', '')
        else
            OrderObject.Add('EstimatedExWorksDate', DateTime); //OrderObject.Add('EstimatedExWorksDate', '2019-07-15T06:51:50.13Z');

        //OrderObject.Add('ActualExWorksDate', '2019-07-02T06:51:50.13Z');

        DateTime := System.CreateDateTime(PurchaseHeader."Requested Receipt Date", DefaultTimeVar);
        if DateTime = 0DT then
            OrderObject.Add('ExWorksRequiredBy', '')
        else
            OrderObject.Add('ExWorksRequiredBy', DateTime); //OrderObject.Add('ExWorksRequiredBy', '2019-05-12T06:51:50.13Z');

        //OrderObject.Add('DeliveryRequiredBy', '2019-07-02T06:51:50.13Z');

        //
        // alternativ bestillingsadresse, opslag her førtst
        //
        OrderObject.Add('OriginCountry', PurchaseHeader."Buy-from Country/Region Code"); //OrderObject.Add('OriginCountry', NullJsonValue);

        OrderObject.Add('Incoterm', PurchaseHeader."Shipment Method Code"); //OrderObject.Add('Incoterm', 'INC');

        //OrderObject.Add('AdditionalTerms', 'AT');
        //OrderObject.Add('AdditionalTermsUNLOCO', NullJsonValue);

        //OrderObject.Add('ActualVolume', 20);
        //OrderObject.Add('UnitOfVolume', 'M3');
        //OrderObject.Add('ActualWeight', 10);
        //OrderObject.Add('UnitOfWeight', 'KG');
        //OrderObject.Add('TotalPacks', 1);
        //OrderObject.Add('TotalQuantity', 50);
        //OrderObject.Add('PackType', 'PK');
        //OrderObject.Add('FollowUpDate', '2019-07-02T06:51:50.13Z');
        //OrderObject.Add('PortOfLoading', 'KO');
        //OrderObject.Add('PortOfDischarge', 'PO');

        if PurchaseHeader."Currency Code" = '' then
            OrderObject.Add('Currency', 'DKK')
        else
            OrderObject.Add('Currency', PurchaseHeader."Currency Code");//OrderObject.Add('Currency', 'OC');

        OrderObject.Add('ClientType', 'Buyer');

        //OrderObject.Add('TotalValue', 200);
        //OrderObject.Add('TotalInners', 30.5);
        //OrderObject.Add('TotalOuters', 10);
        //OrderObject.Add('BookingReference', NullJsonValue);
        //OrderObject.Add('TransitWarehouse', NullJsonValue);

        //OrderObject.Add('OnHandDate', NullJsonValue);
        //OrderObject.Add('PlannerCode', 'PC');

        OrderObject.Add('PlannerEmail', GetPurchaserEmail(PurchaseHeader."Purchaser Code")); //OrderObject.Add('PlannerEmail', 'planner@email.com');

        //OrderObject.Add('WarehouseReceiptNumber', NullJsonValue);

        /*
                OrderObject.Add('VehicleRegistration', 'vh');
                OrderObject.Add('TrailerNumber', 'tr');
                OrderObject.Add('Seal', 'seal');
                OrderObject.Add('ManifestNumber', 'manifest');
                OrderObject.Add('BookedInNumber', 'bookedin');
                OrderObject.Add('DispatchedDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('EstimatedReceiptDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('BookedInDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('CutOffDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('InvoiceDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('InvoiceNumber', 'inv');
                OrderObject.Add('ConfirmedDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('ConfirmationNumber', 'conf');
                OrderObject.Add('ContractNumber', 'cont');
                OrderObject.Add('GoodsReceiptNumber', 'goodsre');
                OrderObject.Add('GoodsReceiptDate', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('AuthorisedBy', 'auth');
                OrderObject.Add('AuthorisedToShip', '2019-07-02T06:51:50.13Z');
                OrderObject.Add('OrderType', 'PO');
                OrderObject.Add('EarliestShipDate', NullJsonValue);
                OrderObject.Add('LatestShipDate', NullJsonValue);
        */
        #endregion //OrderObject

        //PackLines
        #region PackLinesObject
        Clear(JArray);
        //REPEAT each per. orderline
        Clear(PackLinesObject);
        /*
                PackLinesObject.Add('PackageCount', 200);
                PackLinesObject.Add('PackType', 'PCK');
                PackLinesObject.Add('ContainerPackingOrder', 0);
                PackLinesObject.Add('Weight', 20);
                PackLinesObject.Add('UnitOfWeight', NullJsonValue);
                PackLinesObject.Add('Length', 10);
                PackLinesObject.Add('Height', 20);
                PackLinesObject.Add('Width', 5);
                PackLinesObject.Add('UnitOfDimension', NullJsonValue);
                PackLinesObject.Add('Volume', 1);
                PackLinesObject.Add('UnitOfVolume', 'CM3');
                PackLinesObject.Add('RefNumber', 'REF');
                PackLinesObject.Add('Description', NullJsonValue);
                PackLinesObject.Add('DetailedDescription', NullJsonValue);
                PackLinesObject.Add('HarmonisedCode', NullJsonValue);
                PackLinesObject.Add('Origin', NullJsonValue);
                PackLinesObject.Add('CommodityCode', NullJsonValue);
                PackLinesObject.Add('ContainerNumber', NullJsonValue);
                PackLinesObject.Add('Outturn', 0);
                PackLinesObject.Add('OutturnedLength', 0);
                PackLinesObject.Add('OutturnedHeight', 0);
                PackLinesObject.Add('OutturnedWidth', 0);
                PackLinesObject.Add('OutturnedWeight', 0);
                PackLinesObject.Add('OutturnedVolume', 0);
                PackLinesObject.Add('OutturnComment', NullJsonValue);
                PackLinesObject.Add('Pillaged', 0);
                PackLinesObject.Add('Damaged', 0);
                PackLinesObject.Add('LoadingMeters', 30);
                PackLinesObject.Add('MarksAndNumbers', 'marks');
                PackLinesObject.Add('ProductCode', 'PC001');
                PackLinesObject.Add('DangerousGoodsRef', NullJsonValue);
                PackLinesObject.Add('NoOfPallets', 0);
                PackLinesObject.Add('PackIdentifier', NullJsonValue);
                PackLinesObject.Add('DocumentRemarks1', NullJsonValue);
                PackLinesObject.Add('DocumentRemarks2', NullJsonValue);
                PackLinesObject.Add('DocumentRemarks3', NullJsonValue);
                PackLinesObject.Add('Sequence', 0);
                PackLinesObject.Add('Stackable', true);
                PackLinesObject.Add('OrderLineNumber', 1);

                //Nested - CustomFields should go here "CustomFields": [{
                //PackLinesCustomFieldsObject
                Clear(PackLinesCustomFieldsObject);
                Clear(JArray);
                PackLinesCustomFieldsObject.Add('Name', 'PK Addon1');
                PackLinesCustomFieldsObject.Add('Type', 'STR');
                PackLinesCustomFieldsObject.Add('Value', 'string');
                JArray.Add(PackLinesCustomFieldsObject);
                PackLinesObject.Add('CustomFields', JArray);
                //
                PackLinesObject.Add('PackageMarks', 'packmarks');

                //UNTIL PackLinesObject.NEXT = 0

                Clear(PackLinesArray);
                PackLinesArray.Add(PackLinesObject);
        */
        #endregion //PackLinesObject

        #region CustomFieldsObject
        //CustomFieldsObject
        //"CustomFields": [{
        //AddOn.CustomsDetails

        /*
                Clear(CustomFieldsObject);
                Clear(CustomFieldsArray);
                CustomFieldsObject.Add('Name', 'StringAddon');
                CustomFieldsObject.Add('Type', 'STR');
                CustomFieldsObject.Add('Value', 'string');
                CustomFieldsArray.Add(CustomFieldsObject);

                Clear(CustomFieldsObject);
                CustomFieldsObject.Add('Name', 'DateAddon');
                CustomFieldsObject.Add('Type', 'DAT');
                CustomFieldsObject.Add('Value', '2019-07-02T06:51:50.13Z');
                CustomFieldsArray.Add(CustomFieldsObject);

                Clear(CustomFieldsObject);
                CustomFieldsObject.Add('Name', 'BoolAddon');
                CustomFieldsObject.Add('Type', 'BOO');
                CustomFieldsObject.Add('Value', 'true');
                CustomFieldsArray.Add(CustomFieldsObject);

                Clear(CustomFieldsObject);

                CustomFieldsObject.Add('Name', 'IntAddon');
                CustomFieldsObject.Add('Type', 'INT');
                CustomFieldsObject.Add('Value', '20');
                CustomFieldsArray.Add(CustomFieldsObject);

                Clear(CustomFieldsObject);
                CustomFieldsObject.Add('Name', 'DecimalAddon');
                CustomFieldsObject.Add('Type', 'DEC');
                CustomFieldsObject.Add('Value', '50.57');
                CustomFieldsArray.Add(CustomFieldsObject);
                Clear(CustomFieldsObject);
        */

        CustomFieldsObject.Add('CustomFields', CustomFieldsArray);
        //
        #endregion //CustomFieldsObject

        //Parties
        #region PartiesObject
        //Repeat Parties one time per order
        // Loop TYPES
        //  "Type": "Buyer",
        //  "Type": "Supplier",
        //  "Type": "DeliveryTo",
        //  "Type": "Owner",
        //  "Type": "PickupFrom",
        Clear(PartiesObject);
        PartiesObject.Add('Type', 'Buyer');
        PartiesObject.Add('Code', '87741400');
        PartiesObject.Add('IsActive', true);
        PartiesObject.Add('FullName', 'SCANPAN A/S');
        PartiesObject.Add('ClosestPort', NullJsonValue);
        PartiesObject.Add('Currency', NullJsonValue);
        PartiesObject.Add('PhoneNumber', '+4587741400');
        PartiesObject.Add('Email', 'supplychain@scanpan.dk');
        PartiesObject.Add('VATNumber', 'DK80673612');
        PartiesObject.Add('RegisteredNumber', NullJsonValue);
        PartiesArray.Add(PartiesObject);

        Clear(PartiesObject);
        PartiesObject.Add('Type', 'Supplier');
        PartiesObject.Add('Code', PurchaseHeader."Buy-from Vendor No.");//PartiesObject.Add('Code', 'POSTSUP');
        PartiesObject.Add('IsActive', 'true');
        PartiesObject.Add('FullName', PurchaseHeader."Buy-from Vendor Name"); //PartiesObject.Add('FullName', 'Supplier Name');
        PartiesObject.Add('ClosestPort', NullJsonValue);
        PartiesObject.Add('Currency', PurchaseHeader."Currency Code");//PartiesObject.Add('Currency', 'Cur');
        PartiesObject.Add('PhoneNumber', 'PH');
        PartiesObject.Add('Email', 'email');
        PartiesObject.Add('VATNumber', PurchaseHeader."VAT Registration No.");//PartiesObject.Add('VATNumber', 'vat');
        PartiesObject.Add('RegisteredNumber', NullJsonValue);
        PartiesArray.Add(PartiesObject);

        /*
                Clear(PartiesObject);

                PartiesObject.Add('Type', 'DeliveryTo');
                PartiesObject.Add('Code', 'POSTDLV');
                PartiesObject.Add('IsActive', 'true');
                PartiesObject.Add('FullName', 'Delivery Name');
                PartiesObject.Add('ClosestPort', NullJsonValue);
                PartiesObject.Add('Currency', NullJsonValue);
                PartiesObject.Add('PhoneNumber', '012');
                PartiesObject.Add('Email', 'recption@email.com');
                PartiesObject.Add('VATNumber', '572018555');
                PartiesObject.Add('RegisteredNumber', 'RegisterNumber');
                PartiesArray.Add(PartiesObject);
        */
        Clear(PartiesObject);
        /*
                PartiesObject.Add('Type', 'Owner');
                PartiesObject.Add('Code', 'POSTOWN');
                PartiesObject.Add('IsActive', 'true');
                PartiesObject.Add('FullName', 'Owner Name');
                PartiesObject.Add('ClosestPort', NullJsonValue);
                PartiesObject.Add('Currency', NullJsonValue);
                PartiesObject.Add('PhoneNumber', '0123');
                PartiesObject.Add('Email', NullJsonValue);
                PartiesObject.Add('VATNumber', NullJsonValue);
                PartiesObject.Add('RegisteredNumber', NullJsonValue);
                PartiesArray.Add(PartiesObject);
        */
        Clear(PartiesObject);
        /*
                PartiesObject.Add('Type', 'PickupFrom');
                PartiesObject.Add('Code', 'DECNTAZ-0001175');
                PartiesObject.Add('IsActive', 'true');
                PartiesObject.Add('FullName', 'DECNTAZ-0001175');
                PartiesObject.Add('ClosestPort', NullJsonValue);
                PartiesObject.Add('Currency', NullJsonValue);
                PartiesObject.Add('PhoneNumber', NullJsonValue);
                PartiesObject.Add('Email', NullJsonValue);
                PartiesObject.Add('VATNumber', NullJsonValue);
                PartiesObject.Add('RegisteredNumber', NullJsonValue);
                PartiesObject.Add('EDICode', 'DECNTAZ');
                PartiesObject.Add('ExternalCode', NullJsonValue);
                PartiesObject.Add('Address', NullJsonValue);
                PartiesArray.Add(PartiesObject);
        */
        Clear(PartiesObject);

        //UNTIL PartiesObject.NEXT = 0
        #endregion PartiesObject

        #region OrderLinesObject
        Clear(OrderLinesArray);

        //OrderLines
        repeat //until PurchaseLine.Next() = 0;
            //Repeat OrderLines
            Clear(OrderLinesObject);
            //OrderLinesObject.Add('LineStatus', 'PLC');
            OrderLinesObject.Add('LineNo', PurchaseLine."Line No.");
            OrderLinesObject.Add('Partno', PurchaseLine."No.");
            OrderLinesObject.Add('Description', PurchaseLine.Description);
            OrderLinesObject.Add('UnitOfQuantity', PurchaseLine."Unit of Measure Code");
            OrderLinesObject.Add('Quantity', PurchaseLine.Quantity);
            OrderLinesObject.Add('QtyInvoiced', PurchaseLine."Quantity Invoiced");
            OrderLinesObject.Add('QtyBooked', NullJsonValue);
            OrderLinesObject.Add('QtyReceived', PurchaseLine."Qty. Received (Base)");
            OrderLinesObject.Add('QtyShipped', NullJsonValue);
            OrderLinesObject.Add('Volume', PurchaseLine."Unit Volume");
            OrderLinesObject.Add('UnitOfVolume', NullJsonValue);
            OrderLinesObject.Add('Weight', PurchaseLine."Gross Weight");
            OrderLinesObject.Add('UnitOfWeight', NullJsonValue);
            OrderLinesObject.Add('ItemPrice', PurchaseLine."Unit Cost");
            OrderLinesObject.Add('LinePrice', PurchaseLine."Line Amount");
            OrderLinesObject.Add('Length', 0);
            OrderLinesObject.Add('Width', 0);
            OrderLinesObject.Add('Height', 0);
            OrderLinesObject.Add('DimUnit', NullJsonValue);
            OrderLinesObject.Add('DangerousGoodsRef', NullJsonValue);
            OrderLinesObject.Add('ContainerNumber', NullJsonValue);
            //ItemCode - ToldTariff
            Item.Reset();
            if Item.Get(PurchaseLine."No.") then
                OrderLinesObject.Add('HarmonisedCode', Item."Tariff No.")
            else
                OrderLinesObject.Add('HarmonisedCode', NullJsonValue);
            /*
                        OrderLinesObject.Add('PackLineId', NullJsonValue);
                        OrderLinesObject.Add('InvoiceNumber', NullJsonValue);
                        OrderLinesObject.Add('ConfirmationNumber', NullJsonValue);
                        OrderLinesObject.Add('PartAttrib1', NullJsonValue);
                        OrderLinesObject.Add('PartAttrib2', NullJsonValue);
                        OrderLinesObject.Add('PartAttrib3', NullJsonValue);
                        OrderLinesObject.Add('SpecialInstructions', 'SI');
                        OrderLinesObject.Add('AdditionalInfo', 'AI');
                        OrderLinesObject.Add('ContractNumber', 'CN');
                        OrderLinesObject.Add('OriginCountry', 'CO');
                        OrderLinesObject.Add('DecimalPlaces', 0);
                        OrderLinesObject.Add('QuantityPerUnit', 0);
                        OrderLinesObject.Add('NetWeight', 0);
                        OrderLinesObject.Add('TransportMode', 'AIR');
                        OrderLinesObject.Add('EarliestShipDate', NullJsonValue);
                        OrderLinesObject.Add('LatestShipDate', NullJsonValue);
                        OrderLinesObject.Add('FreightClass', NullJsonValue);
                        OrderLinesObject.Add('ServiceLevel', NullJsonValue);
            */
            //NEST
            /*
                        //Inners
                        Clear(OrderLinesNested);
                        OrderLinesNested.Add('Value', '30.5');
                        OrderLinesNested.Add('Unit', 'M3');
                        OrderLinesObject.Add('Inners', OrderLinesNested);

                        //Outers
                        Clear(OrderLinesNested);
                        OrderLinesNested.Add('Value', '10');
                        OrderLinesNested.Add('Unit', 'KG');
                        OrderLinesObject.Add('Outers', OrderLinesNested);

                        OrderLinesArray.Add(OrderLinesObject);

                        //Nested Parties
                        //OrderLinesObject.Add('Parties', '[]');
                        Clear(OrderLinesNested);
                        Clear(JArray);
                        //OrderLinesNested.Add('XXXX', 'XXXX');
                        //JArray.Add(OrderLinesNested);
                        OrderLinesObject.Add('Parties', JArray);
            */
            //
            /*
                        Clear(OrderLinesObject);
                        OrderLinesObject.Add('EstimatedExWorksDate', '2019-07-02T06:51:50.13Z');
                        OrderLinesObject.Add('ExWorksRequiredBy', '2019-07-02T06:51:50.13Z');
                        OrderLinesObject.Add('DeliveryRequiredBy', '2019-07-02T06:51:50.13Z');
                        OrderLinesArray.Add(OrderLinesObject);
            */

            //Nested OrderLines-CustomFields
            //OrderLinesObject.Add('CustomFields', '[]');
            Clear(OrderLinesNested);
            Clear(JArray);

            //CN+TW is Aktiv Forædling
            if (PurchaseHeader."Buy-from Country/Region Code" = 'CN') or (PurchaseHeader."Buy-from Country/Region Code" = 'TW') then
                OrderLinesNested.Add('AddOn.CustomsDetails', 'Aktiv forædling')
            else
                OrderLinesNested.Add('AddOn.CustomsDetails', 'Nej');
            JArray.Add(OrderLinesNested);
            OrderLinesObject.Add('CustomFields', JArray);
            //
            OrderLinesArray.Add(OrderLinesObject);
        until PurchaseLine.Next() = 0;
        #endregion //OrderLinesObject

        //Finishing Json structure

        //Order Object Cont..
        //Build Json Structure
        #region #Order Object Cont.. Build Json Structure
        OrderObject.Add('PackLines', PackLinesArray);
        OrderObject.Add('CustomFields', CustomFieldsArray);

        //First put Requested Date, the if exists Promised Date
        if PurchaseHeader."Promised Receipt Date" = 0D then begin
            DateTime := System.CreateDateTime(PurchaseHeader."Requested Receipt Date", DefaultTimeVar);
            OrderObject.Add('RequiredExWorks', DateTime);
        end else begin
            DateTime := System.CreateDateTime(PurchaseHeader."Promised Receipt Date", DefaultTimeVar);
            OrderObject.Add('RequiredExWorks', DateTime);
        end;

        //Calculate +5 weeks for InStore Date
        if CalcDate('<+5W>', DT2Date(DateTime)) = 0D then
            OrderObject.Add('RequiredInStore', '')
        else
            OrderObject.Add('RequiredInStore', CalcDate('<+5W>', DT2Date(DateTime)));

        OrderObject.Add('Parties', PartiesArray);
        OrderObject.Add('ParentOrderNumber', NullJsonValue);
        OrderObject.Add('OrderLines', OrderLinesArray);
        #endregion

        JJsonObject.Add('Order', OrderObject);
        JJsonObject.WriteTo(JsonData);

        exit(JsonData);
    end;

    //Base64Encoding
    local procedure Base64EncodeUserPwd(UserName: Text[100]; Password: Text[100]): Text
    var
        Base64Convert: Codeunit "Base64 Convert";
        SubstFormatLbl: Label '%1:%2', Comment = '%1 = Username; %2 = Password', Locked = true;
        AuthString: Text;
    begin
        AuthString := StrSubstNo(SubstFormatLbl, UserName, Password);
        AuthString := Base64Convert.ToBase64(AuthString);
        exit(AuthString);
    end;

    #region Helper Code
    //https://www.kauffmann.nl/2020/07/16/converting-enum-values-in-al/
    local procedure EnumConvertTransportMode(Level: Enum DSVTransportMode): Text
    var
        OrdinalValue: Integer;
        Index: Integer;
        LevelName: Text;
    begin
        OrdinalValue := Level.AsInteger();
        Index := Level.Ordinals.IndexOf(OrdinalValue);
        LevelName := Level.Names.Get(Index);
        exit(LevelName);
    end;

    local procedure GetPurchaserEmail(PurchaserCode: code[20]): Text
    var
        SalespersonPurchaserRec: Record "Salesperson/Purchaser";
    begin
        if SalespersonPurchaserRec.Get(PurchaserCode) then exit(SalespersonPurchaserRec."E-Mail");
    end;

    /// <summary>
    /// getJsonTextField.
    /// </summary>
    /// <param name="o">JsonObject.</param>
    /// <param name="Member">Text.</param>
    /// <returns>Return value of type TextBuilder.</returns>
    procedure getJsonTextField(o: JsonObject; Member: Text): Text
    var
        Result: JsonToken;
    begin
        if o.Get(Member, Result) then
            exit(Result.AsValue().AsText());
    end;

    #endregion
}
 




//https://github.com/ajkauffmann/ALWebServiceExamples/blob/master/BaseObjects/Codeunits/JSONMethods.al
codeunit 50007 JSONMethods
{
    procedure GetJsonValueAsText(var JSonObject:JsonObject; Property:Text) Value:text
    var
        JsonValue:JsonValue;
    begin
        if not GetJsonValue(JSonObject,Property,JsonValue) then
            exit;
        Value := JsonValue.AsText;
    end;

    procedure GetJsonValue(var JSonObject:JsonObject; Property:Text; var JsonValue:JsonValue) :Boolean
    var
        JsonToken:JsonToken;
    begin
        if not JSonObject.Get(Property,JsonToken) then
            exit;
        JsonValue := JsonToken.AsValue();
        exit(true);
    end;


} 
/// <summary>
/// Codeunit LTSautomate (ID 50005).
/// </summary>
///
/// <remarks>
///
/// 2023.08             Jesper Harder               044     LTS Export Invoice Warehouse
///
/// </remarks>
codeunit 50005 LTSautomate
{
    TableNo = "Job Queue Entry";

    trigger OnRun()
    var
        ErrorTextLbl: Label 'This codeunit must run from Job Queue.';
        ErrorParameterLbl: Label 'Please specify Parameter String\IMPORT = Export all Purchase Invoices\EXPORT = Export new Sales Invoices to LTS and mark them sent.\WAREHOUSE = Export Warehouse status to LTS.';
    begin
        if Rec."Object ID to Run" = 0 then
            //running outside job queue
                Error(ErrorTextLbl)
        else
            //running from job queue
            //Parameter := CopyStr(rec."Parameter String", StrPos(Rec."Parameter String", ':') + 1, StrLen(rec."Parameter String"));
            case Rec."Parameter String" of
                'IMPORT':
                    ExportPurchaseInvoiceToLTS();
                'EXPORT':
                    ExportSalesInvoicesToLTS();
                'WAREHOUSE':
                    ExportWarehouseToLTS();
                else
                    Error(ErrorParameterLbl);
            end;
    end;

    local procedure ExportPurchaseInvoiceToLTS()
    var
        PurchInvHeader: Record "Purch. Inv. Header";
        NOTOLTSInboundExport: Report "NOTO LTS Inbound Export";
    begin
        PurchInvHeader.Reset();
        //LTSInboundExport.SetSkipTollSystemSentCheck();
        //PurchInvHeader.SetFilter("Posting Date", '12-07-2023..');

        //13.10.2023 
        //PurchInvHeader.SetFilter("Toll System Sent NOTO", '%1', false);
        PurchInvHeader.SetFilter("Toll System Checked", '%1', false);
        PurchInvHeader.SetFilter("Drop Shipment", '%1', false);
        //
        PurchInvHeader.SetAutoCalcFields("Drop Shipment");
        PurchInvHeader.FindSet();
        NOTOLTSInboundExport.SetTableView(PurchInvHeader);
        NOTOLTSInboundExport.Run();
    end;

    local procedure ExportSalesInvoicesToLTS()
    var
        SalesInvoiceHeader: Record "Sales Invoice Header";
        NOTOLTSOutboundExport: Report "NOTO LTS Outbound Export";
    begin
        SalesInvoiceHeader.Reset();

        //13.10.2023 
        //SalesInvoiceHeader.SetFilter("Toll System Sent NOTO", '%1', false);
        SalesInvoiceHeader.SetFilter("Toll System Checked", '%1', false);
        SalesInvoiceHeader.SetFilter("Drop Shipment", '%1', false);
        //
        SalesInvoiceHeader.SetAutoCalcFields("Drop Shipment");
        SalesInvoiceHeader.FindSet();
        //LTSOutboundExport.SetSkipTollSystemSentCheck();
        NOTOLTSOutboundExport.SetTableView(SalesInvoiceHeader);
        NOTOLTSOutboundExport.Run();
    end;

    local procedure ExportWarehouseToLTS()
    var
        Location: Record Location;
        NOTOLTSWarehouseExport: Report "NOTO LTS Warehouse Export";
    begin
        Location.Reset();
        Location.SetRange("LTS Export NOTO", true);
        NOTOLTSWarehouseExport.SetTableView(Location);
        NOTOLTSWarehouseExport.Run();
    end;
} 


/// <summary>
/// Codeunit OneTimeSetQuantityUpdate (ID 50009).
/// </summary>
/// <remarks>
/// 057         Page Part - Graphs sorting parts
/// </remarks>
codeunit 50009 OneTimeSetQuantityUpdate
{
    trigger OnRun()
    var
        ProdOrderLine: Record "Prod. Order Line";
        ProdOrderLine2: Record "Prod. Order Line";
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        WindowDialog: Dialog;
        c: Integer;
    begin
        ProdOrderLine.Reset();
        ProdOrderLine.FindSet();
        WindowDialog.Open('ProdOrderLines Total #1, Counting #2');
        WindowDialog.Update(1, ProdOrderLine.Count);
        repeat
            c += 1;
            WindowDialog.Update(2, c);

            ProdOrderLine2.Get(ProdOrderLine.Status, ProdOrderLine."Prod. Order No.", ProdOrderLine."Line No.");
            ProdOrderLine2."Set Quantity" := ScanpanMiscellaneous.GetItemSetMultiplier(ProdOrderLine."Item No.");
            ProdOrderLine2."Remaining Set Quantity" := ProdOrderLine2."Set Quantity" * ProdOrderLine."Remaining Qty. (Base)";
            ProdOrderLine2."Finished Set Quantity" := ProdOrderLine2."Set Quantity" * ProdOrderLine."Finished Qty. (Base)";
            ProdOrderLine2."Quantity SetQuantity" := ProdOrderLine2."Set Quantity" * ProdOrderLine.Quantity;
            ProdOrderLine2.Modify(false);
        until ProdOrderLine.Next() = 0;
    end;

} 





/// <summary>
/// Codeunit SCANPAN_CodeBase (ID 50000).
/// </summary>
/// 
/// <remarks>
/// Version list
/// 2022.12             Jesper Harder       0193        Base Scanpan Codeunit
/// 2022.12             Jesper Harder       0193        Implements Item.Picture
/// </remarks>
codeunit 50000 "PIMimages" 
{
    Access = Public;
    Subtype = Normal;

    trigger OnRun()
    begin

    end;

    ///
    /// 
    /// Implements Item.Picture
    /// 


    #region formatGUIDtoURL
    /// <summary>
    /// formatGUIDtoURL.
    /// </summary>
    /// <param name="GuidStr">Text.</param>
    /// <param name="Width">Integer.</param>
    /// <param name="Height">Integer.</param>
    /// <returns>Return variable ImageURL of type Text.</returns>
    procedure formatGUIDtoURL(GuidStr: Text; Width: Integer; Height: Integer) ImageURL: Text
    var
        baseUrl: Text;
        endPoint: Text;
        id: Text;
        size: Text;
    begin
        //https://cdn.scanpan.dk/perfion/image.aspx?ID=3ca1d013-3701-49d9-8420-e8d56f5e8399&size=237x160
        baseUrl := 'https://cdn.scanpan.dk';
        endPoint := '/perfion/image.aspx';
        id := '?ID=' + GuidStr;
        size := '&size=' + format(Width) + 'x' + format(Height);
        ImageURL := baseUrl + endPoint + id + size;
    end;
    #endregion

    #region GetImageURL
    /// <summary>
    /// GetImageURL.
    /// </summary>
    /// <param name="ItemNo">code[20].</param>
    /// <param name="Width">Integer.</param>
    /// <param name="Height">Integer.</param>
    /// <returns>Return variable ImageURL of type Text.</returns>
    procedure GetImageURL(ItemNo: code[20]; Width: Integer; Height: Integer) ImageURL: Text
    var
        Length: Integer;
        StartIndex: Integer;
        ContentToSend: Text;
        GuidStr: Text;
        Result: Text;
    begin
        ContentToSend := '<Query>';
        ContentToSend += '    <Select languages="EN" options="IncludeFeatureViewOrder">';
        ContentToSend += '        <Feature id="Produktbillede" />';
        ContentToSend += '    </Select>';
        ContentToSend += '    <From id ="Product"/>';
        ContentToSend += '    <Where>';
        ContentToSend += '        <Clause id="Varenummer" operator="Match" value="' + ItemNo + '"/>';
        ContentToSend += '    </Where>';
        ContentToSend += '</Query>';

        Result := MakeRequest('http://cdn.scanpan.dk/Perfion/GetData.asmx', ContentToSend);

        Length := 36;
        StartIndex := Text.StrPos(Result, '&lt;/Produktbillede&gt;') - Length;
        if StartIndex < 0 then exit;

        GuidStr := Text.CopyStr(Result, StartIndex, Length);
        ImageURL := formatGUIDtoURL(GuidStr, Width, Height);
    end;
    #endregion

    #region GetItemImagesFromFilter
    /// <summary>
    /// GetItemImagesFromFilter.
    /// </summary>
    /// <param name="ItemInventoryGroupFilter">Text.</param>
    /// <param name="OverwriteExistingImage">Boolean.</param>
    procedure GetItemImagesFromFilter(ItemInventoryGroupFilter: Text; OverwriteExistingImage: Boolean)
    var
        Items: Record Item;
        HttpClient: HttpClient;

        HttpResponseMessage: HttpResponseMessage;
        InStream: InStream;
        PictureURL: Text;
        WindowDialog: Dialog;
        ItemSetCounter: Integer;
        TotalSetCounter: Integer;
        RunCode: Boolean;

        Text001Lbl: Label 'Updating Item ';
        Text002Lbl: Label 'Inventory Posting Group filter: ';
    begin
        Items.SetFilter("Inventory Posting Group", ItemInventoryGroupFilter);
        if Items.FindSet() then begin
            WindowDialog.OPEN(Text001Lbl + '@1@@@@@@@@@@@@@@@ \' + Text002Lbl + ' ' + ItemInventoryGroupFilter);
            TotalSetCounter := Items.Count;
            RunCode := false;
            if (OverwriteExistingImage = false) and (Items.Picture.Count = 0) then
                RunCode := true;
            if OverwriteExistingImage = true then
                RunCode := true;
            repeat
                if RunCode = true then begin
                    PictureURL := (GetImageURL(Items."No.", 150, 150));
                    if PictureURL = '' then //Not found - use default SCANPAN image logo
                        PictureURL := 'https://cdn.scanpan.dk/perfion/image.aspx?ID=ce38aebe-312f-4c06-8840-55c12b80d9e9&size=75x75';
                    HttpClient.Get(PictureURL, HttpResponseMessage);
                    HttpResponseMessage.Content.ReadAs(InStream);
                    Clear(Items.Picture);
                    Items.Picture.ImportStream(InStream, 'Product Image ' + Format(Items."No."));
                    ItemSetCounter += 1;
                    WindowDialog.Update(1, ROUND(ItemSetCounter / TotalSetCounter * 10000, 1));

                    Items.Modify(true);
                end;
            until Items.NEXT() = 0;
            WindowDialog.Close();
        end;
    end;
    #endregion

    #region ImportItemPictureFromURL
    /// <summary>
    /// ImportItemPictureFromURL.
    /// </summary>
    /// <param name="ItemNo">code[20].</param>
    /// <param name="PictureURL">Text.</param>
    procedure ImportItemPictureFromURL(ItemNo: code[20]; PictureURL: Text)
    var
        Item: Record Item;
        HttpClient: HttpClient;
        HttpResponseMessage: HttpResponseMessage;
        InStream: InStream;
    begin
        HttpClient.Get(PictureURL, HttpResponseMessage);
        HttpResponseMessage.Content.ReadAs(InStream);
        if Item.Get(ItemNo) then begin
            Clear(Item.Picture);
            Item.Picture.ImportStream(InStream, 'Demo picture for item ' + Format(Item."No."));
            Item.Modify(true);
        end;
    end;
    #endregion

    #region MakeRequest
    /// <summary>
    /// MakeRequest.
    /// </summary>
    /// <param name="uri">Text.</param>
    /// <param name="payload">Text.</param>
    /// <returns>Return variable responseText of type Text.</returns>
    procedure MakeRequest(uri: Text; payload: Text) responseText: Text;
    var
        HttpClient: HttpClient;
        HttpContent: HttpContent;
        contentHeaders: HttpHeaders;
        HttpRequestMessage: HttpRequestMessage;
        HttpResponseMessage: HttpResponseMessage;
        contentToSend: Text;
    begin

        ContentToSend := '<?xml version="1.0" encoding="utf-8"?>';
        ContentToSend += '<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">';
        ContentToSend += '<soap12:Body>';
        ContentToSend += '    <ExecuteQuery xmlns="http://perfion.com/">';
        ContentToSend += '        <query>';
        ContentToSend += '        <![CDATA[';
        contentToSend += payload;
        ContentToSend += '        ]]>';
        ContentToSend += '        </query>';
        ContentToSend += '    </ExecuteQuery>';
        ContentToSend += '</soap12:Body>';
        ContentToSend += '</soap12:Envelope>';



        // Add the payload to the content
        HttpContent.WriteFrom(contentToSend);

        // Retrieve the contentHeaders associated with the content
        HttpContent.GetHeaders(contentHeaders);
        contentHeaders.Clear();
        contentHeaders.Add('Content-Type', 'application/soap+xml; charset=utf-8');

        // Assigning content to request.Content will actually create a copy of the content and assign it.
        // After this line, modifying the content variable or its associated headers will not reflect in 
        // the content associated with the request message
        HttpRequestMessage.Content := HttpContent;

        HttpRequestMessage.SetRequestUri(uri);
        HttpRequestMessage.Method := 'POST';

        HttpClient.Send(HttpRequestMessage, HttpResponseMessage);

        // Read the response content as json.
        HttpResponseMessage.Content().ReadAs(responseText);
    end;
    #endregion
}
 
codeunit 50014 "SalesComparisonUpdate"
{
    /// <summary>
    /// 2024.08             Jesper Harder       076         Sales Comparison Update
    ///
    /// This codeunit updates the sales comparison data by calculating various sales metrics.
    /// It processes sales orders, invoices, credit memos, and budget entries to compute amounts related to sales orders,
    /// realized sales, budgets, and comparisons to previous periods.
    /// The budget calculation now adjusts the current month's budget proportionally based on the days elapsed in the month.
    /// The results are stored in the SalesComparisonData table, categorized by Inventory Posting Group.
    /// </summary>



    trigger OnRun()
    begin
        UpdateSalesComparisonData();
        //CalculateAndStoreSalesComparison();
    end;

    var
        SalesCompData: Record "SalesComparisonData";
        CurrentDateTime: DateTime;

    procedure CalculateAndStoreSalesComparison()
    var
        BudgetVsActual: Decimal;
        LastYTDSalesEkstern: Decimal;
        LastYTDSalesIntern: Decimal;
        //RealizedSalesAmountEKSTERN: Decimal;
        //RealizedSalesAmountINTERN: Decimal;
        SalesIndex: Decimal;
        SalesOrderAmount: Decimal;
        SalesOrderAmountEKSTERN: Decimal;
        SalesOrderAmountINTERN: Decimal;
        TotalLastYearYTDRealizedSalesAmount: Decimal;
        //TotalRealizedSalesAmount: Decimal;
        TotalYTDRealizedSalesAmount: Decimal;
        YTDSalesEkstern: Decimal;
        YTDSalesIntern: Decimal;
        DistinctCampaigns: Integer;

    begin
        // Calculate sales order amounts for INTERN and EKSTERN inventory posting groups
        GetSalesOrdersAmount(SalesOrderAmountINTERN, SalesOrderAmountEKSTERN);
        SalesOrderAmount := SalesOrderAmountINTERN + SalesOrderAmountEKSTERN;

        // Calculate realized sales amounts from invoices and credit memos
        //GetRealizedSalesAmount(RealizedSalesAmountINTERN, RealizedSalesAmountEKSTERN);
        //TotalRealizedSalesAmount := RealizedSalesAmountINTERN + RealizedSalesAmountEKSTERN;

        // Calculate sales comparisons with previous year
        CalculateSalesComparison(SalesIndex, YTDSalesIntern, YTDSalesEkstern, LastYTDSalesIntern, LastYTDSalesEkstern);
        TotalYTDRealizedSalesAmount := YTDSalesIntern + YTDSalesEkstern;
        TotalLastYearYTDRealizedSalesAmount := LastYTDSalesIntern + LastYTDSalesEkstern;

        // Count the number of distinct campaigns used in sales lines
        DistinctCampaigns := CountDistinctUsedCampaignNo();

        // Calculate the budget vs actual percentage
        CalculateBudgetComparison(BudgetVsActual, YTDSalesIntern + YTDSalesEkstern); // Use total YTD sales

        // Update or insert the sales comparison data
        if SalesCompData.FindFirst() then begin
            SalesCompData."Sales Order Amount" := SalesOrderAmount;
            SalesCompData."Sales Amount INTERN" := SalesOrderAmountINTERN;
            SalesCompData."Sales Amount EKSTERN" := SalesOrderAmountEKSTERN;
            //SalesCompData."Realized Sales Amount INTERN" := RealizedSalesAmountINTERN;
            //SalesCompData."Realized Sales Amount EKSTERN" := RealizedSalesAmountEKSTERN;
            //SalesCompData."Total Realized Sales Amount" := TotalRealizedSalesAmount;
            SalesCompData."Distinct Campaigns" := DistinctCampaigns;
            SalesCompData."Sales Index" := SalesIndex;
            SalesCompData."Budget Vs Actual" := BudgetVsActual;
            SalesCompData."Last Update" := CurrentDateTime;
            // Save YTD and last year's YTD realized sales amounts
            SalesCompData."YTD Sales Amount INTERN" := YTDSalesIntern;
            SalesCompData."YTD Sales Amount EKSTERN" := YTDSalesEkstern;
            SalesCompData."Total YTD Sales Amount" := TotalYTDRealizedSalesAmount;
            SalesCompData."Last YTD Sales INTERN" := LastYTDSalesIntern;
            SalesCompData."Last YTD Sales EKSTERN" := LastYTDSalesEkstern;
            SalesCompData."Total Last YTD Sales" := TotalLastYearYTDRealizedSalesAmount;

            SalesCompData.Modify();
        end else begin
            SalesCompData.Init();
            SalesCompData."Sales Order Amount" := SalesOrderAmount;
            SalesCompData."Sales Amount INTERN" := SalesOrderAmountINTERN;
            SalesCompData."Sales Amount EKSTERN" := SalesOrderAmountEKSTERN;
            //SalesCompData."Realized Sales Amount INTERN" := RealizedSalesAmountINTERN;
            //SalesCompData."Realized Sales Amount EKSTERN" := RealizedSalesAmountEKSTERN;
            //SalesCompData."Total Realized Sales Amount" := TotalRealizedSalesAmount;
            SalesCompData."Distinct Campaigns" := DistinctCampaigns;
            SalesCompData."Sales Index" := SalesIndex;
            SalesCompData."Budget Vs Actual" := BudgetVsActual;
            SalesCompData."Last Update" := CurrentDateTime;
            // Save YTD and last year's YTD realized sales amounts
            SalesCompData."YTD Sales Amount INTERN" := YTDSalesIntern;
            SalesCompData."YTD Sales Amount EKSTERN" := YTDSalesEkstern;
            SalesCompData."Total YTD Sales Amount" := TotalYTDRealizedSalesAmount;
            SalesCompData."Last YTD Sales INTERN" := LastYTDSalesIntern;
            SalesCompData."Last YTD Sales EKSTERN" := LastYTDSalesEkstern;
            SalesCompData."Total Last YTD Sales" := TotalLastYearYTDRealizedSalesAmount;

            SalesCompData.Insert();
        end;
    end;

    procedure CalculateBudgetComparison(var BudgetVsActual: Decimal; YearToDateSales: Decimal)
    begin
        // Retrieve Total Budget Amount from SalesCompData
        if SalesCompData.FindFirst() then begin
            if SalesCompData."Total Budget Amount" <> 0 then
                BudgetVsActual := ROUND((YearToDateSales / SalesCompData."Total Budget Amount") * 100, 1)
            else
                BudgetVsActual := 0; // Avoid division by zero
        end else
            BudgetVsActual := 0;
    end;

    procedure CalculateSalesComparison(
                            var SalesIndex: Decimal;
                            var YearToDateSalesIntern: Decimal;
                            var YearToDateSalesEkstern: Decimal;
                            var LastYearToDateSalesIntern: Decimal;
                            var LastYearToDateSalesEkstern: Decimal
                            )
    var
        CurrentDate: Date;
        EndOfLastYear: Date;
        StartOfLastYear: Date;
        StartOfYear: Date;
        TotalLastYearYTDSales: Decimal;
        TotalYearToDateSales: Decimal;
    begin
        // Get the current date
        CurrentDate := TODAY;

        // Calculate the start of the current year and last year
        StartOfYear := DMY2DATE(1, 1, DATE2DMY(CurrentDate, 3));
        StartOfLastYear := DMY2DATE(1, 1, DATE2DMY(CurrentDate, 3) - 1);
        EndOfLastYear := DMY2DATE(DATE2DMY(CurrentDate, 1), DATE2DMY(CurrentDate, 2), DATE2DMY(CurrentDate, 3) - 1);

        // Initialize totals
        YearToDateSalesIntern := 0;
        YearToDateSalesEkstern := 0;
        LastYearToDateSalesIntern := 0;
        LastYearToDateSalesEkstern := 0;

        // Calculate YTD Sales for the current year
        ProcessSalesInvoices(StartOfYear, CurrentDate, YearToDateSalesIntern, YearToDateSalesEkstern);
        ProcessSalesCreditMemos(StartOfYear, CurrentDate, YearToDateSalesIntern, YearToDateSalesEkstern);
        TotalYearToDateSales := YearToDateSalesIntern + YearToDateSalesEkstern;

        // Calculate YTD Sales for last year
        ProcessSalesInvoices(StartOfLastYear, EndOfLastYear, LastYearToDateSalesIntern, LastYearToDateSalesEkstern);
        ProcessSalesCreditMemos(StartOfLastYear, EndOfLastYear, LastYearToDateSalesIntern, LastYearToDateSalesEkstern);
        TotalLastYearYTDSales := LastYearToDateSalesIntern + LastYearToDateSalesEkstern;

        // Calculate the sales index with last year's YTD sales as the base (100)
        if TotalLastYearYTDSales <> 0 then
            SalesIndex := ROUND((TotalYearToDateSales / TotalLastYearYTDSales) * 100, 1)
        else
            SalesIndex := 0; // Avoid division by zero
    end;

    procedure CheckAndUpdateSalesComparison()
    begin
        // Get the current date and time
        CurrentDateTime := CURRENTDATETIME;
        // Recalculate and store the sales comparison data
        CalculateAndStoreSalesComparison();
    end;

    procedure CountDistinctUsedCampaignNo(): Integer
    var
        SalesLine: Record "Sales Line";
        CampaignDict: Dictionary of [Code[20], Boolean];
        DistinctCount: Integer;
    begin
        DistinctCount := 0;

        // Filter Sales Lines where "Campaign No." is not blank
        SalesLine.SetFilter("Used Campaign NOTO", '<>%1', '');

        // Loop through Sales Lines
        if SalesLine.FindSet() then
            repeat
                if not CampaignDict.ContainsKey(SalesLine."Used Campaign NOTO") then begin
                    CampaignDict.Add(SalesLine."Used Campaign NOTO", true);
                    DistinctCount += 1;
                end;
            until SalesLine.Next() = 0;

        exit(DistinctCount);
    end;

    procedure GetRealizedSalesAmount(var RealizedSalesAmountINTERN: Decimal; var RealizedSalesAmountEKSTERN: Decimal)
    var
        CurrentDate: Date;
        StartOfYear: Date;
    begin
        RealizedSalesAmountINTERN := 0;
        RealizedSalesAmountEKSTERN := 0;

        // Get today's date
        CurrentDate := TODAY;
        // Calculate the start of the current year
        StartOfYear := DMY2DATE(1, 1, DATE2DMY(CurrentDate, 3));

        // Process Sales Invoices
        ProcessSalesInvoices(StartOfYear, CurrentDate, RealizedSalesAmountINTERN, RealizedSalesAmountEKSTERN);

        // Process Sales Credit Memos
        ProcessSalesCreditMemos(StartOfYear, CurrentDate, RealizedSalesAmountINTERN, RealizedSalesAmountEKSTERN);
    end;

    procedure GetSalesOrdersAmount(var SalesOrderAmountINTERN: Decimal; var SalesOrderAmountEKSTERN: Decimal)
    var
        Item: Record Item;
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
    begin
        SalesOrderAmountINTERN := 0;
        SalesOrderAmountEKSTERN := 0;

        // Set filter on Sales Header to include only Sales Orders
        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);

        // Loop through the Sales Header records
        if SalesHeader.FindSet() then
            repeat
                // Set filter on Sales Line to match the Sales Header Document No.
                SalesLine.SetRange("Document Type", SalesLine."Document Type"::Order);
                SalesLine.SetRange("Document No.", SalesHeader."No.");
                SalesLine.SetFilter("Outstanding Amount (LCY)", '<>%1', 0);

                // Loop through the sales lines related to the current Sales Header
                if SalesLine.FindSet() then
                    repeat
                        // Process only lines of type Item
                        if SalesLine.Type = SalesLine.Type::Item then
                            // Get the related Item record
                            if Item.Get(SalesLine."No.") then
                                // Accumulate amounts based on Inventory Posting Group
                                if Item."Inventory Posting Group" = 'INTERN' then
                                    SalesOrderAmountINTERN += SalesLine."Outstanding Amount (LCY)" / 1000
                                else
                                    SalesOrderAmountEKSTERN += SalesLine."Outstanding Amount (LCY)" / 1000;
                    until SalesLine.Next() = 0;
            until SalesHeader.Next() = 0;
    end;

    procedure ProcessSalesCreditMemos(FromDate: Date; ToDate: Date; var RealizedSalesAmountINTERN: Decimal; var RealizedSalesAmountEKSTERN: Decimal)
    var
        Item: Record Item;
        SalesCrMemoHeader: Record "Sales Cr.Memo Header";
        SalesCrMemoLine: Record "Sales Cr.Memo Line";
        Amount: Decimal;
        CurrencyFactor: Decimal;
    begin
        // Set filters for Sales Credit Memo Line
        SalesCrMemoLine.SetRange("Posting Date", FromDate, ToDate);
        SalesCrMemoLine.SetRange(Type, SalesCrMemoLine.Type::Item);

        // Loop through Sales Credit Memo Lines
        if SalesCrMemoLine.FindSet() then
            repeat
                // Get the related Item record
                if Item.Get(SalesCrMemoLine."No.") then begin
                    // Get Currency Factor
                    SalesCrMemoHeader.Get(SalesCrMemoLine."Document No.");
                    CurrencyFactor := SalesCrMemoHeader."Currency Factor";
                    if CurrencyFactor = 0 then
                        CurrencyFactor := 1;

                    // Calculate line amount with currency factor and reverse sign for Credit Memos
                    Amount := -(SalesCrMemoLine.Amount / CurrencyFactor) / 1000;

                    // Accumulate amounts based on Inventory Posting Group
                    if Item."Inventory Posting Group" = 'INTERN' then
                        RealizedSalesAmountINTERN += Amount
                    else
                        RealizedSalesAmountEKSTERN += Amount;
                end;
            until SalesCrMemoLine.Next() = 0;
    end;

    procedure ProcessSalesInvoices(FromDate: Date; ToDate: Date; var RealizedSalesAmountINTERN: Decimal; var RealizedSalesAmountEKSTERN: Decimal)
    var
        Item: Record Item;
        SalesInvoiceHeader: Record "Sales Invoice Header";
        SalesInvoiceLine: Record "Sales Invoice Line";
        Amount: Decimal;
        CurrencyFactor: Decimal;
    begin
        // Set filters for Sales Invoice within the date range
        SalesInvoiceLine.SetRange("Posting Date", FromDate, ToDate);
        SalesInvoiceLine.SetRange(Type, SalesInvoiceLine.Type::Item);

        // Loop through Sales Invoice Lines
        if SalesInvoiceLine.FindSet() then
            repeat
                // Get the related Item record
                if Item.Get(SalesInvoiceLine."No.") then begin
                    // CurrencyFactor
                    SalesInvoiceHeader.Get(SalesInvoiceLine."Document No.");
                    CurrencyFactor := SalesInvoiceHeader."Currency Factor";
                    if CurrencyFactor = 0 then
                        CurrencyFactor := 1;

                    // Calculate line amount with currency factor
                    Amount := (SalesInvoiceLine.Amount / CurrencyFactor) / 1000;

                    // Accumulate amounts based on Inventory Posting Group
                    if Item."Inventory Posting Group" = 'INTERN' then
                        RealizedSalesAmountINTERN += Amount
                    else
                        RealizedSalesAmountEKSTERN += Amount;
                end;
            until SalesInvoiceLine.Next() = 0;
    end;

    procedure UpdateSalesComparisonData()
    begin
        // Update the budget amounts first
        UpdateSalesComparisonWithBudget();
        // Then update the sales comparison data
        CheckAndUpdateSalesComparison();
    end;



    /*
        procedure UpdateSalesComparisonWithBudget()
        var
            Item: Record Item;
            ItemBudgetEntry: Record "Item Budget Entry";
            ItemBudgetName: Record "Item Budget Name"; // Item Budget Name table (7132)
            CurrentDate: Date;
            StartOfYear: Date;
            BudgetAmountEKSTERN: Decimal;
            BudgetAmountINTERN: Decimal;
            TotalBudgetAmount: Decimal;
        begin
            // Get the current date and start of the current year
            CurrentDate := TODAY;
            StartOfYear := DMY2DATE(1, 1, DATE2DMY(CurrentDate, 3));

            // Initialize budget amounts
            BudgetAmountINTERN := 0;
            BudgetAmountEKSTERN := 0;

            // Set filters on Item Budget Name to include only unblocked budgets with analysis area Sales
            ItemBudgetName.SetRange(Blocked, false);
            ItemBudgetName.SetRange("Analysis Area", ItemBudgetName."Analysis Area"::Sales);

            // Loop through the valid Item Budget Names
            if ItemBudgetName.FindSet() then
                repeat
                    // Set filters on Item Budget Entry for current year and up to today's date, and valid budget names
                    ItemBudgetEntry.SetRange("Date", StartOfYear, CurrentDate);
                    ItemBudgetEntry.SetRange("Budget Name", ItemBudgetName."Name"); // Use the valid budget name
                    ItemBudgetEntry.SetRange("Analysis Area", ItemBudgetEntry."Analysis Area"::Sales);

                    // Loop through the Item Budget Entry records
                    if ItemBudgetEntry.FindSet() then
                        repeat
                            // Get the related Item record based on Item No.
                            if Item.Get(ItemBudgetEntry."Item No.") then
                                // Accumulate amounts based on Inventory Posting Group
                                if Item."Inventory Posting Group" = 'INTERN' then
                                    BudgetAmountINTERN += ItemBudgetEntry."Sales Amount" / 1000
                                else
                                    BudgetAmountEKSTERN += ItemBudgetEntry."Sales Amount" / 1000;
                        until ItemBudgetEntry.Next() = 0;
                until ItemBudgetName.Next() = 0;

            // Calculate the total budget amount
            TotalBudgetAmount := BudgetAmountINTERN + BudgetAmountEKSTERN;

            // Update or insert the SalesComparisonData record with budget amounts
            if SalesCompData.FindFirst() then begin
                SalesCompData."Budget Amount INTERN" := BudgetAmountINTERN;
                SalesCompData."Budget Amount EKSTERN" := BudgetAmountEKSTERN;
                SalesCompData."Total Budget Amount" := TotalBudgetAmount;
                SalesCompData.Modify();
            end else begin
                SalesCompData.Init();
                SalesCompData."Budget Amount INTERN" := BudgetAmountINTERN;
                SalesCompData."Budget Amount EKSTERN" := BudgetAmountEKSTERN;
                SalesCompData."Total Budget Amount" := TotalBudgetAmount;
                SalesCompData.Insert();
            end;
        end;
    */
    procedure UpdateSalesComparisonWithBudget()
    var
        Item: Record Item;
        ItemBudgetEntry: Record "Item Budget Entry";
        ItemBudgetName: Record "Item Budget Name"; // Item Budget Name table (7132)
        CurrentDate: Date;
        EndOfCurrentMonth: Date;
        StartOfYear: Date;
        BudgetAmountCurrentMonthEKSTERN: Decimal;
        BudgetAmountCurrentMonthINTERN: Decimal;
        BudgetAmountPrevMonthsEKSTERN: Decimal;
        BudgetAmountPrevMonthsINTERN: Decimal;
        TotalBudgetAmount: Decimal;
        TotalBudgetAmountEKSTERN: Decimal;
        TotalBudgetAmountINTERN: Decimal;
        DaysElapsedInCurrentMonth: Integer;
        DaysInCurrentMonth: Integer;
    begin
        // Get the current date, start of the current year, and end of the current month
        CurrentDate := TODAY;
        StartOfYear := DMY2DATE(1, 1, DATE2DMY(CurrentDate, 3));
        EndOfCurrentMonth := CALCDATE('<CM+1D>', CurrentDate) - 1;

        // Initialize budget amounts
        BudgetAmountPrevMonthsINTERN := 0;
        BudgetAmountPrevMonthsEKSTERN := 0;
        BudgetAmountCurrentMonthINTERN := 0;
        BudgetAmountCurrentMonthEKSTERN := 0;

        // Calculate days in current month and days elapsed
        DaysInCurrentMonth := DATE2DMY(EndOfCurrentMonth, 1);
        DaysElapsedInCurrentMonth := DATE2DMY(CurrentDate, 1);

        // Set filters on Item Budget Name to include only unblocked budgets with analysis area Sales
        ItemBudgetName.SetRange(Blocked, false);
        ItemBudgetName.SetRange("Analysis Area", ItemBudgetName."Analysis Area"::Sales);

        // Loop through the valid Item Budget Names
        if ItemBudgetName.FindSet() then
            repeat
                // Set filters on Item Budget Entry for current year up to end of current month
                ItemBudgetEntry.SetRange("Date", StartOfYear, EndOfCurrentMonth);
                ItemBudgetEntry.SetRange("Budget Name", ItemBudgetName."Name"); // Use the valid budget name
                ItemBudgetEntry.SetRange("Analysis Area", ItemBudgetEntry."Analysis Area"::Sales);

                // Loop through the Item Budget Entry records
                if ItemBudgetEntry.FindSet() then
                    repeat
                        // Get the related Item record based on Item No.
                        if Item.Get(ItemBudgetEntry."Item No.") then
                            // Determine if the entry date is in the current month
                            if (DATE2DMY(ItemBudgetEntry."Date", 2) = DATE2DMY(CurrentDate, 2)) and
                           (DATE2DMY(ItemBudgetEntry."Date", 3) = DATE2DMY(CurrentDate, 3)) then begin
                                // Entry is in the current month
                                // Accumulate amounts for current month
                                if Item."Inventory Posting Group" = 'INTERN' then
                                    BudgetAmountCurrentMonthINTERN += ItemBudgetEntry."Sales Amount"
                                else
                                    BudgetAmountCurrentMonthEKSTERN += ItemBudgetEntry."Sales Amount";
                            end else
                                // Entry is in a previous month
                                // Accumulate amounts for previous months
                                if Item."Inventory Posting Group" = 'INTERN' then
                                    BudgetAmountPrevMonthsINTERN += ItemBudgetEntry."Sales Amount"
                                else
                                    BudgetAmountPrevMonthsEKSTERN += ItemBudgetEntry."Sales Amount";
                    until ItemBudgetEntry.Next() = 0;
            until ItemBudgetName.Next() = 0;

        // Adjust current month's budget amounts proportionally
        BudgetAmountCurrentMonthINTERN := BudgetAmountCurrentMonthINTERN * DaysElapsedInCurrentMonth / DaysInCurrentMonth;
        BudgetAmountCurrentMonthEKSTERN := BudgetAmountCurrentMonthEKSTERN * DaysElapsedInCurrentMonth / DaysInCurrentMonth;

        // Calculate total budget amounts and convert to thousands
        TotalBudgetAmountINTERN := (BudgetAmountPrevMonthsINTERN + BudgetAmountCurrentMonthINTERN) / 1000;
        TotalBudgetAmountEKSTERN := (BudgetAmountPrevMonthsEKSTERN + BudgetAmountCurrentMonthEKSTERN) / 1000;

        // Calculate the total budget amount
        TotalBudgetAmount := TotalBudgetAmountINTERN + TotalBudgetAmountEKSTERN;

        // Update or insert the SalesComparisonData record with budget amounts
        if SalesCompData.FindFirst() then begin
            SalesCompData."Budget Amount INTERN" := TotalBudgetAmountINTERN;
            SalesCompData."Budget Amount EKSTERN" := TotalBudgetAmountEKSTERN;
            SalesCompData."Total Budget Amount" := TotalBudgetAmount;
            SalesCompData.Modify();
        end else begin
            SalesCompData.Init();
            SalesCompData."Budget Amount INTERN" := TotalBudgetAmountINTERN;
            SalesCompData."Budget Amount EKSTERN" := TotalBudgetAmountEKSTERN;
            SalesCompData."Total Budget Amount" := TotalBudgetAmount;
            SalesCompData.Insert();
        end;
    end;

}
 


codeunit 50002 "ScanpanMiscellaneous"
{
    /// <summary>
    /// Codeunit "ScanpanMiscellaneous" (ID 50002).
    /// 
    /// This codeunit provides a collection of utility procedures for the Scanpan implementation in Business Central.
    /// 
    /// Main functionalities include:
    /// - Updating the Requested Delivery Date on Sales Orders based on working days.
    /// - Ensuring manufacturing output quantities do not exceed previous operation quantities.
    /// - Updating GTIN on Item Cards from Item References.
    /// - Verifying if the user is in the specified company.
    /// - Generating barcodes (EAN and UCC codes) for items.
    /// - Toggling action messages on Requisition Lines in Purchase and Planning Worksheets.
    /// - Calculating warehouse pick bin balances.
    /// - Filling temporary tables for Sales Lines and Production Controlling Routing Lines.
    /// - Providing warnings for specific sales scenarios (e.g., Imerco DropShip).
    /// - Calculating sales prices based on purchase price markup.
    /// - Validating chain dimension values on customers.
    /// - Sending emails via AL code.
    /// 
    /// Version list
    /// 2023.02             Jesper Harder       0193        UpdateRequestedOrderDate, used from Subscriber CU
    /// 2023.02             Jesper Harder       0193        CheckItemJournalLinePreviousOutputQuantiy, used to ensure output qty not over previous
    /// 2023.02             Jesper Harder       0193        Update GTIN on Item Card
    /// 2023.02             Jesper Harder       0193        CheckIsUserInCompany MASTER
    /// 2023.03             Jesper Harder                   Updates Purchase and Planning Worksheet
    /// 2023.03             Jesper Harder       002         Warehouse Pick Balance
    /// 2023.03             Jesper Harder       005         Sales Lines Page
    /// 2023.03.27          Jesper Harder       015         Flowfield Tariff - SalesLine
    /// 2023.03.27          Jesper Harder       017         Inventory Journal StockStatus Add Code
    /// 2023.06             Jesper Harder       032         Warning Imerco DropShip 
    /// 2023.07.25          Jesper Harder       040         Warning salesline quantity Availability
    /// 2023.07.23          Jesper Harder       042         Salesprice based on PurchasePrice Markup
    /// 2023.10             Jesper Harder       056         Coating Description on Production Orders
    /// 2024.04             Jesper Harder       065         Filter and output of ItemUnitQuantity added
    /// 2024.05             Jesper Harder       066         Test for Correct Chain Dimension value on Customer
    /// 
    /// 2024.09             Jesper Harder                   //Error thrown in certain situations. Start Revised Code 18.9.2024JH
    /// 2024.09             Jesper Harder       080         Self-insured limit check with warning on sales order.
    /// 2024.10             Jesper Harder       083         Delete BackOrders Norway
    /// 2024.10             Jesper Harder       084         Shipmondo Add Mobile Number To Sales Header
    /// 2024.10             Jesper Harder       089         XtensionIT Shipmondo Add Pick-up Point
    /// </summary>

    Permissions =
        tabledata BarCodesTmpSC = RIMD,
        tabledata Bin = R,
        tabledata "Bin Content" = R,
        tabledata Campaign = R,
        tabledata CampaignStatistics = RI,
        tabledata "Capacity Ledger Entry" = R,
        tabledata "Company Information" = R,
        tabledata Currency = R,
        tabledata Customer = R,
        tabledata "Dimension Value" = R,
        tabledata InventoryJournalStatus = RID,
        tabledata InventoryMapShelfSC = R,
        tabledata "Inventory Setup" = RM,
        tabledata Item = RM,
        tabledata "Item Reference" = RI,
        tabledata "Item Journal Line" = RM,
        tabledata "Item Unit of Measure" = R,
        tabledata "Price List Line" = R,
        tabledata "Prod. Order Routing Line" = R,
        tabledata "Production Forecast Entry" = R,
        tabledata "Requisition Line" = RM,
        tabledata "Sales Header" = RM,
        tabledata "Sales Invoice Header" = R,
        tabledata "Sales Invoice Line" = R,
        tabledata "Sales Line" = RM,
        tabledata SalesLineTMP = RID,
        tabledata "Sales Shipment Line" = R,
        tabledata User = R,
        tabledata "Warehouse Shipment Line" = R,
        tabledata WMSPickBinBalanceTMP = RIMD;

    #region #066 Test for Correct Chain Dimension value on Customer
    /// <summary>
    /// Validates that the Chain Dimension value on a Customer is of type STANDARD.
    /// If the Dimension Value is not of type STANDARD, displays a message to the user.
    /// </summary>
    /// <param name="TableID">The ID of the table; should be 18 for Customer table.</param>
    /// <param name="DimensionCode">The dimension code; expected to be 'KÆDE' (Chain).</param>
    /// <param name="DimensionValueCode">The dimension value code to validate.</param>
    procedure testChainDimension(TableID: Integer; DimensionCode: Code[20]; DimensionValueCode: Code[20])
    var
        DimensionValue: Record "Dimension Value";
        MessageLbl: Label 'Only use Chain Dimension of type STANDARD. The selected type is %1.', Comment = '%1 = Dimension Value Type';
    begin
        if (TableID = 18) and (DimensionCode = 'KÆDE') then begin
            DimensionValue.Reset();
            DimensionValue.SetFilter("Dimension Code", 'KÆDE');
            DimensionValue.SetRange("Dimension Value Type", DimensionValue."Dimension Value Type"::Standard);
            DimensionValue.SetFilter(Code, DimensionValueCode);
            if DimensionValue.IsEmpty then begin
                DimensionValue.SetRange("Dimension Value Type");
                DimensionValue.FindFirst();
                Message(MessageLbl, DimensionValue."Dimension Value Type");
            end;
        end;
    end;
    #endregion

    #region Update RequestedDeliveryDate on Sales Order Header
    /// <summary>
    /// Updates the Requested Delivery Date on the Sales Order Header based on the company's working calendar.
    /// </summary>
    /// <param name="SalesHeader">The Sales Header record to update.</param>
    procedure UpdateRequestedOrderDate(var SalesHeader: Record "Sales Header")
    var
        CompanyInformation: Record "Company Information";
        CustomizedCalendarChange: Record "Customized Calendar Change";
        CalendarManagement: Codeunit "Calendar Management";
        DummyDate: Date;
    begin
        CompanyInformation.Get();
        CalendarManagement.SetSource(CompanyInformation, CustomizedCalendarChange);
        DummyDate := CalcDate(SalesHeader."Shipping Time", SalesHeader."Order Date");
        while CalendarManagement.IsNonworkingDay(DummyDate, CustomizedCalendarChange) do
            DummyDate += 1;
        SalesHeader."Requested Delivery Date" := DummyDate;
        if SalesHeader.Modify(true) then;
    end;
    #endregion

    #region 037 Get Salesperson from Sell-To Customer
    /// <summary>
    /// Updates the Salesperson Code on the Sales Header from the Sell-To Customer's Salesperson Code.
    /// </summary>
    /// <param name="SalesHeader">The Sales Header record to update.</param>
    procedure UpdateSalespersonFromSelltoCustomer(var SalesHeader: Record "Sales Header")
    var
        Customer: Record Customer;
    begin
        if not SalesHeader.IsTemporary then
            if Customer.Get(SalesHeader."Sell-to Customer No.") then begin
                SalesHeader."Salesperson Code" := Customer."Salesperson Code";
                if SalesHeader.Modify(true) then;
            end;
    end;
    #endregion

    #region Message if Manufacturing order Output Quantity is bigger than previous operation
    /// <summary>
    /// Checks the Output Quantity in an Item Journal Line to ensure it does not exceed the Output Quantity of the previous operation.
    /// If it does, displays a warning message to the user.
    /// </summary>
    /// <param name="ItemJournalLine">The Item Journal Line record to validate.</param>
    procedure CheckItemJournalLinePreviousOutputQuantiy(var ItemJournalLine: Record "Item Journal Line")
    var
        CapacityLedgerEntry: Record "Capacity Ledger Entry";
        CapacityLedgerEntry2: Record "Capacity Ledger Entry";
        PrevOutputLine_ItemJournalLine: Record "Item Journal Line";
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
        QtyInJnl: Decimal;
        Text001Lbl: Label '%7 \Afgangsantal %1 \+ tilbagemeldt antal %2 \på operation %3 er større end\afgangsantal %4 \+ tilbagemeldt antal %5 \på foregående operation %6.',
        Comment = '%1 = Output Quantity, %2 = Previously Reported Quantity, %3 = Operation No., %4 = Output Quantity, %5 = Reported Quantity, %6 = Previous Operation No., %7 = Item Description';
    begin
        if ItemJournalLine."Entry Type" <> ItemJournalLine."Entry Type"::Output then
            EXIT;

        // Error thrown in certain cases, updated code on 18.9.2024 JH
        if ItemJournalLine."Journal Template Name" = '' then
            EXIT; // Continue if validation fails
        if ItemJournalLine."Journal Batch Name" = '' then
            EXIT;

        // Get the production order routing line
        if ProdOrderRoutingLine.Get(ProdOrderRoutingLine.Status::Released,
                ItemJournalLine."Document No.",                   // "Prod. Order No."
                ItemJournalLine."Routing Reference No.",
                ItemJournalLine."Routing No.",
                ItemJournalLine."Operation No.") then begin

            if ProdOrderRoutingLine."Previous Operation No." = '' then
                EXIT;

            // Get posted output on previous routing line
            CapacityLedgerEntry.SetCurrentKey("Document No.", "Order Line No.", "Routing No.", "Routing Reference No.", "Operation No.", "Last Output Line");
            CapacityLedgerEntry.SetRange("Document No.", ItemJournalLine."Document No.");
            CapacityLedgerEntry.SetRange("Order Line No.", ItemJournalLine."Order Line No.");
            CapacityLedgerEntry.SetRange("Routing No.", ItemJournalLine."Routing No.");
            CapacityLedgerEntry.SetRange("Routing Reference No.", ItemJournalLine."Routing Reference No.");
            CapacityLedgerEntry.SetRange("Operation No.", ProdOrderRoutingLine."Previous Operation No.");
            CapacityLedgerEntry.CalcSums("Output Quantity");

            // Get posted output on current routing line
            CapacityLedgerEntry2.SetCurrentKey("Document No.", "Order Line No.", "Routing No.", "Routing Reference No.", "Operation No.", "Last Output Line");
            CapacityLedgerEntry2.SetRange("Document No.", ItemJournalLine."Document No.");
            CapacityLedgerEntry2.SetRange("Order Line No.", ItemJournalLine."Order Line No.");
            CapacityLedgerEntry2.SetRange("Routing No.", ItemJournalLine."Routing No.");
            CapacityLedgerEntry2.SetRange("Routing Reference No.", ItemJournalLine."Routing Reference No.");
            CapacityLedgerEntry2.SetRange("Operation No.", ProdOrderRoutingLine."Operation No.");
            CapacityLedgerEntry2.CalcSums("Output Quantity");

            // Get output registered in journal for previous routing line
            PrevOutputLine_ItemJournalLine.SetRange("Journal Template Name", ItemJournalLine."Journal Template Name");
            PrevOutputLine_ItemJournalLine.SetRange("Journal Batch Name", ItemJournalLine."Journal Batch Name");
            PrevOutputLine_ItemJournalLine.SetRange("Document No.", ItemJournalLine."Document No.");
            PrevOutputLine_ItemJournalLine.SetRange("Order Line No.", ItemJournalLine."Order Line No.");
            PrevOutputLine_ItemJournalLine.SetRange("Routing Reference No.", ItemJournalLine."Routing Reference No.");
            PrevOutputLine_ItemJournalLine.SetRange("Operation No.", ProdOrderRoutingLine."Previous Operation No.");
            PrevOutputLine_ItemJournalLine.SetRange("Entry Type", ItemJournalLine."Entry Type");
            if PrevOutputLine_ItemJournalLine.FindSet(false) then
                repeat
                    QtyInJnl += PrevOutputLine_ItemJournalLine."Output Quantity";
                until PrevOutputLine_ItemJournalLine.Next() = 0;

            if ItemJournalLine."Output Quantity" + CapacityLedgerEntry2."Output Quantity" >
              QtyInJnl + CapacityLedgerEntry."Output Quantity" then
                MESSAGE(Text001Lbl,
                            ItemJournalLine."Output Quantity",
                            CapacityLedgerEntry2."Output Quantity",
                            ProdOrderRoutingLine."Operation No.",
                            QtyInJnl,
                            CapacityLedgerEntry."Output Quantity",
                            ProdOrderRoutingLine."Previous Operation No.",
                            ItemJournalLine.Description
                            );
        end;
    end;
    #endregion

    #region Update InvoiceLine Description from ShipmentLinesGet
    /// <summary>
    /// Updates the Description of a Sales Invoice Line with information from the Sales Shipment Line.
    /// </summary>
    /// <param name="SalesLine">The Sales Line (Invoice Line) to update.</param>
    /// <param name="SalesShipmentLine">The Sales Shipment Line containing the original order information.</param>
    procedure UpdateShipmentGetTextOnInvoiceLine(var SalesLine: Record "Sales Line"; SalesShipmentLine: Record "Sales Shipment Line")
    var
        SalesHeader: Record "Sales Header";
    begin
        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
        SalesHeader.SetFilter("No.", SalesShipmentLine."Order No.");
        if SalesHeader.FindFirst() then begin
            SalesLine.Description += ' ' + SalesHeader."No." + ' ' + SalesHeader."External Document No.";
            if SalesLine.Modify(true) then;
        end;
    end;
    #endregion

    #region Update GTIN on Item Card
    /// <summary>
    /// Updates the GTIN on all Item Cards from their associated Item References.
    /// </summary>
    procedure UpdateAllItemsWithGTIN()
    var
        Items: Record Item;
        Answer: Boolean;
        WindowDialog: Dialog;
        ItemsCount: Integer;
        LoopCount: Integer;
        Pct: Integer;
        Text001Lbl: Label 'Updating GTIN on all Items \Progress pct. #1', Comment = '#1 = Progress percentage.';
        Text002Lbl: Label 'Update all Items GTIN from Item Reference?';
        Text003Lbl: Label 'Are you sure?\Update all Items GTIN from Item Reference?';
    begin
        Answer := Dialog.Confirm(Text002Lbl, true);
        if Answer then Answer := Dialog.Confirm(Text003Lbl, true);
        if not Answer then
            EXIT;
        WindowDialog.Open(Text001Lbl);
        Items.Reset();
        Items.FindFirst();
        ItemsCount := Items.Count;
        repeat
            LoopCount += 1;
            Pct := Round((100 / ItemsCount) * LoopCount, 1);
            WindowDialog.Update(1, Format(Pct));
            UpdateGTINItemCard(Items."No.");
        until Items.Next() = 0;
        WindowDialog.Close();
    end;

    /// <summary>
    /// Updates the GTIN on a single Item Card from its associated Item Reference.
    /// </summary>
    /// <param name="ItemsNo">The Item No. to update.</param>
    procedure UpdateGTINItemCard(ItemsNo: Code[20])
    var
        Items: Record Item;
        ItemReference: Record "Item Reference";
        User: Record User;
    begin
        Items.Get(ItemsNo);
        User.Get(UserSecurityId());
        if not CheckIsUserInCompany(User.CurrentCompany, '_MASTER') then
            EXIT;
        ItemReference.SetFilter("Item No.", ItemsNo);
        ItemReference.SetRange("Reference Type", ItemReference."Reference Type"::"Bar Code");
        ItemReference.SetFilter("Unit of Measure", Items."Base Unit of Measure");
        if ItemReference.FindFirst() then begin
            Items.GTIN := CopyStr(ItemReference."Reference No.", 1, 14);
            if Items.Modify(true) then;
        end;
    end;
    #endregion

    #region Check if user is in Company name
    /// <summary>
    /// Checks if the current user is operating within a specified company.
    /// </summary>
    /// <param name="CurrentCompany">The current company name.</param>
    /// <param name="CompanyName">The company name to check against.</param>
    /// <returns>True if the user is in the specified company; otherwise, an error is raised.</returns>
    procedure CheckIsUserInCompany(CurrentCompany: Text; CompanyName: Text): Boolean
    var
        Text001Lbl: Label 'Company #1#############################. You must be in the #2############################## company to perform this task!',
        Comment = '#1 = Current Company, #2 = Required Company';
    begin
        if CurrentCompany.ToUpper() <> CompanyName.ToUpper() then
            Error(Text001Lbl, CurrentCompany, CompanyName);
        exit(true);
    end;
    #endregion

    #region Barcode Generator
    /// <summary>
    /// Calculates a new unique EAN-13 code.
    /// </summary>
    /// <returns>A new unique EAN-13 code as Code[13].</returns>
    procedure CalcEANCode(): Code[13]
    var
        InventorySetup: Record "Inventory Setup";
        NewEANCodeFound: Boolean;
        LastEANCode: Code[10];
        Weight: Code[12];
        NewEANCode: Code[13];
        Text004Lbl: Label 'There are no available EAN-codes.';
    begin
        InventorySetup.LockTable();
        InventorySetup.Get();
        InventorySetup.TestField("EAN Country Code");
        InventorySetup.TestField("EAN Company No.");

        Weight := '131313131313';
        LastEANCode := InventorySetup."Last EAN Code Used";

        while not NewEANCodeFound do begin
            if LastEANCode = '' then
                LastEANCode := '00000';
            LastEANCode := IncStr(LastEANCode);
            if LastEANCode > '99999' then
                ERROR(Text004Lbl);

            NewEANCode := CopyStr(InventorySetup."EAN Country Code" + InventorySetup."EAN Company No." + LastEANCode, 1, 13);
            NewEANCode := NewEANCode + Format(StrCheckSum(NewEANCode, Weight));
            NewEANCodeFound := IsEANCodeUnique(NewEANCode);
        end;

        InventorySetup."Last EAN Code Used" := CopyStr(LastEANCode, 1, 5);
        InventorySetup.Modify();
        exit(NewEANCode);
    end;

    /// <summary>
    /// Calculates a new unique UCC-12 code.
    /// </summary>
    /// <returns>A new unique UCC-12 code as Code[12].</returns>
    procedure CalcUCCCode(): Code[12]
    var
        InventorySetup: Record "Inventory Setup";
        NewUCCCodeFound: Boolean;
        LastUCCCode: Code[10];
        Weight: Code[11];
        NewUCCCode: Code[12];
        Text010Lbl: Label 'There are no available UCC-codes.';
    begin
        InventorySetup.LockTable();
        InventorySetup.Get();
        InventorySetup.TestField("UPC Prefix");
        InventorySetup.TestField("UPC Company No.");
        Weight := '31313131313';
        LastUCCCode := InventorySetup."Last UPC Code Used";
        while not NewUCCCodeFound do begin
            if LastUCCCode = '' then
                LastUCCCode := '00000';
            LastUCCCode := IncStr(LastUCCCode);
            if LastUCCCode > '99999' then
                ERROR(Text010Lbl);
            NewUCCCode := CopyStr(InventorySetup."UPC Prefix" + InventorySetup."UPC Company No." + LastUCCCode, 1, 12);
            NewUCCCode := CopyStr(NewUCCCode + Format(StrCheckSum(NewUCCCode, Weight)), 1, 12);
            NewUCCCodeFound := IsUCCCodeUnique(NewUCCCode);
        end;
        InventorySetup."Last UPC Code Used" := CopyStr(LastUCCCode, 1, 5);
        InventorySetup.Modify();
        exit(NewUCCCode);
    end;

    /// <summary>
    /// Validates the structure of an EAN-13 code.
    /// </summary>
    /// <param name="EANCode">The EAN code to validate.</param>
    /// <returns>True if the EAN code is valid; otherwise, false.</returns>
    procedure CheckEANCode(EANCode: Code[20]): Boolean
    var
        Weight: Code[11];
        String: Code[12];
        Checksum: Integer;
        Text003Lbl: Label 'The EAN-Code must consist of 13 digits.';
    begin
        if StrLen(EANCode) <> 13 then
            ERROR(Text003Lbl);

        Weight := CopyStr('131313131313', 1, 11);
        String := CopyStr(CopyStr(EANCode, 1, StrLen(EANCode) - 1), 1, 11);

        Checksum := StrCheckSum(String, Weight);
        EXIT(String + Format(Checksum) = EANCode);
    end;

    /// <summary>
    /// Creates a barcode for an item based on the Inventory Setup configuration.
    /// </summary>
    /// <param name="Item">The Item record for which to create a barcode.</param>
    procedure CreateBarCode(Item: Record Item)
    var
        InventorySetup: Record "Inventory Setup";
        ItemReference: Record "Item Reference";
    begin
        InventorySetup.Get();
        ItemReference.Validate("Item No.", Item."No.");
        ItemReference.Validate("Reference Type", ItemReference."Reference Type"::"Bar Code");
        case InventorySetup."Use Bar Code Type" of
            InventorySetup."Use Bar Code Type"::"UCC-12":
                ItemReference.Validate("Reference No.", CalcUCCCode());
            InventorySetup."Use Bar Code Type"::"EAN-13":
                ItemReference.Validate("Reference No.", CalcEANCode());
        end;
    end;

    /// <summary>
    /// Creates a barcode for a specific unit of measure of an item.
    /// </summary>
    /// <param name="ItemNo">The Item No.</param>
    /// <param name="UOMCode">The Unit of Measure Code.</param>
    /// <param name="EAN">True to use EAN code; false to use UCC code.</param>
    procedure CreateUOMBarcode(ItemNo: Code[20]; UOMCode: Code[10]; EAN: Boolean)
    var
        ItemReference: Record "Item Reference";
    begin
        ItemReference.Validate("Item No.", ItemNo);
        ItemReference.Validate("Unit of Measure", UOMCode);
        ItemReference.Validate("Reference Type", ItemReference."Reference Type"::"Bar Code");
        if EAN then
            ItemReference.Validate("Reference No.", CalcEANCode())
        else
            ItemReference.Validate("Reference No.", CalcUCCCode());
        ItemReference.Insert();
    end;

    /// <summary>
    /// Fills a temporary table with barcode information for a specific item.
    /// </summary>
    /// <param name="RecBarCodesTmpSC">The temporary barcode record to fill.</param>
    /// <param name="ItemNo">The Item No. to process.</param>
    procedure fillBarcodeTable(var RecBarCodesTmpSC: Record BarCodesTmpSC; ItemNo: Code[20])
    var
        ItemUnitOfMeasure: Record "Item Unit of Measure";
        ItemReference: Record "Item Reference";
        User: Record User;
    begin
        User.Get(UserSecurityId());
        if not CheckIsUserInCompany(User.CurrentCompany, '_MASTER') then
            EXIT;

        RecBarCodesTmpSC.DeleteAll();
        ItemUnitOfMeasure.SetRange("Item No.", ItemNo);
        if ItemUnitOfMeasure.FindSet() then begin
            repeat
                RecBarCodesTmpSC.Init();
                RecBarCodesTmpSC."Item No" := ItemUnitOfMeasure."Item No.";
                RecBarCodesTmpSC."Unit of Measure Code" := ItemUnitOfMeasure.Code;
                RecBarCodesTmpSC."Num Barcodes" := 0;
                RecBarCodesTmpSC.Insert();
            until ItemUnitOfMeasure.Next() = 0;

            ItemReference.SetRange("Item No.", ItemNo);
            ItemReference.SetRange("Reference Type", ItemReference."Reference Type"::"Bar Code");
            if ItemReference.FindSet() then
                repeat
                    RecBarCodesTmpSC.Reset();
                    RecBarCodesTmpSC.SetRange("Item No", ItemNo);
                    RecBarCodesTmpSC.SetRange("Unit of Measure Code", ItemReference."Unit of Measure");
                    if RecBarCodesTmpSC.FindFirst() then begin
                        RecBarCodesTmpSC."Num Barcodes" += 1;
                        RecBarCodesTmpSC.Modify();
                    end;
                until ItemReference.Next() = 0;
            RecBarCodesTmpSC.Reset();
        end;
    end;

    /// <summary>
    /// Checks if an EAN code is unique across item references.
    /// </summary>
    /// <param name="EANCode">The EAN code to check.</param>
    /// <returns>True if the EAN code is unique; otherwise, false.</returns>
    procedure IsEANCodeUnique(EANCode: Code[20]): Boolean
    var
        ItemReference: Record "Item Reference";
        Text003Lbl: Label 'The EAN-Code must consist of 13 digits.';
    begin
        if StrLen(EANCode) <> 13 then
            ERROR(Text003Lbl);
        ItemReference.SetRange("Reference Type", ItemReference."Reference Type"::"Bar Code");
        ItemReference.SetRange("Reference No.", EANCode);
        exit(ItemReference.IsEmpty);
    end;

    /// <summary>
    /// Checks if a UCC code is unique and valid.
    /// </summary>
    /// <param name="UCCCode">The UCC code to check.</param>
    /// <returns>True if the UCC code is unique and valid; otherwise, false.</returns>
    procedure IsUCCCodeUnique(UCCCode: Code[20]): Boolean
    var
        Weight: Code[11];
        String: Code[12];
        Checksum: Integer;
        Text007Lbl: Label 'The UCC-Code must consist of 12 digits.';
    begin
        if StrLen(UCCCode) <> 12 then
            ERROR(Text007Lbl);
        Weight := '31313131313';
        String := CopyStr(CopyStr(UCCCode, 1, StrLen(UCCCode) - 1), 1, 12);
        Checksum := StrCheckSum(String, Weight);
        EXIT(String + Format(Checksum) = UCCCode);
    end;
    #endregion

    #region Updates Purchase and Planning Worksheet Action Messages 
    /// <summary>
    /// Toggles the 'Accept Action Message' flag on all Requisition Lines in a set.
    /// </summary>
    /// <param name="RecRequisitionLine">The Requisition Line records to update.</param>
    /// <param name="State">True to accept action messages; false to reject.</param>
    procedure ToggleActionMessage(var RecRequisitionLine: Record "Requisition Line"; State: Boolean)
    begin
        RecRequisitionLine.FindFirst();
        repeat
            RecRequisitionLine."Accept Action Message" := State;
            if RecRequisitionLine.Modify(true) then;
        until RecRequisitionLine.Next() = 0;
        RecRequisitionLine.FindFirst();
    end;
    #endregion

    #region 002 Warehouse Pick Bin Balance
    /// <summary>
    /// Fills a temporary table with pick balance data up to a specified date.
    /// </summary>
    /// <param name="RecWMSPickBinBalanceTMP">The temporary pick balance record to fill.</param>
    /// <param name="FilterDate">The date up to which to calculate balances.</param>
    procedure FillPickBalanceDataTable(var RecWMSPickBinBalanceTMP: Record WMSPickBinBalanceTMP; FilterDate: Date)
    var
        Bin: Record Bin;
        BinContent: Record "Bin Content";
        WarehouseShipmentLine: Record "Warehouse Shipment Line";
        LineNo: Integer;
    begin
        RecWMSPickBinBalanceTMP.Reset();
        RecWMSPickBinBalanceTMP.DeleteAll();
        RecWMSPickBinBalanceTMP.Init();
        WarehouseShipmentLine.SetFilter("Shipment Date", '..%1', FilterDate);
        WarehouseShipmentLine.SetFilter("Qty. to Ship", '<>0');
        if WarehouseShipmentLine.FindSet() then
            repeat
                LineNo += 1;
                RecWMSPickBinBalanceTMP.SetFilter("Item No", WarehouseShipmentLine."Item No.");
                if RecWMSPickBinBalanceTMP.FindFirst() then begin
                    RecWMSPickBinBalanceTMP."Pick Quantity" += WarehouseShipmentLine."Qty. Outstanding";
                    if RecWMSPickBinBalanceTMP.Modify() then;
                end else begin
                    RecWMSPickBinBalanceTMP."Line No." := LineNo;
                    RecWMSPickBinBalanceTMP."Item No" := WarehouseShipmentLine."Item No.";
                    RecWMSPickBinBalanceTMP."Item Description" := WarehouseShipmentLine.Description;
                    RecWMSPickBinBalanceTMP."Pick Quantity" := WarehouseShipmentLine."Qty. Outstanding";
                    if RecWMSPickBinBalanceTMP.Insert() then;
                end;
            until WarehouseShipmentLine.Next() = 0;

        RecWMSPickBinBalanceTMP.Reset();
        if RecWMSPickBinBalanceTMP.FindSet() then
            repeat
                BinContent.SetRange(Default, true);
                BinContent.SetFilter("Item No.", RecWMSPickBinBalanceTMP."Item No");

                if BinContent.FindFirst() then begin
                    if Bin.Get('AUNING', BinContent."Bin Code") then;
                    BinContent.CalcFields(Quantity);
                    RecWMSPickBinBalanceTMP."Bin Quantity" := BinContent.Quantity;
                    RecWMSPickBinBalanceTMP."Bin Code" := CopyStr(Bin.Description, 1, 20);
                    if RecWMSPickBinBalanceTMP.Modify() then;
                end;
            until RecWMSPickBinBalanceTMP.Next() = 0;

        RecWMSPickBinBalanceTMP.Reset();
        if RecWMSPickBinBalanceTMP.FindSet() then
            repeat
                RecWMSPickBinBalanceTMP."Bin Quantity Balance" := RecWMSPickBinBalanceTMP."Bin Quantity" - RecWMSPickBinBalanceTMP."Pick Quantity";
                if RecWMSPickBinBalanceTMP.Modify() then;
            until RecWMSPickBinBalanceTMP.Next() = 0;
        RecWMSPickBinBalanceTMP.Reset();
        RecWMSPickBinBalanceTMP.FindFirst();
    end;
    #endregion

    #region 005 Sales Lines Page
    /// <summary>
    /// Fills a temporary table with Sales Line data based on various filters.
    /// </summary>
    /// <param name="RecSalesLineTMP">The temporary Sales Line record to fill.</param>
    /// <param name="ShowShippedNotInvd">True to include lines that are shipped but not invoiced.</param>
    /// <param name="SalespersonFilter">Filter for Salesperson Code.</param>
    /// <param name="CountryFilter">Filter for Country/Region Code.</param>
    /// <param name="CustomerFilter">Filter for Customer No.</param>
    /// <param name="OutstandingQuantityFilter">True to include lines with outstanding quantity.</param>
    /// <param name="ToggleHeadlines">True to include headlines for new documents.</param>
    /// <param name="ItemUnitsFilter">Filter for Item Unit of Measure Codes.</param>
    procedure FillSalesLineListPage(var RecSalesLineTMP: Record SalesLineTMP;
                                    ShowShippedNotInvd: Boolean;
                                    SalespersonFilter: Text[50];
                                    CountryFilter: Text[50];
                                    CustomerFilter: Text[50];
                                    OutstandingQuantityFilter: Boolean;
                                    ToggleHeadlines: Boolean;
                                    ItemUnitsFilter: Text[50])
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        Item: Record Item;
        ItemReference: Record "Item Reference";
        ItemUnitOfMeasure: Record "Item Unit of Measure";
        LineNo: Integer;
        NewDocNo: Code[20];
    begin
        NewDocNo := '';
        RecSalesLineTMP.Reset();
        RecSalesLineTMP.DeleteAll();
        SalesHeader.SetFilter("Document Type", '%1', SalesHeader."Document Type"::Order);
        SalesLine.SetFilter("Document Type", '%1', SalesLine."Document Type"::Order);
        SalesLine.SetCurrentKey("Document Type", "Document No.", "Line No.");

        if SalespersonFilter <> '' then
            SalesHeader.SetFilter("Salesperson Code", SalespersonFilter);
        if CountryFilter <> '' then
            SalesHeader.SetFilter("Sell-to Country/Region Code", CountryFilter);
        if CustomerFilter <> '' then
            SalesHeader.SetFilter("Sell-to Customer No.", '%1', CustomerFilter);

        if OutstandingQuantityFilter then
            SalesLine.SetFilter("Outstanding Quantity", '<>%1', 0);
        if ShowShippedNotInvd then
            SalesLine.SetFilter("Qty. Shipped Not Invoiced", '<>%1', 0);

        if SalesLine.FindSet() then
            repeat
                SalesHeader.SetFilter("No.", SalesLine."Document No.");
                if SalesHeader.FindFirst() then begin
                    RecSalesLineTMP.Init();
                    ItemReference.SetFilter("Item No.", SalesLine."No.");
                    ItemReference.SetFilter("Unit of Measure", SalesLine."Unit of Measure Code");
                    ItemReference.SetFilter("Reference Type", '%1', ItemReference."Reference Type"::"Bar Code");

                    if ToggleHeadlines = true then
                        if NewDocNo <> SalesLine."Document No." then begin
                            NewDocNo := SalesLine."Document No.";
                            LineNo += 1;
                            RecSalesLineTMP."Line No." := LineNo;
                            RecSalesLineTMP."Sell-To Customer Name" := SalesHeader."Sell-to Customer Name";
                            if RecSalesLineTMP.Insert() then;
                        end;

                    LineNo += 1;
                    RecSalesLineTMP."Line No." := LineNo;
                    RecSalesLineTMP."Document Status" := SalesHeader.Status;
                    RecSalesLineTMP."Document No." := SalesLine."Document No.";
                    RecSalesLineTMP."Sell-To Customer No." := SalesHeader."Sell-to Customer No.";
                    RecSalesLineTMP."Sell-To Customer Name" := SalesLine."Sell-To Customer Name";
                    RecSalesLineTMP."Ship-To Name" := SalesHeader."Ship-to Name";
                    RecSalesLineTMP."Location Code" := SalesHeader."Location Code";
                    RecSalesLineTMP.Type := Format(SalesLine.Type);
                    RecSalesLineTMP."No." := SalesLine."No.";

                    if ItemReference.FindFirst() then
                        RecSalesLineTMP."Item Cross-Reference No." := ItemReference."Reference No.";

                    //015 Flowfield Tariff - SalesLine
                    if Item.Get(SalesLine."No.") then
                        RecSalesLineTMP."Tariff No." := Item."Tariff No.";

                    RecSalesLineTMP.Description := SalesLine.Description;
                    RecSalesLineTMP."Unit Price" := SalesLine."Unit Price";
                    RecSalesLineTMP."Quantity" := SalesLine.Quantity;
                    RecSalesLineTMP."Outstanding Quantity" := SalesLine."Outstanding Quantity";
                    RecSalesLineTMP."Qty. Shipped Not Invoiced" := SalesLine."Qty. Shipped Not Invoiced";
                    RecSalesLineTMP."Line Amount" := SalesLine."Line Amount";
                    RecSalesLineTMP."Outstanding Amount" := SalesLine."Outstanding Amount";
                    RecSalesLineTMP."Currency Code" := SalesLine."Currency Code";
                    RecSalesLineTMP."Planned Shipment Date" := SalesLine."Planned Shipment Date";

                    RecSalesLineTMP."Sell-To Customer Name" := SalesHeader."Sell-to Customer Name";
                    RecSalesLineTMP."External Document No." := SalesHeader."External Document No.";
                    RecSalesLineTMP."Salesperson Code" := SalesHeader."Salesperson Code";
                    RecSalesLineTMP."Country Code" := SalesHeader."Sell-to Country/Region Code";

                    // Add ItemUnitFilter (e.g., Pallets)
                    if ItemUnitsFilter <> '' then begin
                        RecSalesLineTMP.ItemUnitCode := 'N/A';

                        if SalesLine.Type = SalesLine.Type::Item then begin
                            ItemUnitOfMeasure.Reset();
                            ItemUnitOfMeasure.SetFilter("Item No.", SalesLine."No.");
                            ItemUnitOfMeasure.SetFilter(Code, ItemUnitsFilter);
                            if ItemUnitOfMeasure.FindFirst() then begin
                                RecSalesLineTMP.ItemUnitCode := ItemUnitOfMeasure.Code;
                                RecSalesLineTMP.ItemUnitQuantity := ItemUnitOfMeasure."Qty. per Unit of Measure";
                            end;
                        end;
                    end;

                    if RecSalesLineTMP.Insert() then;
                end;
            until SalesLine.Next() = 0;
        if RecSalesLineTMP.FindFirst() then;
    end;
    #endregion

    #region 017 Inventory Journal StockStatus Add Code
    /// <summary>
    /// Fills the Inventory Journal Status table based on Item Journal Lines.
    /// </summary>
    /// <param name="RecInventoryJournalStatus">The Inventory Journal Status record to fill.</param>
    /// <param name="JournalBatchName">The name of the journal batch.</param>
    procedure InventoryJournalFillITable(var RecInventoryJournalStatus: Record InventoryJournalStatus; JournalBatchName: Text[50])
    var
        InventoryMapShelfSC: Record InventoryMapShelfSC;
        Item: Record Item;
        ItemJournalLine: Record "Item Journal Line";
        LineNo: Integer;
        Text000Lbl: Label 'Not found';
        ShelfNo: Text[30];
    begin
        if not RecInventoryJournalStatus.IsEmpty() then
            RecInventoryJournalStatus.DeleteAll();
        ItemJournalLine.SetFilter("Journal Batch Name", JournalBatchName);
        ItemJournalLine.FindSet();
        repeat
            ShelfNo := '';
            if Item.Get(ItemJournalLine."Item No.") then
                ShelfNo := Item."Shelf No.";
            InventoryMapShelfSC.SetFilter("Shelf No.", ShelfNo);
            if (InventoryMapShelfSC.FindSet()) and (ShelfNo <> '') then
                repeat
                    RecInventoryJournalStatus.Init();
                    LineNo += 1;
                    RecInventoryJournalStatus."Line No." := LineNo;
                    RecInventoryJournalStatus."Ressource ID" := InventoryMapShelfSC."Ressource Name";
                    RecInventoryJournalStatus."Item No." := ItemJournalLine."Item No.";
                    RecInventoryJournalStatus."Item Description" := ItemJournalLine.Description;
                    RecInventoryJournalStatus."Shelf No." := Item."Shelf No.";
                    RecInventoryJournalStatus."Inventory Journal ID" := CopyStr(JournalBatchName, 1, 30);
                    RecInventoryJournalStatus."Reported Quatity" := 0;
                    RecInventoryJournalStatus."Base Quantity" := ItemJournalLine."Qty. (Calculated)";
                    RecInventoryJournalStatus."Difference Quatity" := -ItemJournalLine."Qty. (Calculated)";
                    if RecInventoryJournalStatus.Insert() then;
                until InventoryMapShelfSC.Next() = 0
            else begin
                // Shelf No. or Resource ID was not found.
                RecInventoryJournalStatus.Init();
                LineNo += 1;
                RecInventoryJournalStatus."Line No." := LineNo;
                RecInventoryJournalStatus."Ressource ID" := Text000Lbl;
                RecInventoryJournalStatus."Item No." := ItemJournalLine."Item No.";
                RecInventoryJournalStatus."Item Description" := ItemJournalLine.Description;
                RecInventoryJournalStatus."Shelf No." := '';
                RecInventoryJournalStatus."Inventory Journal ID" := CopyStr(JournalBatchName, 1, 30);
                RecInventoryJournalStatus."Reported Quatity" := 0;
                RecInventoryJournalStatus."Base Quantity" := ItemJournalLine."Qty. (Calculated)";
                RecInventoryJournalStatus."Difference Quatity" := -ItemJournalLine."Qty. (Calculated)";
                if RecInventoryJournalStatus.Insert() then;
            end;
        until ItemJournalLine.Next() = 0;
        if RecInventoryJournalStatus.FindFirst() then;
    end;

    /// <summary>
    /// Writes back reported quantities from the Inventory Journal Status to the Item Journal Lines.
    /// </summary>
    /// <param name="InventoryJournalStatus">The Inventory Journal Status records containing reported quantities.</param>
    /// <param name="JournalName">The name of the journal batch to update.</param>
    procedure InventoryJournalWriteBack(InventoryJournalStatus: Record InventoryJournalStatus; JournalName: Code[20])
    var
        ItemJournalLine: Record "Item Journal Line";
        StatusQty: Decimal;
        TransferedLines: Integer;
        Text000Lbl: Label 'Writeback to Item Journal is complete.\#1 lines transferred', Comment = '#1 = Number of lines transferred.';
    begin
        ItemJournalLine.Reset();
        ItemJournalLine.SetFilter("Journal Template Name", 'LAGEROPGØR');
        ItemJournalLine.SetFilter("Bin Code", 'PRODUKTION');
        ItemJournalLine.SetFilter("Journal Batch Name", JournalName);
        ItemJournalLine.FindSet();
        InventoryJournalStatus.Reset();
        repeat
            InventoryJournalStatus.SetFilter("Item No.", ItemJournalLine."Item No.");
            InventoryJournalStatus.SetFilter("Reported Quatity", '<>%1', 0);
            if InventoryJournalStatus.FindSet() then begin
                StatusQty := 0;
                repeat
                    StatusQty += InventoryJournalStatus."Reported Quatity";
                    TransferedLines += 1;
                until InventoryJournalStatus.Next() = 0;
                ItemJournalLine.Validate("Qty. (Phys. Inventory)", StatusQty);
                ItemJournalLine.Modify();
            end;
        until ItemJournalLine.Next() = 0;
        Message(Text000Lbl, Format(TransferedLines));
    end;
    #endregion

    #region 032 Warning Imerco DropShip
    /// <summary>
    /// Provides warnings for Imerco DropShip orders to ensure correct customer and order types.
    /// </summary>
    /// <param name="RecSalesHeader">The Sales Header record to check.</param>
    procedure WarningCheckImercoDropShip(var RecSalesHeader: Record "Sales Header")
    var
        Text001Lbl: Label 'This order should be changed to Customer 1916 Websupply ordertype';
        Text002Lbl: Label 'Note this is an Imerco Drop-IN ordertype.\Change customer to 2112.';
    begin
        if (RecSalesHeader."Sell-to Customer No." = '2112') and not (CopyStr(RecSalesHeader."External Document No.", 1, 1) = 'D') then
            Message(Text001Lbl);
        if (RecSalesHeader."Sell-to Customer No." = '1916') and (CopyStr(RecSalesHeader."External Document No.", 1, 1) = 'D') then
            Message(Text002Lbl);
    end;
    #endregion

    #region 034 Campaign Sales Statistics
    /// <summary>
    /// Retrieves Sales Orders related to campaigns and fills the Campaign Statistics table.
    /// </summary>
    /// <param name="RecCampaignStatistics">The Campaign Statistics record to fill.</param>
    /// <param name="DateRangeTxt">The date range filter as text.</param>
    /// <param name="LineNo">The line number counter (passed by reference).</param>
    procedure CampaignSalesGetSalesOrders(var RecCampaignStatistics: Record CampaignStatistics; DateRangeTxt: Text; var LineNo: Integer)
    var
        Campaign: Record Campaign;
        Currency: Record Currency;
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        CampaignFound: Boolean;
        CampaignCodeNotFoundLbl: Label 'Campaign Code not found';
        CurrencyDescription: Text[100];
        ChainDimName: Text[100];
        ChainGroupDimName: Text[100];
    begin
        SalesLine.SetRange("Document Type", SalesLine."Document Type"::Order);
        SalesLine.SetFilter("Planned Delivery Date", DateRangeTxt);
        SalesLine.SetFilter("Used Campaign NOTO", '<>%1', '');
        RecCampaignStatistics.Init();
        if SalesLine.FindSet() then
            repeat
                CampaignFound := false;
                SalesHeader.Get(SalesLine."Document Type", SalesLine."Document No.");
                CurrencyDescription := 'Danske kroner';
                if Currency.Get(SalesHeader."Currency Code") then
                    CurrencyDescription := Currency.Description;
                if Campaign.Get(SalesLine."Used Campaign NOTO") then
                    CampaignFound := true;

                LineNo += 1;
                RecCampaignStatistics."Line No." := LineNo;
                RecCampaignStatistics."Date" := SalesLine."Planned Delivery Date";

                CampaignSalesGetChain(SalesLine."Bill-to Customer No.", ChainDimName, ChainGroupDimName);
                RecCampaignStatistics.Chain := ChainDimName;
                RecCampaignStatistics."Chain Group" := ChainGroupDimName;

                RecCampaignStatistics."Customer No." := SalesLine."Sell-to Customer No.";
                RecCampaignStatistics."Customer Name" := SalesHeader."Sell-to Customer Name";
                RecCampaignStatistics."SalesPerson Code" := SalesHeader."Salesperson Code";
                RecCampaignStatistics."Country Code" := SalesHeader."Sell-to Country/Region Code";

                RecCampaignStatistics."Campaign Code" := SalesLine."Used Campaign NOTO";
                RecCampaignStatistics."Campaign Name" := CampaignCodeNotFoundLbl;
                if CampaignFound then begin
                    RecCampaignStatistics."Campaign Name" := Campaign.Description;
                    RecCampaignStatistics."Campaign Type" := Campaign."Campaign Type NOTO";
                    RecCampaignStatistics."Campaign Purpose" := Campaign."Campaign Purpose NOTO";
                end;

                RecCampaignStatistics."Document Type" := RecCampaignStatistics."Document Type"::"Sales Order";
                RecCampaignStatistics."Document No." := SalesLine."Document No.";
                RecCampaignStatistics."Currency Code" := SalesHeader."Currency Code";
                if RecCampaignStatistics."Currency Code" = '' then
                    RecCampaignStatistics."Currency Code" := 'DKR';
                RecCampaignStatistics."Currency Description" := CurrencyDescription;

                RecCampaignStatistics."Item No." := SalesLine."No.";
                RecCampaignStatistics."Item Description" := SalesLine.Description;

                RecCampaignStatistics.Quantity := SalesLine."Quantity (Base)";
                RecCampaignStatistics.Amount := SalesLine.Amount;
                if SalesHeader."Currency Factor" = 0 then
                    SalesHeader."Currency Factor" := 1;
                RecCampaignStatistics."Amount(RV)" := SalesLine.Amount / (SalesHeader."Currency Factor" + 0.0001);

                if RecCampaignStatistics.Insert() then;
            until SalesLine.Next() = 0;
    end;

    /// <summary>
    /// Retrieves Posted Sales Invoices related to campaigns and fills the Campaign Statistics table.
    /// </summary>
    /// <param name="RecCampaignStatistics">The Campaign Statistics record to fill.</param>
    /// <param name="DateRangeTxt">The date range filter as text.</param>
    /// <param name="LineNo">The line number counter (passed by reference).</param>
    procedure CampaignSalesGetPostedSalesInvoice(var RecCampaignStatistics: Record CampaignStatistics; DateRangeTxt: Text; var LineNo: Integer)
    var
        Campaign: Record Campaign;
        Currency: Record Currency;
        SalesInvoiceHeader: Record "Sales Invoice Header";
        SalesInvoiceLine: Record "Sales Invoice Line";
        CampaignFound: Boolean;
        CampaignCodeNotFoundLbl: Label 'Campaign Code not found';
        CurrencyDescription: Text[100];
        ChainDimName: Text[100];
        ChainGroupDimName: Text[100];
    begin
        SalesInvoiceLine.SetFilter("Posting Date", DateRangeTxt);
        SalesInvoiceLine.SetFilter("Used Campaign NOTO", '<>%1', '');
        RecCampaignStatistics.Init();
        if SalesInvoiceLine.FindSet() then
            repeat
                CampaignFound := false;
                SalesInvoiceHeader.Get(SalesInvoiceLine."Document No.");
                CurrencyDescription := 'Danske kroner';
                if Currency.Get(SalesInvoiceHeader."Currency Code") then
                    CurrencyDescription := Currency.Description;
                if Campaign.Get(SalesInvoiceLine."Used Campaign NOTO") then
                    CampaignFound := true;
                LineNo += 1;
                RecCampaignStatistics."Line No." := LineNo;
                RecCampaignStatistics."Date" := SalesInvoiceLine."Posting Date";

                CampaignSalesGetChain(SalesInvoiceLine."Sell-to Customer No.", ChainDimName, ChainGroupDimName);
                RecCampaignStatistics.Chain := ChainDimName;
                RecCampaignStatistics."Chain Group" := ChainGroupDimName;

                RecCampaignStatistics."Customer No." := SalesInvoiceLine."Sell-to Customer No.";
                RecCampaignStatistics."Customer Name" := SalesInvoiceHeader."Sell-to Customer Name";
                RecCampaignStatistics."SalesPerson Code" := SalesInvoiceHeader."Salesperson Code";
                RecCampaignStatistics."Country Code" := SalesInvoiceHeader."Sell-to Country/Region Code";

                RecCampaignStatistics."Campaign Code" := SalesInvoiceLine."Used Campaign NOTO";
                RecCampaignStatistics."Campaign Name" := CampaignCodeNotFoundLbl;
                if CampaignFound then begin
                    RecCampaignStatistics."Campaign Name" := Campaign.Description;
                    RecCampaignStatistics."Campaign Type" := Campaign."Campaign Type NOTO";
                    RecCampaignStatistics."Campaign Purpose" := Campaign."Campaign Purpose NOTO";
                end;

                RecCampaignStatistics."Document Type" := RecCampaignStatistics."Document Type"::Invoice;
                RecCampaignStatistics."Document No." := SalesInvoiceLine."Document No.";
                RecCampaignStatistics."Currency Code" := SalesInvoiceHeader."Currency Code";
                if RecCampaignStatistics."Currency Code" = '' then
                    RecCampaignStatistics."Currency Code" := 'DKR';
                RecCampaignStatistics."Currency Description" := CurrencyDescription;

                RecCampaignStatistics."Item No." := SalesInvoiceLine."No.";
                RecCampaignStatistics."Item Description" := SalesInvoiceLine.Description;

                RecCampaignStatistics.Quantity := SalesInvoiceLine."Quantity (Base)";
                RecCampaignStatistics.Amount := SalesInvoiceLine.Amount;
                if SalesInvoiceHeader."Currency Factor" = 0 then
                    SalesInvoiceHeader."Currency Factor" := 1;
                RecCampaignStatistics."Amount(RV)" := SalesInvoiceLine.Amount / SalesInvoiceHeader."Currency Factor";

                if RecCampaignStatistics.Insert() then;
            until SalesInvoiceLine.Next() = 0;
    end;

    /// <summary>
    /// Retrieves Sales Forecasts related to campaigns and fills the Campaign Statistics table.
    /// </summary>
    /// <param name="RecCampaignStatistics">The Campaign Statistics record to fill.</param>
    /// <param name="DateRangeTxt">The date range filter as text.</param>
    /// <param name="LineNo">The line number counter (passed by reference).</param>
    procedure CampaignSalesGetSalesForecasts(var RecCampaignStatistics: Record CampaignStatistics; DateRangeTxt: Text; LineNo: Integer)
    var
        Campaign: Record Campaign;
        Item: Record Item;
        ProductionForecastEntry: Record "Production Forecast Entry";
        CampaignFound: Boolean;
        CampaignCodeNotFoundLbl: Label 'Campaign Code not found';
    begin
        ProductionForecastEntry.SetFilter("Forecast Date", DateRangeTxt);
        ProductionForecastEntry.SetFilter("Campaign No. NOTO", '<>%1', '');
        RecCampaignStatistics.Init();
        if ProductionForecastEntry.FindSet() then
            repeat
                CampaignFound := false;
                Item.Get(ProductionForecastEntry."Item No.");
                if Campaign.Get(ProductionForecastEntry."Campaign No. NOTO") then
                    CampaignFound := true;
                LineNo += 1;
                RecCampaignStatistics."Line No." := LineNo;
                RecCampaignStatistics."Date" := ProductionForecastEntry."Forecast Date";
                RecCampaignStatistics."Customer No." := 'Forecast';
                RecCampaignStatistics."Customer Name" := ProductionForecastEntry."Production Forecast Name";

                RecCampaignStatistics."Campaign Code" := ProductionForecastEntry."Campaign No. NOTO";
                RecCampaignStatistics."Campaign Name" := CampaignCodeNotFoundLbl;
                if CampaignFound then begin
                    RecCampaignStatistics."Campaign Name" := Campaign.Description;
                    RecCampaignStatistics."Campaign Type" := Campaign."Campaign Type NOTO";
                    RecCampaignStatistics."Campaign Purpose" := Campaign."Campaign Purpose NOTO";
                end;
                RecCampaignStatistics."Document Type" := RecCampaignStatistics."Document Type"::Forecast;
                RecCampaignStatistics."Document No." := Format(ProductionForecastEntry."Entry No.");
                RecCampaignStatistics."Currency Code" := '';
                RecCampaignStatistics."Currency Description" := '';

                RecCampaignStatistics."Item No." := ProductionForecastEntry."Item No.";
                RecCampaignStatistics."Item Description" := Item.Description;

                RecCampaignStatistics.Quantity := ProductionForecastEntry."Forecast Quantity (Base)";
                RecCampaignStatistics.Amount := 0;
                RecCampaignStatistics."Amount(RV)" := 0;

                if RecCampaignStatistics.Insert() then;
            until ProductionForecastEntry.Next() = 0;
    end;

    /// <summary>
    /// Retrieves the Chain and Chain Group dimension names for a given customer.
    /// </summary>
    /// <param name="CustomerNo">The Customer No. to process.</param>
    /// <param name="ChainDimName">The Chain dimension name (output parameter).</param>
    /// <param name="ChainGroupDimName">The Chain Group dimension name (output parameter).</param>
    local procedure CampaignSalesGetChain(CustomerNo: Code[20]; var ChainDimName: Text[100]; var ChainGroupDimName: Text[100])
    var
        Customer: Record Customer;
        DimensionValue: Record "Dimension Value";
    begin
        ChainDimName := '';
        ChainGroupDimName := '';

        if Customer.Get(CustomerNo) then begin
            Customer.CalcFields(Chain);
            if DimensionValue.Get('KÆDE', Customer.Chain) then
                ChainDimName := DimensionValue.Name;
            if DimensionValue.Get('KÆDE', Customer.ChainGroup) then
                ChainGroupDimName := DimensionValue.Name;
        end
    end;
    #endregion

    #region 042 Sales price based on Purchase Price Markup
    /// <summary>
    /// Calculates the landed purchase price of an item based on vendor prices and indirect cost percentage.
    /// </summary>
    /// <param name="Item">The Item record to calculate for.</param>
    /// <returns>The calculated vendor price as Decimal.</returns>
    procedure ItemCalculatePurchaseLandedPrice(var Item: Record Item): Decimal
    var
        InventorySetup: Record "Inventory Setup";
        PriceListLine: Record "Price List Line";
        CalculatedVendorPrice: Decimal;
    begin
        InventorySetup.Get();
        PriceListLine.SetRange("Source Type", PriceListLine."Source Type"::Vendor);
        PriceListLine.SetFilter("Source No.", Item."Vendor No.");
        PriceListLine.SetRange("Asset Type", PriceListLine."Asset Type"::Item);
        PriceListLine.SetFilter("Asset No.", Item."No.");
        PriceListLine.SetFilter("Ending Date", '');
        PriceListLine.SetRange(Status, PriceListLine.Status::Active);
        CalculatedVendorPrice := 0;
        if PriceListLine.FindSet() then
            repeat
                if PriceListLine."Direct Unit Cost" > CalculatedVendorPrice then
                    CalculatedVendorPrice := PriceListLine."Direct Unit Cost";
            until PriceListLine.Next() = 0;

        if (CalculatedVendorPrice <> 0) and (Item."Indirect Cost %" <> 0) then
            CalculatedVendorPrice := CalculatedVendorPrice * (Item."Indirect Cost %" / 100 + 1);

        exit(CalculatedVendorPrice);
    end;
    #endregion

    #region 040 Warning sales line quantity Availability
    /// <summary>
    /// Provides a warning if the sales line quantity exceeds available inventory.
    /// </summary>
    /// <param name="SalesLine">The Sales Line record to check.</param>
    procedure AvailableQuantityWarning(var SalesLine: Record "Sales Line")
    var
        Item: Record Item;
        SalesLine2: Record "Sales Line";
        SalesInfoPaneManagement: Codeunit "Sales Info-Pane Management";
        CalculatedAvailableDate: Date;
        AvailableFuture: Decimal;
        AvailableNow: Decimal;
        CalculatedAvailable: Decimal;
        WarningLbl: Label 'Warning - out of stock\ Item %1\ Quantity %2\\Available Now %3\Available Future %4\Calculated Available %5, on date %6',
                Comment = '%1 = Item No., %2 = Quantity, %3 = Available Now, %4 = Available Future, %5 = Calculated Available, %6 = Calculated Available on date.';
    begin
        if CompanyName = 'SCANPAN Norge' then
            EXIT;
        if (CompanyName = 'SCANPAN Danmark') and (SalesLine."Sell-to Customer No." = '1010') then
            EXIT;
        if not SalesLine2.Get(SalesLine."Document Type", SalesLine."Document No.", SalesLine."Line No.") then
            EXIT;
        if GuiAllowed then begin
            if SalesLine2."Planned Shipment Date" <> 0D then
                SalesLine2."Planned Shipment Date" := CalcDate('<+5Y>', SalesLine2."Shipment Date");
            if SalesLine2."Shipment Date" <> 0D then
                SalesLine2."Shipment Date" := CalcDate('<+5Y>', SalesLine2."Shipment Date");
            if SalesLine2."Planned Delivery Date" <> 0D then
                SalesLine2."Planned Delivery Date" := CalcDate('<+5Y>', SalesLine2."Planned Delivery Date");

            AvailableNow := SalesInfoPaneManagement.CalcAvailability(SalesLine);
            AvailableFuture := SalesInfoPaneManagement.CalcAvailability(SalesLine2);

            CalculatedAvailable := 0;
            CalculatedAvailableDate := 0D;
            if (Item.Get(SalesLine."No.")) and (SalesLine.Type = SalesLine.Type::Item) then begin
                CalculatedAvailable := Item."Calculated Available NOTO";
                CalculatedAvailableDate := Item."Calculated Available Date NOTO";
            end;

            if (AvailableNow < 0)
                or (AvailableFuture < 0)
                or (CalculatedAvailable < 0) then
                Message(WarningLbl,
                        SalesLine."No." + ' - ' + SalesLine.Description,
                        SalesLine.Quantity,
                        AvailableNow,
                        AvailableFuture,
                        CalculatedAvailable,
                        CalculatedAvailableDate);
        end;
    end;
    #endregion

    #region 056 Production Controlling
    /// <summary>
    /// Fills a temporary table with production routing lines for controlling purposes.
    /// </summary>
    /// <param name="ProdContllingRoutingLinesTMP">The temporary production controlling routing lines record to fill.</param>
    procedure ControllingFillProductionRouteLine(var ProdContllingRoutingLinesTMP: Record ProdContllingRoutingLinesTMP)
    var
        ProdOrderLine: Record "Prod. Order Line";
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
        EnumGetCoatingDescription: enum EnumGetCoatingDescription;
        LineNo: Integer;
    begin
        ProdOrderRoutingLine.SetFilter(Status, '%1|%2', ProdOrderRoutingLine.Status::"Firm Planned", ProdOrderRoutingLine.Status::Released);
        ProdOrderRoutingLine.SetCurrentKey(Status, "Prod. Order No.", "Routing Reference No.", "Routing No.", "Operation No.");

        ProdOrderRoutingLine.FindSet();
        repeat
            ProdOrderLine.Get(ProdOrderRoutingLine.Status,
                                    ProdOrderRoutingLine."Prod. Order No.",
                                    ProdOrderRoutingLine."Routing Reference No.");
            ProdContllingRoutingLinesTMP.Init();
            LineNo += 1;
            ProdContllingRoutingLinesTMP."Line No." := LineNo;
            ProdContllingRoutingLinesTMP.RoutingType := Format(ProdOrderRoutingLine."Type");
            ProdContllingRoutingLinesTMP.Status := ProdOrderRoutingLine.Status;
            ProdContllingRoutingLinesTMP."Production Order No." := ProdOrderRoutingLine."Prod. Order No.";
            ProdContllingRoutingLinesTMP."Ressource No." := ProdOrderRoutingLine."No.";
            ProdContllingRoutingLinesTMP."Routing Description" := ProdOrderRoutingLine.Description;
            ProdContllingRoutingLinesTMP."Operation No." := ProdOrderRoutingLine."Operation No.";
            ProdContllingRoutingLinesTMP.Priority := ProdOrderRoutingLine.Priority;
            ProdContllingRoutingLinesTMP.Comment := ProdOrderRoutingLine.Comment;

            ProdContllingRoutingLinesTMP.ItemNo := ProdOrderLine."Item No.";
            ProdContllingRoutingLinesTMP."Item Description" := ProdOrderLine.Description;

            ProdContllingRoutingLinesTMP.Coating := GetCoatingDescription(ProdOrderLine, EnumGetCoatingDescription::"Coating Description Map");
            ProdContllingRoutingLinesTMP."Coating Item" := GetCoatingDescription(ProdOrderLine, EnumGetCoatingDescription::"Item No. Map");

            ProdContllingRoutingLinesTMP."First BOM Body" := GetIFirstProductionBody(ProdOrderLine."Item No.");

            ProdContllingRoutingLinesTMP."Work Center Group Code" := ProdOrderRoutingLine."Work Center Group Code";

            ProdContllingRoutingLinesTMP.Quantity := ProdOrderLine."Quantity (Base)";
            ProdContllingRoutingLinesTMP."Finished Quantity" := ControllingProdControllingOperationOutputQty(ProdContllingRoutingLinesTMP."Production Order No.", ProdContllingRoutingLinesTMP."Ressource No.");
            ProdContllingRoutingLinesTMP."Remaining Quantity" := ProdContllingRoutingLinesTMP.Quantity - ProdContllingRoutingLinesTMP."Finished Quantity";
            ProdContllingRoutingLinesTMP."Finished Percentage" := (ProdContllingRoutingLinesTMP."Finished Quantity" / ProdContllingRoutingLinesTMP.Quantity) * 100;

            ProdContllingRoutingLinesTMP."Item Set Multiplier" := ProdOrderLine."Set Quantity";

            ProdContllingRoutingLinesTMP."Quantity Set" := ProdContllingRoutingLinesTMP.Quantity * ProdOrderLine."Set Quantity";
            ProdContllingRoutingLinesTMP."Remaining Set Quantity" := ProdContllingRoutingLinesTMP."Remaining Quantity" * ProdContllingRoutingLinesTMP."Item Set Multiplier";
            ProdContllingRoutingLinesTMP."Finished Set Quantity" := ProdContllingRoutingLinesTMP."Finished Quantity" * ProdContllingRoutingLinesTMP."Item Set Multiplier";

            ProdContllingRoutingLinesTMP."Starting Date" := ProdOrderLine."Starting Date";
            ProdContllingRoutingLinesTMP."Ending Date" := ProdOrderLine."Ending Date";

            if ProdContllingRoutingLinesTMP.Insert() then;
        until ProdOrderRoutingLine.Next() = 0;
    end;

    /// <summary>
    /// Calculates the total output quantity for a specific operation in a production order.
    /// </summary>
    /// <param name="ProductionOrderNo">The Production Order No.</param>
    /// <param name="OperationNo">The Operation No.</param>
    /// <returns>The total output quantity as Decimal.</returns>
    procedure ControllingProdControllingOperationOutputQty(ProductionOrderNo: Code[20]; OperationNo: Code[20]): Decimal
    var
        CapacityLedgerEntry: Record "Capacity Ledger Entry";
        OutputQuantity: Decimal;
    begin
        CapacityLedgerEntry.SetFilter("Order Type", '%1', CapacityLedgerEntry."Order Type"::Production);
        CapacityLedgerEntry.SetFilter("Order No.", ProductionOrderNo);
        CapacityLedgerEntry.SetFilter("No.", OperationNo);
        if CapacityLedgerEntry.FindSet() then
            repeat
                OutputQuantity += CapacityLedgerEntry."Output Quantity";
            until CapacityLedgerEntry.Next() = 0;
        exit(OutputQuantity);
    end;

    /// <summary>
    /// Retrieves the coating description or item number for a production order line.
    /// </summary>
    /// <param name="ProdOrderLine">The Production Order Line record.</param>
    /// <param name="EnumGetCoatingDescription">An enum indicating which value to retrieve.</param>
    /// <returns>The coating description or item number as Text[50].</returns>
    procedure GetCoatingDescription(ProdOrderLine: Record "Prod. Order Line"; EnumGetCoatingDescription: enum EnumGetCoatingDescription): Text[50]
    var
        ProdOrderComponent: Record "Prod. Order Component";
        ProdControllingItemMap: Record ProdControllingItemMap;
    begin
        ProdOrderComponent.Reset();
        ProdOrderComponent.SetFilter(Status, '%1', ProdOrderLine.Status);
        ProdOrderComponent.SetFilter("Prod. Order No.", '%1', ProdOrderLine."Prod. Order No.");
        ProdOrderComponent.SetFilter("Prod. Order Line No.", '%1', ProdOrderLine."Line No.");

        ProdControllingItemMap.Reset();
        ProdControllingItemMap.FindSet();
        repeat
            ProdOrderComponent.SetFilter("Item No.", ProdControllingItemMap."Item No.");
            if not ProdOrderComponent.IsEmpty then
                case EnumGetCoatingDescription of
                    EnumGetCoatingDescription::"Coating Description Map":
                        exit(ProdControllingItemMap.Coating);
                    EnumGetCoatingDescription::"Item No. Map":
                        exit(ProdControllingItemMap."Item No.");
                end;
        until ProdControllingItemMap.Next() = 0;
    end;
    #endregion

    #region 060 Find Item Set Multiplier for Sales to Production calculations
    /// <summary>
    /// Calculates the Item Set Multiplier for an item, used in sales to production calculations.
    /// </summary>
    /// <param name="ItemNo">The Item No. to process.</param>
    /// <returns>The Item Set Multiplier as Integer.</returns>
    procedure GetItemSetMultiplier(ItemNo: Code[20]): Integer
    var
        Item: Record Item;
        ProductionBOMLine: Record "Production BOM Line";
        Multiplier: Integer;
    begin
        Multiplier := 0;
        if Item.Get(ItemNo) then begin
            ProductionBOMLine.SetRange(Type, ProductionBOMLine.Type::Item);
            ProductionBOMLine.SetFilter("Production BOM No.", Item."Production BOM No.");
            if ProductionBOMLine.FindSet() then
                repeat
                    Item.Reset();
                    Item.SetRange("Replenishment System", Item."Replenishment System"::"Prod. Order");
                    Item.SetFilter("Gen. Prod. Posting Group", 'MELLEM');
                    Item.SetFilter("No.", ProductionBOMLine."No.");
                    Multiplier += Item.Count;
                until ProductionBOMLine.Next() = 0;
        end;
        if Multiplier = 0 then
            Multiplier := 1;
        exit(Multiplier);
    end;

    /// <summary>
    /// Retrieves the first production body item in the BOM of a specified item.
    /// </summary>
    /// <param name="ItemNo">The Item No. to process.</param>
    /// <returns>The Item No. of the first production body item as Code[20].</returns>
    procedure GetIFirstProductionBody(ItemNo: Code[20]): Code[20]
    var
        Item: Record Item;
        ProductionBOMLine: Record "Production BOM Line";
    begin
        if Item.Get(ItemNo) then begin
            ProductionBOMLine.SetRange(Type, ProductionBOMLine.Type::Item);
            ProductionBOMLine.SetFilter("Production BOM No.", Item."Production BOM No.");
            if ProductionBOMLine.FindSet() then
                repeat
                    Item.Reset();
                    Item.SetFilter("Gen. Prod. Posting Group", '%1|%2|%3', 'RV-KROPPE', 'MELLEM', 'MELLEM RÅ');
                    Item.SetFilter("No.", ProductionBOMLine."No.");
                    if Item.FindFirst() then
                        exit(Item."No.");
                until ProductionBOMLine.Next() = 0;
        end;
        exit('');
    end;
    #endregion

    #region Send an Email from AL
    /// <summary>
    /// Sends an email using AL code.
    /// </summary>
    /// <param name="EmailAddressText">The recipient's email address.</param>
    /// <param name="SubjectText">The subject of the email.</param>
    /// <param name="BodyText">The body content of the email.</param>
    procedure SendEmail(EmailAddressText: Text; SubjectText: Text; BodyText: Text)
    var
        EmailMessage: Codeunit "Email Message";
        Email: Codeunit Email;
    begin
        EmailMessage.Create(EmailAddressText,
                          SubjectText,
                          BodyText);

        Email.Send(EmailMessage);
    end;
    #endregion

    #region 080 Self-insured limit check with warning on sales order.
    /// <summary>
    /// Checks the customer's credit limit, including self-insured and insured limits, and displays warnings based on the SCANPAN Setup configuration.
    /// </summary>
    /// <param name="CustomerRec">Customer record to check credit limits for.</param>
    /// <param name="SalesHeader">Sales Header record associated with the customer.</param>
    procedure CheckCustomerCreditLimit(CustomerRec: Record Customer; SalesHeader: Record "Sales Header")
    var
        ScanpanSetup: Record "SCANPAN Setup"; // Added reference to SCANPAN Setup to access new warning settings
        Balance: Decimal;                  // Customer's current balance in LCY
        SelfInsuredLimit: Decimal;         // Customer's self-insured credit limit in LCY
        InsuredCreditLimit: Decimal;       // Customer's standard credit limit in LCY - Atradius Credit Insurance
        TotalSalesOrdersAmount: Decimal;   // Total sum of all sales orders for the customer
        WarningSelfInsuredLbl: Label 'Warning the Customer is over Self-Insured Credit Limit (LCY) \%1 \Self-Insurance (LCY): %2\Balance (LCY): %3\Total Sales Orders (LCY): %4', Comment = '%1 = CustomerName, %2 = Self-Insurance in LCY, %3 = Balance in LCY, %4 = Total Sales Orders Amount in LCY';
        WarningCreditLimitLbl: Label 'Warning the Customer is over Insured Credit Limit (LCY) \%1 \Insured Credit Limit (LCY): %2\Balance (LCY): %3\Total Sales Orders (LCY): %4', Comment = '%1 = CustomerName, %2 = Credit Limit in LCY, %3 = Balance in LCY, %4 = Total Sales Orders Amount in LCY';
    begin
        // Retrieve SCANPAN Setup values
        if not ScanpanSetup.Get() then
            Error('SCANPAN Setup record not found.');

        // Calculate necessary values
        CustomerRec.CalcFields("Balance (LCY)");
        Balance := CustomerRec."Balance (LCY)";
        InsuredCreditLimit := CustomerRec."Credit Limit (LCY)";
        SelfInsuredLimit := CustomerRec."Self-Insured (LCY)";
        TotalSalesOrdersAmount := GetTotalSalesOrdersAmount(CustomerRec."No.");

        if GuiAllowed then begin
            // Check self-insured limit if warning is enabled in SCANPAN Setup
            if ScanpanSetup."Show SelfInsured Warning" then
                if SelfInsuredLimit > 0 then
                    if SelfInsuredLimit > InsuredCreditLimit then // Only proceed if SelfInsuredLimit is greater than CreditLimit
                        if Balance > SelfInsuredLimit then
                            Message(
                                WarningSelfInsuredLbl,
                                CustomerRec."No." + ' ' + CustomerRec.Name,
                                SelfInsuredLimit,
                                Balance,
                                TotalSalesOrdersAmount
                            );


            // Check standard credit limit if warning is enabled in SCANPAN Setup
            if ScanpanSetup."Show CreditMax Warning" then
                if InsuredCreditLimit > 0 then
                    if InsuredCreditLimit > SelfInsuredLimit then  // Only proceed if CreditLimit is greater than SelfInsuredLimit
                        if Balance > InsuredCreditLimit then
                            Message(
                                WarningCreditLimitLbl,
                                CustomerRec."No." + ' ' + CustomerRec.Name,
                                InsuredCreditLimit,
                                Balance,
                                TotalSalesOrdersAmount
                            );
        end;
    end;

    // Calculates the total sum of all sales orders for the given customer number
    procedure GetTotalSalesOrdersAmount(CustomerNo: Code[20]) TotalAmount: Decimal
    var
        SalesHeader: Record "Sales Header";
    begin
        TotalAmount := 0;
        SalesHeader.Reset();
        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
        SalesHeader.SetRange("Sell-to Customer No.", CustomerNo);

        if SalesHeader.FindSet() then
            repeat
                SalesHeader.CalcFields("Amount Including VAT");
                TotalAmount += SalesHeader."Amount Including VAT";
            until SalesHeader.Next() = 0;

        exit(TotalAmount);
    end;
    #endregion


    #region 083 Delete BackOrders Norway

    ///<summary>
    /// Version 1.0 - 2024.10.07 - Jesper Harder
    /// Handles deletion of sales orders and linked purchase orders for Norway, including the deletion of backorders.
    /// This procedure validates the deletion override condition, handles linked drop shipments, and deletes associated records.
    /// Original Version.
    ///</summary>
    procedure HandleSalesOrderDeletion(SalesHeader: Record "Sales Header")
    var
        SalesLine: Record "Sales Line";
        PurchaseHeader: Record "Purchase Header";
        PurchaseLine: Record "Purchase Line";
        SalesShipmentHeader: Record "Sales Shipment Header";
        CurrDatabase: Record Database; // Not used effectively in the production code.
        ErrorCompanyNotScanpanNorge: Label 'This action can only be run for the company SCANPAN NORGE.';
        ConfirmDeleteOrder: Label 'Are you sure you want to delete the sales order along with any remaining backorders and linked purchase orders?';
        MessageCurrentCompany: Label 'Current Company: %1';
        ErrorDeliveredNotInvoiced: Label 'Sales order cannot be deleted as there are items delivered but not invoiced.';
        MessageOrderDeleted: Label 'Sales order %1 and all remaining backorders have been successfully deleted, and linked purchase orders have been handled.';
        ErrorNoShipmentPosted: Label 'Sales order cannot be deleted as no shipments have been posted yet.';
        ErrorOverrideNotSet: Label 'Sales order cannot be deleted because "Del. SOs With Rem. Qty. NOTO" is not set.';
        PurchaseLinesRemaining: Boolean;
    begin
        // ONLY IN TEST
        // This section restricts execution to the test environment.
        CurrDatabase.SetRange("My Database", true);
        if CurrDatabase.FindFirst() then
            if CurrDatabase.FindFirst() then
                if CurrDatabase."Database Name" <> 'BC_TEST' then
                    Message('Must run in BC_TEST, Current is %1', CompanyName);
        // Consider refactoring for more efficient testing checks and usage in production. You are setting range and finding twice redundantly.

        // Check if the company is "SCANPAN NORGE" before proceeding.
        if CompanyName.ToUpper() <> 'SCANPAN NORGE' then
            Error(ErrorCompanyNotScanpanNorge);
        // Ensure that this validation is needed to prevent accidental deletions outside Norway.

        // Confirm with the user before proceeding
        if not Confirm(ConfirmDeleteOrder) then
            exit;
        // Always a good practice to confirm deletion.

        // Check if the deletion override condition is set
        if SalesHeader."Del. SO's With Rem. Qty. NOTO" then begin
            // Validate if the sales order has at least one posted shipment
            SalesShipmentHeader.Reset();
            SalesShipmentHeader.SetRange("Order No.", SalesHeader."No.");
            if not SalesShipmentHeader.IsEmpty then begin
                // Check if there are any delivered but not invoiced items
                SalesLine.SetRange("Document Type", SalesHeader."Document Type");
                SalesLine.SetRange("Document No.", SalesHeader."No.");
                SalesLine.SetFilter("Qty. Shipped Not Invoiced", '>0');
                if not SalesLine.IsEmpty then
                    Error(ErrorDeliveredNotInvoiced);
                // This ensures that you do not delete orders with pending invoices.

                // Iterate through each sales line to find linked purchase orders
                SalesLine.Reset();
                SalesLine.SetRange("Document Type", SalesHeader."Document Type");
                SalesLine.SetRange("Document No.", SalesHeader."No.");
                if SalesLine.FindSet() then
                    repeat
                        if SalesLine."Drop Shipment" then
                            // Find the linked purchase order
                            if SalesLine."Purchase Order No." <> '' then
                                if PurchaseHeader.Get(PurchaseHeader."Document Type"::Order, SalesLine."Purchase Order No.") then begin
                                    PurchaseLinesRemaining := false;

                                    PurchaseLine.Reset();
                                    PurchaseLine.SetRange("Document Type", PurchaseHeader."Document Type");
                                    PurchaseLine.SetRange("Document No.", PurchaseHeader."No.");
                                    PurchaseLine.SetFilter("Qty. Rcd. Not Invoiced", '>0');
                                    if not PurchaseLine.IsEmpty then
                                        PurchaseLinesRemaining := true;

                                    // If the purchase order has PurchaseLinesRemaining := false then delete the order
                                    if PurchaseLinesRemaining = false then
                                        Message('PurchaseHeader.Delete(true)');
                                    // Should implement the actual delete logic here. Message function is currently a placeholder.
                                end;
                    until SalesLine.Next() = 0;

                // Delete the sales order along with any remaining quantities (backorders) if all purchase lines are deleted
                if not PurchaseLinesRemaining then begin
                    Message('SalesHeader.Delete(true)');
                    // Should implement the actual delete logic here. Message function is currently a placeholder.
                    Message(MessageOrderDeleted, SalesHeader."No.");
                end else
                    Error('Sales order cannot be deleted as not all purchase order lines have been deleted.');
            end else
                Error(ErrorNoShipmentPosted);
        end else
            Error(ErrorOverrideNotSet);
    end;
    #endregion

    #region 084         Shipmondo Add Mobile Number To Sales Header
    // 084 Shipmondo Add Mobile Number To Sales Header
    // 089 XtensionIT Shipmondo Add Pick-up Point
    procedure ShipmondoGetWaybillDetails(var TempCustomer: Record Customer temporary; var WaybillHeader: Record "XTECSC Waybill Header")
    var

        WarehouseShipmentLine: Record "Warehouse Shipment Line";
        SalesShipmentLine: Record "Sales Shipment Line";
        SalesHeader: Record "Sales Header";
        TypeImplemented: Boolean;
    begin

        TypeImplemented := false;

        // Source is Warehouse Shipment
        if WaybillHeader."Source Type" = WaybillHeader."Source Type"::"Warehouse Shipment" then begin
            WarehouseShipmentLine.Get(WaybillHeader."Source No.", 10000);
            SalesHeader.Get(SalesHeader."Document Type"::Order, WarehouseShipmentLine."Source No.");
            TypeImplemented := true;
        end;

        // Source is Posted Sales Shipment
        if WaybillHeader."Source Type" = WaybillHeader."Source Type"::"Posted Sales Shipment" then begin
            SalesShipmentLine.Get(WaybillHeader."Source No.", 10000);
            SalesHeader.Get(SalesHeader."Document Type"::Order, SalesShipmentLine."Order No.");
            TypeImplemented := true;
        end;

        // Source is Sales Order
        if WaybillHeader."Source Type" = WaybillHeader."Source Type"::"Sales Order" then begin
            SalesHeader.Get(SalesHeader."Document Type"::Order, WaybillHeader."Source No.");
            TypeImplemented := true;
        end;

        // Assign values
        if TypeImplemented then begin
            TempCustomer."Mobile Phone No." := SalesHeader."Sell-to Phone No.";
            TempCustomer."E-Mail" := SalesHeader."Sell-to E-Mail";

            // 89 PickupPoint
            WaybillHeader."Pick-up Point" := GetRestOfShipToAddress2AfterPakkeshop(SalesHeader);

            // 84 Normalize Phonenumber when Norway
            if SalesHeader."Sell-to Customer No." = '1010' then
                NormalizePhoneNumberNorway(TempCustomer, SalesHeader);

        end;

        if not TypeImplemented then
            message('Scanpan FIX 084 Not implemented - ExtensionIT Shipmondo.\Sales Header %1, %2', WaybillHeader."Source Type", WaybillHeader."Source No.");


    end;

    // 89 Shipmondo helper code for Pick-up Point
    local procedure GetRestOfShipToAddress2AfterPakkeshop(var SalesHeader: Record "Sales Header"): Text[80]
    var
        ShipToAddress2: Text[80];
        SearchText: Text[20];
        Position: Integer;
        RestOfString: Text[80];
    begin
        ShipToAddress2 := SalesHeader."Ship-to Address 2";
        SearchText := 'Pakkeshop:';
        // Find the position of 'Pakkeshop:'
        Position := StrPos(ShipToAddress2, SearchText);
        // If the text is found
        if Position > 0 then
            // Get the rest of the string after 'Pakkeshop:'
            RestOfString := CopyStr(ShipToAddress2, Position + StrLen(SearchText), MaxStrLen(ShipToAddress2))
        else
            // Return an empty string if 'Pakkeshop:' is not found
            RestOfString := '';

        exit(RestOfString);
    end;


    // 84 Shipmondo helper code for fixing phonenumbers
    procedure NormalizePhoneNumberNorway(var TempCustomer: Record Customer; SalesHeader: Record "Sales Header")
    var
        PhoneNumber: Text;
    begin
        // Remove spaces from the phone number
        PhoneNumber := DELCHR(SalesHeader."Sell-to Phone No.", '=', ' ');

        // Check if the phone number is empty after removing spaces
        if PhoneNumber = '' then begin
            TempCustomer."Mobile Phone No." := '+4790000000';
            exit;
        end;

        // Add the +47 prefix if it's missing
        if STRPOS(PhoneNumber, '+47') <> 1 then
            PhoneNumber := '+47' + PhoneNumber;


        // Check if the phone number matches the +479 or +474 prefix
        if (COPYSTR(PhoneNumber, 1, 4) = '+479') and (STRLEN(PhoneNumber) = 11) then
            // Number starts with +479 and is of correct length (11 characters)
            exit // No changes needed, number is valid
        else
            if (COPYSTR(PhoneNumber, 1, 4) = '+474') and (STRLEN(PhoneNumber) = 11) then
                // Number starts with +474 and is of correct length (11 characters)
                exit // No changes needed, number is valid
            else
                // If the phone number doesn't match the format, set to +4790 followed by '0000000'
                TempCustomer."Mobile Phone No." := '+4790000000';
    end;

    #endregion

} 
/// <summary>
/// Codeunit "SCANPAN_Subscriber_CU" (ID 50001).
/// </summary>
/// <remarks>
///
/// Version list
/// 2023.01             Jesper Harder       0193        CUBAGE Modification from NAV carried over to BC (Fixed in NOTORA code)
/// 2023.02             Jesper Harder       0193        SalesHeader, Requested Delivery Data calculated from Shipping Time formula
/// 2023.02             Jesper Harder       0193        Implement check for output quantity not greater then previous
/// 2023.02             Jesper Harder       0193        TRUECOMMERCE EDI
/// 2023.02             Jesper Harder       0193        Event CU GetShipmentLinjes to SalesInvoice - External document no.
/// 2023.03             Jesper Harder       0193        Event for Bank Account postings with Sales - Payment ID added
/// 2023.03             Jesper Harder       0193        Event for Calculate BOM Tree
/// 2023.03.29          Jesper Harder       018         Report "Notification Email"; //1320;
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// 2023.07.17          Jesper Harder       037         SalesOrder - Salesperson from Sell-To Customer
/// 2023.07.25          Jesper Harder       040         Warning salesline quantity Availability
/// 2023.06.12          Jesper Harder       034         Campaign statistics
/// 2023.08             Jesper Harder       045         Mandatory Fields setup
/// 2023.09             Jesper Harder       047         Restrict changes to user setup and General ledger posting dates
/// 2023.09             Jesper Harder       049         Restrict changes to Warehouse Source Filter (5771)
/// 2023.09             Jesper Harder       051         Set DropShip in Norway Company
/// 2023.09             Jesper Harder       052         Get external reference ID from Norway SalesOrder
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts, ItemMap Coating
/// 2023.11             Jesper Harder       059         PO Number City, break lookup for Web Customers
/// 2023.12             Jesper Harder       061         Customer Name must not exceed 35 chars in TrueCommerce transactions.
/// 2024.01             Jesper Harder       063         Warn if Gross weight, Net weight is same weight. LTS Customs system
/// 2024.04             Jesper Harder       064         Calculate Inventory Accept DateFilter
/// 2024.05             Jesper Harder       066         Test for Correct Chain Dimension value on Customer
/// 2024.07             Jesper Harder       071         Customers Blocked Status changed, message No. of Sales Orders
/// 2024.08             Jesper Harder       078         Transfer value from PurchaseLine to PurchaseInvoiceLine
/// 2024.09             Jesper Harder       080         Self-insured limit check with warning on sales order.
/// 
///                 Shift + Alt + E
///
/// </remarks>

codeunit 50001 "SubscriberCU"
{
    EventSubscriberInstance = StaticAutomatic;
    Permissions =
        tabledata Campaign = R,
        tabledata "Capacity Ledger Entry" = R,
        tabledata "Company Information" = R,
        tabledata Customer = R,
        tabledata "General Ledger Setup" = R,

        tabledata Item = R,
        tabledata "Item Journal Line" = R,
        tabledata MandatoryFieldSetup2 = R,
        tabledata "Notification Entry" = R,
        tabledata "Posted Whse. Shipment Header" = RM,
        tabledata "Posted Whse. Shipment Line" = RM,
        tabledata "Prod. Order Routing Line" = R,
        tabledata "Purchase Header" = R,
        tabledata "Purchase Line" = R,
        tabledata "Sales Header" = RM,
        tabledata "Sales Line" = R,
        tabledata "User Setup" = R,
        tabledata Vendor = R,
        tabledata "Warehouse Employee" = R,
        tabledata "Warehouse Shipment Header" = RM,
        tabledata "Warehouse Source Filter" = R;

    /*
        #region 078         Transfer value from PurchaseLine to PurchaseInvoiceLine
        [EventSubscriber(ObjectType::Codeunit, Codeunit::"Purch.-Post", 'OnBeforePurchInvLineInsert', '', true, true)]
        local procedure OnBeforePurchInvLineInsert(var PurchInvLine: Record "Purch. Inv. Line"; PurchaseLine: Record "Purchase Line")
        begin
            PurchInvLine."Custom Field" := PurchLine."Custom Field";
        end;
        #endregion
    */

    #region #066 Test for Correct Chain Dimension value on Customer
    // Event subscribers for table 352 "Default Dimension"

    [EventSubscriber(ObjectType::Table, Database::"Default Dimension", 'OnAfterInsertEvent', '', true, true)]
    local procedure OnAfterInsertDefaultDimension(Rec: Record "Default Dimension")
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        // Logic for handling new records
        ScanpanMiscellaneous.testChainDimension(Rec."Table ID", Rec."Dimension Code", Rec."Dimension Value Code");
    end;

    [EventSubscriber(ObjectType::Table, Database::"Default Dimension", 'OnAfterModifyEvent', '', true, true)]
    local procedure OnAfterModifyDefaultDimension(Rec: Record "Default Dimension")
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        // Logic for handling modified records
        ScanpanMiscellaneous.testChainDimension(Rec."Table ID", Rec."Dimension Code", Rec."Dimension Value Code");
    end;

    #endregion

    #region 064 - Calculate Inventory accept DateFilter
    [EventSubscriber(ObjectType::Report, Report::"CalculateInventory", 'OnItemLedgerEntryOnAfterPreDataItem', '', true, true)]
    local procedure CalculateInventoryOnItemLedgerEntryOnAfterPreDataItem(var ItemLedgerEntry: Record "Item Ledger Entry"; var Item: Record Item)
    var
    begin
        //Copied from old NAV soloution
        if Item.GetRangeMax("Date Filter") <> 0D then
            ItemLedgerEntry.SetRange("Posting Date", 0D, Item.GetRangeMax("Date Filter"));
        // << BS01.00
    end;


    #endregion

    #region 063 Warn if Gross weight, Net weight is same weight. LTS Customs system
    /*
    [EventSubscriber(ObjectType::Table, database::Item, 'OnAfterModifyEvent', '', true, true)]
    local procedure OnAfterModifyEventItem(var Rec: Record Item)
    var
        WarningLbl: Label 'Warning Gross Weight and Net Weight must not be the same in the Customs System LTS.';

    begin
        if GuiAllowed then
            if not Rec.IsTemporary then
                case Rec."Prod. Group Code" of
                    '1':
                        ;
                    '6':
                        ;
                    '2':
                        ;
                    '3':
                        ;
                    else
                        if (Rec."Gross Weight" = 0) or (Rec."Net Weight" = 0) then
                            Message(WarningLbl);
                end;
    end;
    */
    #endregion

    #region 061 - Customer Name must not exceed 35 chars in TrueCommerce transactions.
    [EventSubscriber(ObjectType::Table, database::Customer, 'OnAfterValidateEvent', 'Name', true, true)]
    local procedure OnafterValidateEventCustomer(var Rec: Record Customer)
    var
        WarningLbl: Label 'Warning - In TrueCommerce EDI Customer Name must not exceed 35 chars.';
    begin
        if not Rec.IsTemporary then
            if GuiAllowed then
                if StrLen(Rec.Name) > 35 then
                    Message(WarningLbl);
    end;
    #endregion

    #region 2023.11 059 - PO Number City, break lookup for Web Customers
    /*
        [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnBeforeModifyEvent', '', true, true)]
        local procedure OnBeforeModifyEventPostnumerCity(var Rec: Record "Sales Header"; var xRec: Record "Sales Header")
        var
            Customer: Record Customer;

        begin
            if not Rec.IsTemporary then begin
                Customer.Get(Rec."Sell-to Customer No.");
                if Customer.SkipPostNumCityCheckOnActivate = true then begin
                    if xRec."Sell-to City" <> Rec."Sell-to City" then Rec."Sell-to City" := xRec."Sell-to City";
                    if xRec."Sell-to Post Code" <> Rec."Sell-to Post Code" then Rec."Sell-to Post Code" := xRec."Sell-to Post Code";
                end;
            end;
        end;
    */
    #endregion

    #region 57 - Production Order UpdateSetQuantiy, ItemMap Coating
    [EventSubscriber(ObjectType::Table, database::"Prod. Order Line", 'OnAfterInsertEvent', '', false, false)]
    local procedure OnAfterInsertEventProdOrderLine(var Rec: Record "Prod. Order Line")
    begin
        SetSetQuantityProdOrdLine(Rec);
    end;

    [EventSubscriber(ObjectType::Table, database::"Prod. Order Line", 'OnAfterModifyEvent', '', false, false)]
    local procedure OnAfterModifyEventProdOrderLine(var Rec: Record "Prod. Order Line")
    begin
        SetSetQuantityProdOrdLine(Rec);
    end;

    //57
    local procedure SetSetQuantityProdOrdLine(var ProdOrderLine: Record "Prod. Order Line")
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        ProdOrderLine."Set Quantity" := ScanpanMiscellaneous.GetItemSetMultiplier(ProdOrderLine."Item No.");
        ProdOrderLine."Remaining Set Quantity" := ProdOrderLine."Set Quantity" * ProdOrderLine."Remaining Qty. (Base)";
        ProdOrderLine."Finished Set Quantity" := ProdOrderLine."Set Quantity" * ProdOrderLine."Finished Qty. (Base)";
        ProdOrderLine."Quantity SetQuantity" := ProdOrderLine."Set Quantity" * ProdOrderLine.Quantity;
    end;
    #endregion

    #region Event CU GetShipmentLinjes to SalesInvoice - External document no.
    //OnBeforeCodeInsertInvLineFromShptLine
    //Sales Shipment Line
    [EventSubscriber(ObjectType::Table, database::"Sales Shipment Line", 'OnAfterDescriptionSalesLineInsert', '', true, true)]
    local procedure GetShipmentText(var SalesLine: Record "Sales Line"; SalesShipmentLine: Record "Sales Shipment Line")
    var
        //SalesOrderHeader: Record "Sales Header";
        //SalesShipmentHeader: Record "Sales Shipment Header";
        ScanpanMisc: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMisc.UpdateShipmentGetTextOnInvoiceLine(SalesLine, SalesShipmentLine);
    end;
    #endregion

    #region Event ItemjounalLineOnAfterValidateOutputQuantityBase
    //Item Jounal Line
    //Validate output quantity not greater then previous operation, current + posted
    //Output Quantity Item Jounal Linje
    //Original code from NAV installation 15.2.2023
    [EventSubscriber(ObjectType::Table, database::"Item Journal Line", 'OnAfterValidateEvent', 'Output Quantity', true, true)]
    local procedure ItemjounalLineOnAfterValidateOutputQuantityBase(var Rec: Record "Item Journal Line"; var xRec: Record "Item Journal Line"; CurrFieldNo: Integer)
    var
        ScanpanMisc: Codeunit ScanpanMiscellaneous;
    begin
        SCANPANmisc.CheckItemJournalLinePreviousOutputQuantiy(Rec);
    end;
    #endregion

    #region Event for updating RequestedOrderDate OnAfterSelltoCustomerNoOnAfterValidate
    //Sales Header
    //[EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterValidateEvent', 'Order Date', true, true)]
    //037 SalesOrder - Salesperson from Sell-To Customer
    [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterSelltoCustomerNoOnAfterValidate', '', true, true)]
    local procedure SalesHeaderOnAfterSelltoCustomerNoOnAfterValidate(var SalesHeader: Record "Sales Header")
    var
        ScanpanMisc: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMisc.UpdateRequestedOrderDate(SalesHeader);
        //037
        ScanpanMisc.UpdateSalespersonFromSelltoCustomer(SalesHeader);
    end;
    #endregion

    #region Event for updating RequestedOrderDate OnAfterValidateEvent Order Date
    //Sales Header x 2 events
    //Set Requested Delivery data to next shipment day, next working day
    //037 SalesOrder - Salesperson from Sell-To Customer
    [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterValidateEvent', 'Order Date', true, true)]
    local procedure SalesHeaderOnAfterValidateOrderDate(var Rec: Record "Sales Header"; var xRec: Record "Sales Header"; CurrFieldNo: Integer)
    var
        ScanpanMisc: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMisc.UpdateRequestedOrderDate(Rec);
        //037
        ScanpanMisc.UpdateSalespersonFromSelltoCustomer(Rec);
    end;
    #endregion

    #region Event for field updates for TrueCommerce EDI
    //
    //TRUECOMMERCE EDI
    //Email adr
    //
    [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterValidateEvent', 'TRCUDF6', true, true)]
    local procedure SalesHeaderOnAfterValidateTRCUDF6(var Rec: Record "Sales Header"; var xRec: Record "Sales Header"; CurrFieldNo: Integer)
    var
    begin
        Rec."Sell-to E-Mail" := Rec.TRCUDF6;
        if Rec.Modify(true) then;
    end;
    //
    //TRUECOMMERCE EDI
    //PHONE NO
    //
    [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterValidateEvent', 'TRCUDF7', true, true)]
    local procedure SalesHeaderOnAfterValidateTRCUDF7(var Rec: Record "Sales Header"; var xRec: Record "Sales Header"; CurrFieldNo: Integer)
    var
    begin
        Rec."Sell-to Phone No." := CopyStr(Rec.TRCUDF7, 1, 30);
        if Rec.Modify(true) then;
    end;
    #endregion

    #region 018 Report "Notification Email"; //1320;
    //Updates the DocumentURL in Workflow mails to be the live tier
    [EventSubscriber(ObjectType::Report, Report::"Notification Email", 'OnSetReportFieldPlaceholdersOnAfterGetDocumentURL', '', true, true)]
    local procedure OnSetReportFieldPlaceholdersOnAfterGetDocumentURL(var DocumentURL: Text; var NotificationEntry: Record "Notification Entry")
    var
        Len: Integer;
        Text000Lbl: Label '&page=654#EventSubscriber Scanpan Link';
    begin
        DocumentURL := DocumentURL.Replace('_UP', '');
        Len := StrPos(DocumentURL, '&page=');
        NotificationEntry."Custom Link" := DelStr(DocumentURL, Len) + Text000Lbl;
    end;
    #endregion

    #region 037 New SalesOrder - Salesperson from Sell-To Customer
    //2024.04 Changed to OnBeforeSetDefaultSalesperson, from OnAfterInsert
    [EventSubscriber(ObjectType::Table, Database::"Sales Header", 'OnBeforeSetDefaultSalesperson', '', true, true)]
    local procedure OnBeforeSetDefaultSalespersonSalesHeader(var SalesHeader: Record "Sales Header");
    var
        ScanpanMisc: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMisc.UpdateSalespersonFromSelltoCustomer(SalesHeader);
    end;

    #endregion

    /*
    //SHIPITREMOVE
    #region 035 Post TransportOrderID posted to Posted Whse. ShipmentLines through 14.7.2023 Added Code
    //[EventSubscriber(ObjectType::Codeunit, Codeunit::"IDYS Publisher", 'OnAfterCreateTransportOrder', '', false, false)]
    //[EventSubscriber(ObjectType::Table, Database::"IDYS Transport Order Header", 'OnAfterInsertEvent', '', true, true)]
    //    [EventSubscriber(ObjectType::Codeunit, Codeunit::"IDYS Publisher", 'OnAfterCreateTransportOrder', '', true, true)]
    [EventSubscriber(ObjectType::Table, Database::"Posted Whse. Shipment Header", 'OnAfterInsertEvent', '', false, false)]
    local procedure OnAfterInsertEventPostedWhseShipmentHeader(var Rec: Record "Posted Whse. Shipment Header")
    var
        IDYSTransportOrderHeader: Record "IDYS Transport Order Header";
    begin
        IDYSTransportOrderHeader.SetFilter(Description, 'Lagerleverancehoved ' + Rec."Whse. Shipment No.");
        if IDYSTransportOrderHeader.FindLast() then begin
            Rec."Transport Order No." := IDYSTransportOrderHeader."No.";
            Rec.Modify();
        end;
    end;
    //SHIPITREMOVE

    [EventSubscriber(ObjectType::Table, Database::"Posted Whse. Shipment Line", 'OnAfterInsertEvent', '', false, false)]
    local procedure OnAfterInsertEventPostedWhseShipmentLine(var Rec: Record "Posted Whse. Shipment Line")
    var
        PostedWhseShipmentHeader: Record "Posted Whse. Shipment Header";
    begin
        PostedWhseShipmentHeader.Get(Rec."No.");
        Rec."Transport Order No." := PostedWhseShipmentHeader."Transport Order No.";
        Rec.Modify();
    end;

    #endregion
    */


    #region 034 Campaign statistics
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Campaign Target Group Mgt", 'OnBeforeActivateCampaign', '', false, false)]
    local procedure OnBeforeActivateCampaign(var Campaign: Record Campaign; var IsHandled: Boolean);
    var
        CampaignNotification: Notification;
        NotificationLbl: Label 'Please select Campaign Purpose.';
    begin
        if Campaign."Campaign Purpose NOTO" = '' then begin
            CampaignNotification.Message(NotificationLbl);
            CampaignNotification.Send();
        end;
        Campaign.TestField("Campaign Purpose NOTO")
    end;
    #endregion

    #region 040 Warning salesline quantity Availability
    [EventSubscriber(ObjectType::Table, Database::"Sales Line", 'OnBeforeValidateEvent', 'Quantity', true, true)]
    local procedure SalesLineOnBeforeValidateEvent(var Rec: Record "Sales Line")
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMiscellaneous.AvailableQuantityWarning(Rec);
    end;
    #endregion


    #region 045 Mandatory Fields setup

    [EventSubscriber(ObjectType::Table, Database::Customer, 'OnBeforeValidateEvent', 'Blocked', true, true)]
    local procedure OnBeforeValidateEventCustomerBlocked(var Rec: Record Customer)
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;

        //071
        SalesHeader: Record "Sales Header";
        SalesOrderReleasedCountLbl: Label 'Please note there are %1 Sales Orders Released.', Comment = '%1, Count of released sales orders.';
        SalesOrderOpenCountLbl: Label 'Please note there are %1 Open Sales Orders.', Comment = '%1, Count of open sales orders.';
    begin
        if GuiAllowed then begin
            if Rec.Blocked = Rec.Blocked::" " then begin
                //045 Mandatory Fields setup
                MandatoryFieldSetup2.CheckCust(Rec);

                ///071 Customers Blocked, message of salesorders
                SalesHeader.Reset();
                SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
                SalesHeader.SetFilter("Sell-to Customer No.", Rec."No.");
                SalesHeader.SetFilter(Status, '<>%1', SalesHeader.Status::Released);
                if SalesHeader.Count > 0 then Message(SalesOrderOpenCountLbl, SalesHeader.Count);

            end;
            ///071 Customers Blocked, message of salesorders
            if Rec.Blocked <> Rec.Blocked::" " then begin
                SalesHeader.Reset();
                SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
                SalesHeader.SetFilter("Sell-to Customer No.", Rec."No.");
                SalesHeader.SetRange(Status, SalesHeader.Status::Released);
                if SalesHeader.Count > 0 then Message(SalesOrderReleasedCountLbl, SalesHeader.Count);
            end;
        end;
    end;


    //Mandatory fields check
    [EventSubscriber(ObjectType::Table, Database::"Item", 'OnBeforeValidateEvent', 'Blocked', true, true)]
    local procedure OnBeforeValidateEventItemBlocked(var Rec: Record Item)
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;
    begin
        if not Rec.Blocked then
            MandatoryFieldSetup2.CheckItem(Rec);
    end;

    [EventSubscriber(ObjectType::Table, Database::Vendor, 'OnBeforeValidateEvent', 'Blocked', true, true)]
    local procedure OnBeforeValidateEventVendorBlocked(var Rec: Record Vendor)
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;
    begin
        if Rec.Blocked = Rec.Blocked::" " then
            MandatoryFieldSetup2.CheckVend(Rec);
    end;

    #endregion

    #region 047 Restrict changes to user setup and General ledger posting dates

    [EventSubscriber(ObjectType::Table, Database::"General Ledger Setup", 'OnBeforeModifyEvent', '', true, true)]
    local procedure OnBeforeModifyEventGeneralLedgerSetup(var Rec: Record "General Ledger Setup"; var xRec: Record "General Ledger Setup")
    var
        UserSetup: Record "User Setup";
        ErrorLbl: Label 'You do not have permissions to change posting setup dates.\Consult your Administrator.';
    begin
        UserSetup.SetFilter("User ID", UserId());
        if (xRec."Allow Posting From" <> Rec."Allow Posting From") or (xRec."Allow Posting To" <> Rec."Allow Posting To") then
            if UserSetup.FindFirst() then
                if UserSetup."Allow Edit Posting Dates" = false then Error(ErrorLbl);
    end;

    [EventSubscriber(ObjectType::Table, Database::"User Setup", 'OnBeforeModifyEvent', '', true, true)]
    local procedure OnBeforeModifyEventUserSetup(var Rec: Record "User Setup"; var xRec: Record "User Setup")
    var
        UserSetup: Record "User Setup";
        ErrorLbl: Label 'You do not have permissions to change posting setup dates.\Consult your Administrator.';
    begin
        UserSetup.SetFilter("User ID", UserId());
        if (xRec."Allow Posting From" <> Rec."Allow Posting From") or (xRec."Allow Posting To" <> Rec."Allow Posting To") then
            if UserSetup.FindFirst() then
                if UserSetup."Allow Edit Posting Dates" = false then Error(ErrorLbl);
    end;
    #endregion

    #region 049 Restrict changes to Warehouse Source Filter (5771)
    [EventSubscriber(ObjectType::Table, Database::"Warehouse Source Filter", 'OnBeforeModifyEvent', '', true, true)]
    local procedure OnBeforeModifyEventWarehouseSourceFilter(var Rec: Record "Warehouse Source Filter"; var xRec: Record "Warehouse Source Filter")
    var
        WarehouseEmployee: Record "Warehouse Employee";
        ErrorLbl: Label 'You do not have permissions to change Warehouse Filters.\Consult your Administrator.';
    begin
        WarehouseEmployee.SetFilter("User ID", UserId());
        if WarehouseEmployee.FindFirst() then
            if (WarehouseEmployee."Permit Change Warehouse Filter" = false) and (xRec."Allow Edit" = false) then Error(ErrorLbl);
    end;
    #endregion

    #region 051 Set DropShip in Norway Company
    /*
    local procedure SalesHeaderNorwayIIC(var SalesHeader: Record "Sales Header")
    var
    begin
        if CompanyName = 'SCANPAN Norge' then
            if not SalesHeader.IsTemporary then
                if SalesHeader."Document Type" = SalesHeader."Document Type"::Order then
                    SalesHeader."ITI IIC Drop Ship. Vendor No." := '5008';
    end

    //
    //[EventSubscriber(ObjectType::Table, Database::"Sales Header", 'OnAfterInsertEvent', '', true, true)]
    //local procedure OnAfterInsertEventSalesHeader(var Rec: Record "Sales Header");
    //begin
    //    if CompanyName = 'SCANPAN Norge' then
    //        if not Rec.IsTemporary then
    //            if Rec."Document Type" = SalesHeader."Document Type"::Order then
    //            Rec."ITI IIC Drop Ship. Vendor No." := '5008';
    //end;

    [EventSubscriber(ObjectType::Table, Database::"Sales Line", 'OnAfterInsertEvent', '', true, true)]
    local procedure OnAfterInsertEventSalesLine(var Rec: Record "Sales Line");
    begin
        if CompanyName = 'SCANPAN Norge' then
            if not Rec.IsTemporary then
                if Rec."Document Type" = Rec."Document Type"::Order then
                    if Rec.Type = Rec.Type::Item then
                        Rec.Validate("Purchasing Code", 'DROPSHIP');
    end;
    */
    #endregion

    #region 052 Get external reference ID from Norway SalesOrder
    /*
    //[EventSubscriber(ObjectType::Table, Database::"Sales Line", 'OnAfterInsertEvent', '', true, true)]
    [EventSubscriber(ObjectType::Table, database::"Sales Header", 'OnAfterValidateEvent', 'External Document No.', true, true)]
    local procedure OnafterValidateEventExternalDocNoSalesHeader(var Rec: Record "Sales Header")
    var
        LookupPurchaseHeader: Record "Purchase Header";
        LookupPurchaseLine: Record "Purchase Line";
        LookupSalesHeader: Record "Sales Header";
        PurchaseReference: code[50];
        LookupCompanyName: Text;
    begin
        if (CompanyName = 'SCANPAN Danmark') and (Rec."Sell-to Customer No." = '1010') then
            if not Rec.IsTemporary then begin
                LookupCompanyName := 'SCANPAN Norge';
                PurchaseReference := Rec."ITI IIC Document ID";
                LookupPurchaseHeader.ChangeCompany(LookupCompanyName);
                LookupPurchaseLine.ChangeCompany(LookupCompanyName);
                LookupSalesHeader.ChangeCompany(LookupCompanyName);
                LookupPurchaseHeader.SetFilter("ITI IIC Document ID", PurchaseReference);
                if LookupPurchaseHeader.FindFirst() then begin
                    LookupPurchaseLine.SetRange("Document Type", LookupPurchaseHeader."Document Type");
                    LookupPurchaseLine.SetFilter("Document No.", LookupPurchaseHeader."No.");
                    if LookupPurchaseLine.FindFirst() then
                        if LookupSalesHeader.Get(LookupSalesHeader."Document Type"::Order, LookupPurchaseLine."Sales Order No.") then
                            Rec."External Document No." := CopyStr(LookupPurchaseHeader."No." + '-' + LookupSalesHeader."External Document No.", 1, 35);
                end;
            end;
    end;
    */
    #endregion

    #region

    #endregion
    #region 080         Self-insured limit check with warning on sales order.
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"Release Sales Document", 'OnAfterManualReleaseSalesDoc', '', false, false)]
    local procedure OnAfterSalesOrderRelease(SalesHeader: Record "Sales Header")
    var
        CustomerRec: Record Customer;
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        // Retrieve the customer from the Sales Header's "Sell-to Customer No."
        if CustomerRec.Get(SalesHeader."Sell-to Customer No.") then
            // Call the procedure to check the "Self-Insured" limit
            ScanpanMiscellaneous.CheckCustomerCreditLimit(CustomerRec, SalesHeader);
    end;
    #endregion

    




}
 




/// <summary>
/// 2024.06.13          Jesper Harder                   Fix from ExtionsionIT, better handling for Shipmondo PackageType on Tasklet
/// 2024.10             Jesper Harder       084         Shipmondo Add Mobile Number To Sales Header, PickUpPoint
/// 2024.10             Jesper Harder       089         XtensionIT Shipmondo Add Pick-up Point
/// 2024.10             Jesper Harder       091         Create Customs, Shipmondo, XtensionIT
/// </summary>



codeunit 50012 "SubscriberShipmondo"
{

    EventSubscriberInstance = StaticAutomatic;



    /// Fix from ExtionsionIT, better handling for Shipmondo PackageType on Tasklet
    #region Package Types following 3 Primary Key fields combination
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"MOB WMS Pack Lookup", 'OnLookupOnPackagesToShip_OnAfterAddStepToLicensePlate', '', false, false)]
    local procedure ChangeDataTableOnPackAndShip(_LicensePlate: Record "MOB License Plate"; var _Step: Record "MOB Steps Element")
    var
        WhseShipmentHeader: Record "Warehouse Shipment Header";
        DataTableName: Text;
    begin
        if LowerCase(_Step.Get_name()) <> 'packagetype' then
            exit;

        if not WhseShipmentHeader.Get(_LicensePlate."Whse. Document No.") then
            exit;

        if WhseShipmentHeader."Shipping Agent Code" = '' then
            exit;

        DataTableName := StrSubstNo('%1_%2_%3', 'PackageTypeTable', CreateValidDataTableName(WhseShipmentHeader."Shipping Agent Code"), CreateValidDataTableName(WhseShipmentHeader."Shipping Agent Service Code"));
        _Step.Set_dataTable(DataTableName);  // 'PackageTypeTable_ShippingAgentCode_ShippingAgentService'
        _Step.Save();
    end;


    [EventSubscriber(ObjectType::Codeunit, Codeunit::"MOB WMS Reference Data", 'OnGetReferenceData_OnAddDataTables', '', true, true)]
    local procedure OnGetReferenceData_OnAddDataTablesForPackageType(var _DataTable: Record "MOB DataTable Element")
    var
        ShippingAgent: Record "Shipping Agent";
        MobPackageType: Record "MOB Package Type";
        MobPackageSetup: Record "MOB Mobile WMS Package Setup";
        OldServiceCode: Text;
    begin
        // Create a DataTable for each combination of Shipping Agent and Package Types
        if ShippingAgent.FindSet() then
            repeat
                OldServiceCode := '--';
                MobPackageSetup.SetCurrentKey("Shipping Agent", "Shipping Agent Service Code", "Package Type");
                MobPackageSetup.SetRange("Shipping Agent", ShippingAgent.Code);
                if MobPackageSetup.FindSet() then
                    repeat
                        if MobPackageSetup."Shipping Agent Service Code" <> OldServiceCode then begin
                            _DataTable.InitDataTable(StrSubstNo('%1_%2_%3', 'PackageTypeTable', CreateValidDataTableName(ShippingAgent.Code), CreateValidDataTableName(MobPackageSetup."Shipping Agent Service Code")));
                            _DataTable.Create_CodeAndName('', '');
                            OldServiceCode := MobPackageSetup."Shipping Agent Service Code";
                        end;
                        if MobPackageType.Get(MobPackageSetup."Package Type") then
                            if MobPackageType.Description <> '' then
                                _DataTable.Create_CodeAndName(MobPackageType.Code, MobPackageType.Description)
                            else
                                _DataTable.Create_CodeAndName(MobPackageType.Code, MobPackageType.Code);
                    until MobPackageSetup.Next() = 0;
            until ShippingAgent.Next() = 0;
    end;

    local procedure CreateValidDataTableName(_InputText: Text): Text
    var
        OutputText: Text;
    begin
        OutputText := _InputText;
        OutputText := ConvertStr(OutputText, ' ', '_');
        OutputText := ConvertStr(OutputText, '.', '_');
        OutputText := ConvertStr(OutputText, ',', '_');
        OutputText := ConvertStr(OutputText, '-', '_'); // Is valid in Xml tag name but unsupported in Android App
        exit(OutputText);
    end;
    #endregion

    // 084 Shipmondo Add Mobile Number To Sales Header
    // 089 XtensionIT Shipmondo Add Pick-up Point
    #region 084         Shipmondo Add Mobile Number To Sales Header
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"XTESSC Shipment Attributes", 'OnAfterGetDefaultReceiver_OnBeforeAssignReceiver', '', true, true)]
    local procedure OnAfterGetDefaultReceiver_OnBeforeAssignReceiver(var TempCustomer: Record Customer temporary; WaybillHeader: Record "XTECSC Waybill Header")
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        ScanpanMiscellaneous.ShipmondoGetWaybillDetails(TempCustomer, WaybillHeader);
    end;
    #endregion


    #region 091 Create Customs, Shipmondo, XtensionIT
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"XTESSC Shipment Attributes", 'OnBeforeSetCustoms', '', false, false)]
    local procedure OnBeforeSetCustoms(WaybillHeader: Record "XTECSC Waybill Header"; var Customs: JsonObject; var AddProperty: Boolean; var IsHandled: Boolean);
    var
        ShippingAgentServices: Record "Shipping Agent Services";
        WayBillLine: Record "XTECSC Waybill Line";
        ICustomsProviderXTE: Interface "ICustoms Provider XTE";
    begin

        if not ShippingAgentServices.Get(WaybillHeader."Shipping Agent Code", WaybillHeader."Shipping Agent Service Code") then
            exit;

        if ShippingAgentServices."XTECSC Customs Type" = ShippingAgentServices."XTECSC Customs Type"::"Default (None)" then
            exit;

        WayBillLine.Reset();
        WayBillLine.SetRange("Document Guid", WaybillHeader."Document Guid");
        WayBillLine.SetFilter("Shipment Status", '<>%1', WayBillLine."Shipment Status"::Reserved);
        if not WayBillLine.FindFirst() then
            exit;

        ICustomsProviderXTE := ShippingAgentServices."XTECSC Customs Type";
        ICustomsProviderXTE.CreateCustomsLines(WayBillLine);
    end;


    // Try2 catch posting from Tasklet and insert Customs lines 
    [EventSubscriber(ObjectType::Codeunit, Codeunit::"XTESCT License Plate Mgt", 'OnAfterCreateWaybillFromLicensePlate_OnBeforeModify', '', false, false)]
    local procedure "XTESCT License Plate Mgt_OnAfterCreateWaybillFromLicensePlate_OnBeforeModify"(WarehouseShipmentHeader: Record "Warehouse Shipment Header"; var WaybillHeader: Record "XTECSC Waybill Header"; var WaybillLine: Record "XTECSC Waybill Line"; var LicensePlate: Record "MOB License Plate")
    var
        ShippingAgentServices: Record "Shipping Agent Services";
        CustomsLine: Record "XTECSC Customs Line";
        ICustomsProviderXTE: Interface "ICustoms Provider XTE";
    begin
        if not ShippingAgentServices.Get(WaybillHeader."Shipping Agent Code", WaybillHeader."Shipping Agent Service Code") then
            exit;

        if ShippingAgentServices."XTECSC Customs Type" = ShippingAgentServices."XTECSC Customs Type"::"Default (None)" then
            exit;

        CustomsLine.Reset();
        CustomsLine.SetRange("Source Type", WaybillLine."Source Type");
        CustomsLine.SetRange("Source No.", WaybillLine."Source No.");
        CustomsLine.DeleteAll(false);

        ICustomsProviderXTE := ShippingAgentServices."XTECSC Customs Type";
        ICustomsProviderXTE.CreateCustomsLines(WaybillLine);
    end;
    #endregion
}
 


codeunit 50004 "TEST_CU"
{
    /// <summary>
    /// Codeunit TEST_CU (ID 50004).
    /// </summary>

    ///<example>
    ///
    ///                 SHIFT + ALT + E
    ///
    /// </example>
    /// 
    /// https://github.com/Microsoft/AL/issues/1911


    Access = Public;
    Subtype = Normal;

    /*
        [EventSubscriber(ObjectType::Codeunit, Codeunit::TRCSalesOrderEvent, 'OnAfterInsertTRCSalesOrder', '', true, true)]
        local procedure TrueCommerceTRCSalesOrderEventOnAfterInsertTRCSaelsOrder("Document Type": Enum "Sales Document Type"; No: Code[20])
        var
            Dummy: code[20];
        begin
            Dummy := No;
        end;
    */
    /*
        [EventSubscriber(ObjectType::Table, Database::"Sales Header", 'OnAfterInsertEvent', '', false, false)]
        local procedure SalesHeaderOnAfterInsertEvent(var Rec: Record "Sales Header");
        begin
            if CompanyName = 'SCANPAN Norge' then
                Rec."ITI IIC Drop Ship. Vendor No." := '5008';
        end;
    */

    var
        XtensionITShipmentAttributes: Codeunit "XTESSC Shipment Attributes";
        XtensionIT: Codeunit "XTECSC Internal Functions";
        credhdr: Record "Sales Cr.Memo Header";
        Shstatus: Enum "Sales Document Status";
        SH: Record "Sales Header";
        QtyOnSale: Record Item;
        ProductionOrderStatistics: Page "Production Order Statistics";
        porl: Record "Prod. Order Routing Line";
        ILE: Record "Item Ledger Entry";
        CLE: Record "Capacity Ledger Entry";
        Poc: Record "Prod. Order Component";
        DefaultDimension: Record "Default Dimension";
        //dummy: page 700;
        //dummy2: Report "Rolled-up Cost Shares";
        //dumm3: page 6085585;

        //dumm4: Record 5777;
        CalculateInventory: Report "Calculate Inventory";
        PhysInventoryJournal: page "Phys. Inventory Journal";
        PlanningWorksheet: Page "Planning Worksheet";
        PriceAmountType: enum "Price Amount Type";
        PriceAssetType: enum "Price Asset Type";
        PriceSourceType: enum "Price Source Type";

   
    
   
   
    #region Delete invoiced IIC Purchaseorders
    /// <summary>
    /// DeleteFullyInvoicedPurchaseOrders.
    /// </summary>
    procedure DeleteFullyInvoicedPurchaseOrders()
    var
        PurchaseHeader: Record "Purchase Header";
        TestMsg: Text;
    begin
        PurchaseHeader.SetRange("Document Type", PurchaseHeader."Document Type"::Order);
        PurchaseHeader.FindSet();
        repeat
            if IsReadyForDeletion(PurchaseHeader."No.") then
                TestMsg += 'Yes -' + PurchaseHeader."No." + '\';
            TestMsg += 'No  -' + PurchaseHeader."No." + '\';
        until PurchaseHeader.Next() = 0;
        Message(TestMsg);
    end;




    local procedure IsReadyForDeletion(PurchaseOrderNo: code[20]): Boolean
    var
        PurchaseHeader: Record "Purchase Header";
        PurchaseLine: Record "Purchase Line";
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        IsReadyDelete: Boolean;
        TestCompanyLbl: Label 'This must be executed from Scanpan Norway Company. ';
        CompanyNameNO: Text[100];
        CompanyNameDK: Text[100];
    begin
        IsReadyDelete := true;
        CompanyNameDK := 'SCANPAN Danmark';
        CompanyNameNO := 'SCANPAN Norge';
        if CompanyName <> CompanyNameNO then error(TestCompanyLbl + CompanyName);

        //Test if DropShip linked salesorder exists Norway
        PurchaseLine.Reset();
        PurchaseLine.SetFilter("Document Type", '%1', PurchaseLine."Document Type"::Order);
        PurchaseLine.SetFilter("Document No.", PurchaseOrderNo);
        PurchaseLine.SetFilter(Type, '%1', PurchaseLine.Type::Item);
        PurchaseLine.SetFilter("Drop Shipment", '%1', true);
        if PurchaseLine.FindFirst() then begin
            SalesLine.Reset();
            SalesLine.SetRange("Document Type", SalesLine."Document Type"::Order);
            SalesLine.SetFilter("Document Type", PurchaseLine."Sales Order No.");


        end;

        //Test if IIC linked salesorder exists Denmark
        PurchaseHeader.Get(PurchaseHeader."Document Type"::Order, PurchaseOrderNo);
        SalesHeader.ChangeCompany(CompanyNameDK);
        SalesHeader.SetFilter("Document Type", '%1', SalesHeader."Document Type"::Order);
        if SalesHeader.get(SalesHeader."Document Type"::Order, PurchaseHeader."Vendor Order No.") then
            IsReadyDelete := false;

        exit(IsReadyDelete);
    end;
    #endregion


} 




/// <summary>
/// Enum Address Types (ID 50011).
/// </summary>
/// <remarks>
/// 2023.08             Jesper Harder       046         Addresses Customer and Vendor
/// </remarks>

enum 50011 "Address Types"
{
    Extensible = true;
    value(0; "Customer")
    {
        Caption = 'Customer';
    }
    value(1; "Customer Ship-To")
    {
        Caption = 'Customer Ship-To';
    }
    value(2; "Vendor")
    {
        Caption = 'Vendor';
    }
} 
/// <summary>
/// Enum CampaignStatistics DocTypes (ID 50007).
/// </summary>
/// <remarks>
/// 2023.06.12                  Jesper Harder               034 Campaign statistics Added Code
/// </remarks>
enum 50007 "CampaignStatistics DocTypes"
{
    Extensible = true;

    value(0; "Sales Order")
    {
        Caption = 'Sales Order';
    }
    value(1; "Invoice")
    {
        Caption = 'Invoice';
    }

    value(2; "Forecast")
    {
        Caption = 'Forecast';
    }
}
 



/// <summary>
/// /// 2024.05             Jesper Harder       067         Add fields to facilitate Datawarehouse fields
/// </summary>
enum 50020 CountryMarketType
{
    Caption = 'Country Market Type';
    Extensible = false;

    value(0; None)
    {
        Caption = ' ';
    }
    value(1; Focus)
    {
        Caption = 'Focus';
    }
    value(2; Secondary)
    {
        Caption = 'Secondary';
    }
    value(3; Growth)
    {
        Caption = 'Growth';
    }
}
 


/// <summary>
/// 2024.05             Jesper Harder       067         Add fields to facilitate Datawarehouse fields
/// </summary>

enum 50021 CountrySalesChannelEnum
{
    Extensible = false;
    Caption = 'Country Sales Channel';

    value(0; None)
    {
        Caption = ' ';
    }
    value(1; Agent)
    {
        Caption = 'Agent';
    }
    value(2; Distributor)
    {
        Caption = 'Distributor';
    }
    value(3; Own)
    {
        Caption = 'Own';
    }
}
  



///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>


enum 50012 DSVeDCOrderStates
{

value(0;"Provisional"){ caption = 'Provisional'; }
value(1;"Rejected"){ caption = 'Rejected'; }
value(2;"Booked"){ caption = 'Booked'; }
value(3;"Approved"){ caption = 'Approved'; }
value(4;"Confirmed"){ caption = 'Confirmed'; }
value(5;"Parked"){ caption = 'Parked'; }
value(6;"Transmitted"){ caption = 'Transmitted'; }
value(7;"PendingConsolidation"){ caption = 'PendingConsolidation'; }
value(8;"Consolidated"){ caption = 'Consolidated'; }
value(9;"PendingCollection"){ caption = 'PendingCollection'; }
value(10;"Collected"){ caption = 'Collected'; }
value(11;"OnHand"){ caption = 'OnHand'; }
value(12;"DepartedOriginCFS"){ caption = 'DepartedOriginCFS'; }
value(13;"Shipped"){ caption = 'Shipped'; }
value(14;"Arrived"){ caption = 'Arrived'; }
value(15;"CustomsCommenced"){ caption = 'CustomsCommenced'; }
value(16;"CustomsCleared"){ caption = 'CustomsCleared'; }
value(17;"AvailableDestinationCFS"){ caption = 'AvailableDestinationCFS'; }
value(18;"PendingDelivery"){ caption = 'PendingDelivery'; }
value(19;"DepartedDestinationCFS"){ caption = 'DepartedDestinationCFS'; }
value(20;"Handover"){ caption = 'Handover'; }
value(21;"Delivered"){ caption = 'Delivered'; }
value(22;"Cancelled"){ caption = 'Cancelled'; }


} 


///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>

enum 50013 DSVOrderState
{

    value(0; "Provisional")
    {
        caption = 'Provisional';
    }

    value(1; "Open") { caption = 'Open'; }
    value(2; "Confirmed") { caption = 'Confirmed'; }
    value(3; "OnHand") { caption = 'OnHand'; }
    value(4; "BookingProvisional") { caption = 'BookingProvisional'; }
    value(5; "BookingBooked") { caption = 'BookingBooked'; }
    value(6; "BookingRejected") { caption = 'BookingRejected'; }
    value(7; "BookingApproved") { caption = 'BookingApproved'; }
    value(8; "BookingConfirmed") { caption = 'BookingConfirmed'; }
    value(9; "BookingParked") { caption = 'BookingParked'; }
    value(10; "PendingConsolidation") { caption = 'PendingConsolidation'; }
    value(11; "Consolidated") { caption = 'Consolidated'; }
    value(12; "PendingCollection") { caption = 'PendingCollection'; }
    value(13; "Collected") { caption = 'Collected'; }
    value(14; "BookingOnHand") { caption = 'BookingOnHand'; }
    value(15; "DepartedOriginCFS") { caption = 'DepartedOriginCFS'; }
    value(16; "Shipped") { caption = 'Shipped'; }
    value(17; "Arrived") { caption = 'Arrived'; }
    value(18; "CustomsCommenced") { caption = 'CustomsCommenced'; }
    value(19; "CustomsCleared") { caption = 'CustomsCleared'; }
    value(20; "AvailableDestinationCFS") { caption = 'AvailableDestinationCFS'; }
    value(21; "PendingDelivery") { caption = 'PendingDelivery'; }
    value(22; "DepartedDestinationCFS") { caption = 'DepartedDestinationCFS'; }
    value(23; "Handover") { caption = 'Handover'; }
    value(24; "Delivered") { caption = 'Delivered'; }
    value(25; "Fulfilled") { caption = 'Fulfilled'; }
    value(26; "Cancelled") { caption = 'Cancelled'; }


}
 




///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>

enum 50014 DSVShipmentState
{ 
    value(0; "Booked") { caption = 'Booked'; }
    value(1; "PendingConsolidation") { caption = 'PendingConsolidation'; }
    value(2; "Consolidated") { caption = 'Consolidated'; }
    value(3; "PendingCollection") { caption = 'PendingCollection'; }
    value(4; "Collected") { caption = 'Collected'; }
    value(5; "OnHand") { caption = 'OnHand'; }
    value(6; "DepartedOriginCFS") { caption = 'DepartedOriginCFS'; }
    value(7; "Shipped") { caption = 'Shipped'; }
    value(8; "Arrived") { caption = 'Arrived'; }
    value(9; "CustomsCommenced") { caption = 'CustomsCommenced'; }
    value(10; "CustomsCleared") { caption = 'CustomsCleared'; }
    value(11; "AvailableDestinationCFS") { caption = 'AvailableDestinationCFS'; }
    value(12; "PendingDelivery") { caption = 'PendingDelivery'; }
    value(13; "DepartedDestinationCFS") { caption = 'DepartedDestinationCFS'; }
    value(14; "Handover") { caption = 'Handover'; }
    value(15; "Delivered") { caption = 'Delivered'; }
    value(16; "Cancelled") { caption = 'Cancelled'; }


} 





/// <summary>
/// Enum DSVTransportMode (ID 50017).
/// </summary>
/// ///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>

enum 50017 "DSVTransportMode"
{

    value(0; "SEA")
    {
        Caption = 'Oceanfreight (SEA)';
    }
    value(1; "AIR")
    {
        Caption = 'Airfreight (AIR)';
    }
    value(2; "ROAD")
    {
        Caption = 'Roadfreight (ROAD)';
    }
    value(3; "COU")
    {
        Caption = 'Courier/Express (COU)';
    }
}  




/// <summary>
/// Enum EnumChartDataType (ID 50018).
/// </summary>
enum 50018 "EnumChartDataType"
{

    Caption = 'Enum Chart Data Types';


    value(0; "Planned Quantity")
    {
        Caption = 'Planned Quantity';
    }
    value(1; "Planned Time")
    {
        Caption = 'Planned Time';
    }
    value(3; "Actual Quantity")
    {
        Caption = 'Actual Quantity';
    }
    value(4; "Actual Time")
    {
        Caption = 'Actual Time';
    }

} 
/// <summary>
/// Enum Enum Controlling Documents (ID 50008).
/// </summary>
/// <remarks>
///
/// 2023.03.13          Jesper Harder                   001 Production Controlling
///
/// </remarks>
enum 50008 "Enum Controlling Documents"
{
    caption = 'Enum Controlling Documents';

    value(0; "Transfer Order")
    {
        Caption = 'Transfer Order';
    }
    value(1; "Released PO")
    {
        Caption = 'Released Production Order';
    }
    value(2; "Firm PO")
    {
        Caption = 'Firmed Production Order';
    }
} 




/// <summary>
/// Enum GetBOMDetails (ID 50005).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.13          Jesper Harder                   001 Production Controlling
/// 
/// </remarks>

enum 50005 "EnumGetBOMDetails"
{
    Caption = 'Get Bom Details';

    value(0; "Material")
    {
        Caption = 'Material';
    }
    value(1; "Operation Type")
    {
        Caption = 'Operation Type';
    }
} 



/// 2023.10             Jesper Harder        056         Coating Description on Production Orders
enum 50019 EnumGetCoatingDescription
{

    Caption = 'Enum Get coating Description';

    value(0; "Item No. Map")
    {
        Caption = 'Item No. Map';
    }
    value(1; "Coating Description Map")
    {
        Caption = 'Coating Description Map';
    }


} 




/// <summary>
/// Enum GetItem (ID 50003).
/// </summary>
/// <remarks>
/// 
/// 2023.03.30                  Jesper Harder               020     PriceList Source Data Code start.
/// 
/// </remarks>

enum 50003 "EnumGetItem"
{
    Caption = 'Enum Get Item returns';

    value(0; "Unit Cost")
    {
        Caption = 'Unit Cost';
    }
    value(1; "Indirect Unit Cost %")
    {
        Caption = 'Indirect Unit Cost %';
    }
    value(2; "Base Unit of Measure")
    {
        Caption = 'Base Unit of Measure';
    }

} 



/// <summary>
/// Enum EnumGetItemPurchasePrice (ID 50002).
/// </summary>
/// <remarks>
/// 
/// 2023.03.30                  Jesper Harder               020     PriceList Source Data Code start.
/// 
/// </remarks>

enum 50002 "EnumGetItemPurchasePrice"
{
    Caption = 'Enum to determine return values from Item Purchase Price';
    Extensible = false;

    value(0; "Direct Unit Cost")
    {
        Caption = 'Direct Unit Cost';
    }
    value(1; "Currency Code")
    {
        Caption = 'Currency Code';
    }

}
 


/// <summary>
/// 2024.06             Jesper Harder       069         ItemBodyType, Enum, TableExtension and PageExtension
/// </summary>
enum 50022 "EnumItemBodyType"
{
    Extensible = true;

    value(0; " ")
    {
        Caption = ' ';
    }
    value(1; "Steel Brushed")
    {
        Caption = 'Steel Brushed';
    }
    value(2; "Steel Polished")
    {
        Caption = 'Steel Polished';
    }
    value(3; Aluminium)
    {
        Caption = 'Aluminium';
    }
    value(4; "Aluminium Induction")
    {
        Caption = 'Aluminium Induction';
    }
}
 


/// <summary>
/// Enum SCANPAN_ItemCrossReferenceTypes (ID 50000).
/// </summary>
/// <remarks>
/// 
/// 2023.03.30                  Jesper Harder               020     PriceList Source Data Code start.
/// 
/// </remarks>

enum 50000 "EnumItemReferenceTypes"
{
    Caption = 'Enum Item Reference Types';
    Extensible = true;

    value(0; "Barcode")
    {
        Caption = 'Barcode';
    }
    value(1; "Item Unit")
    {
        Caption = 'Item Unit';
    }
}
 


/// <summary>
/// Enum "EnumItemUnitOfMeasure" (ID 50001).
/// </summary>
enum 50001 EnumItemUnitOfMeasure
{
    Extensible = true;

    value(0; Weight)
    {
        Caption = 'Weight';
    }
    value(1; Colli)
    {
        Caption = 'Colli';
    }
    value(2; ColliCode)
    {
        Caption = 'ColliCode';
    }
}
 
/// <summary>
/// Enum ItemUnitOfMeasureCode (ID 50009).
/// </summary>
enum 50009 "EnumItemUnitOfMeasureCode"
{
    Extensible = true;

    value(0; Master)
    {
        Caption = 'Master';
    }

    value(1; Inner)
    {
        Caption = 'Inner';
    }
} 





/// <summary>
/// Enum EnumLogicalOperator (ID 50015).
/// </summary>
/// <remarks>
/// 
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
/// 
/// </remarks>

enum 50015 EnumLogicalOperator
{

    caption = 'Mandatory Setup Logical Operators';
    Extensible = true;

    value(0; "Equal")
    {
        Caption = 'Equal';
    }
    value(1; "Not")
    {
        Caption = 'Not';
    }
} 
/// <summary>
/// Enum Enum Posted Document Type (ID 50006).
/// </summary>
/// <remarks>
/// 2023.05.01              Jesper Harder                       028     SalesCommision
/// </remarks>
enum 50006 "Enum Posted Document Type"
{
    Extensible = true;

    value(0; "Posted Sales Invoice")
    {
        Caption = '"Posted Sales Invoice"';
    }
    value(1; "Posted Sales Ceredit Memo")
    {
        Caption = ' "Posted Sales Credit Memo"';
    }
}
 



/// <summary>
/// Enum EnumProductionOrderStatus (ID 50004).
/// </summary>
/// <remarks>
/// 
/// 2023.03.30                  Jesper Harder               020     PriceList Source Data Code start.
/// 2023.04.10                  Jesper Harder               022     Porting the PanPlan project to AL/Code.
/// </remarks>

enum 50004 "EnumProductionOrderStatus"
{
    caption = 'Production Order Status';
    Extensible = true;

    value(0; "Simulated")
    {
        Caption = 'Simulated';
    }
    value(1; "Planned")
    {
        Caption = 'Planned';
    }
    value(2; "Firm Planned")
    {
        Caption = 'Firm Planned';
    }
    value(3; "Released")
    {
        Caption = 'Released';
    }
    value(4; "Finished")
    {
        Caption = 'Finished';
    }

    //022
    value(5; "Receipts")
    {
        Caption = 'Receipts';
    }
}

 
 




/// <summary>
/// Enum EnumTableType (ID 50010).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
/// 
/// </remarks>
enum 50010 "EnumTableType"
{

    caption = 'Mandatory Fields Setup';
    Extensible = true;

    value(0; "Customer")
    {
        Caption = 'Customer';
    }

    value(1; "Vendor")
    {
        Caption = 'Vendor';
    }

    value(2; "Item")
    {
        Caption = 'Item';
    }

} 



/// <summary>
/// Enum PeriodLength (ID 50016).
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
enum 50016 "PeriodType"
{
    Extensible = true;

    value(0; "Date")
    {
        Caption = 'Date';
    }
    value(1; "Week")
    {
        Caption = 'Week';
    }

    value(2; "Month")
    {
        Caption = 'Month';
    }

    value(3; "Quarter")
    {
        Caption = 'Quarter';
    }

    value(4; "Year")
    {
        Caption = 'Year';
    }
} 
/// <summary>
/// Page Addresses (ID 50005).
/// </summary>
/// <remarks>
/// 2023.08             Jesper Harder       046         Addresses Customer and Vendor
/// </remarks>

page 50005 "Addresses"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'All Customer Addresses';
    PageType = List;
    Permissions =
        tabledata "Address List" = RIMD,
        tabledata Vendor = R;
    SourceTable = "Address List";
    //SourceTableTemporary = true;
    UsageCategory = Administration;

    layout
    {
        area(Content)
        {
            repeater("Customers")
            {
                field(LineNo; Rec.LineNo)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Line No. field.';
                    Visible = isvisible;
                }
                field(AddressType; Rec.AddressType)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Address Type field.';
                }
                field("Code"; Rec."Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Address Code field.';
                }
                field(Name; Rec.Name)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Name field.';
                }
                field("Address Line 1"; Rec."Address Line 1")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Address Line 1 field.';
                }
                field("Address Line 2"; Rec."Address Line 2")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Address Line 2 field.';
                }
                field("House Number"; Rec."House Number")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the House Number field.';
                }
                field(ZipCode; Rec.ZipCode)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Zip Code field.';
                }
                field(City; Rec.City)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the City field.';
                }
                field(Country; Rec.Country)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Country field.';
                }
                field("E-mail"; Rec."E-mail")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the E-mail field.';
                }
                field(Phone; Rec.Phone)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Phone field.';
                }
                field(Contact; Rec.Contact)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Contact field.';
                }
                field("Shipping Agent Code"; Rec."Shipping Agent Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Shipping Agent Code field.';
                }
                field("Shipping Agent Service Code"; Rec."Shipping Agent Service Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Shipping Method Code field.';
                }
                field("Shipment Method Code"; Rec."Shipment Method Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Shipment Code field.';
                }
            }
        }
    }

    var
        isvisible: Boolean;

    trigger OnOpenPage()
    var
        Vendor: Record Vendor;
        AddressesCustomerQuery: Query AddressesCustomer;
        AddressTypeEnum: enum "Address Types";
        LineNoInteger: Integer;
        LastCustomerNo: Text[100];
    begin
        if AddressesCustomerQuery.Open() then begin
            while AddressesCustomerQuery.Read() do begin
                if AddressesCustomerQuery.CustomerNo <> LastCustomerNo then begin
                    LastCustomerNo := AddressesCustomerQuery.CustomerNo;
                    LineNoInteger += 1;
                    Rec.Init();
                    Rec.LineNo := LineNoInteger;
                    Rec.AddressType := AddressTypeEnum::Customer;
                    Rec.Code := AddressesCustomerQuery.CustomerNo;
                    Rec.Name := AddressesCustomerQuery.CustomerName;
                    Rec."Address Line 1" := AddressesCustomerQuery.CustomerAddress1;
                    Rec."Address Line 2" := AddressesCustomerQuery.CustomerAddress2;
                    Rec.ZipCode := AddressesCustomerQuery.CustomerPostCode;
                    Rec.City := AddressesCustomerQuery.CustomerCity;
                    Rec.Province := AddressesCustomerQuery.CustomerCounty;
                    Rec.Country := AddressesCustomerQuery.CustomerCountryRegionCode;
                    Rec."E-mail" := AddressesCustomerQuery.CustomerEMail;
                    Rec.Phone := AddressesCustomerQuery.CustomerPhoneNo;
                    Rec.Contact := AddressesCustomerQuery.CustomerContact;
                    Rec."Shipping Agent Code" := AddressesCustomerQuery.CustomerShippingAgentCode;
                    Rec."Shipping Agent Service Code" := AddressesCustomerQuery.CustomerShippingAgentServiceCode;
                    Rec."Shipment Method Code" := AddressesCustomerQuery.CustomerShipmentMethodCode;
                    Rec."House Number" := GetStreetNumber(AddressesCustomerQuery.CustomerAddress1);

                    Rec.Insert(true);
                end;
                if AddressesCustomerQuery.ShipToCode <> '' then begin
                    LineNoInteger += 1;
                    Rec.Init();
                    Rec.LineNo := LineNoInteger;
                    Rec.AddressType := AddressTypeEnum::"Customer Ship-To";
                    Rec.Code := AddressesCustomerQuery.CustomerNo + '(' + AddressesCustomerQuery.ShipToCode + ')';
                    Rec.Name := AddressesCustomerQuery.ShipToName;
                    Rec."Address Line 1" := AddressesCustomerQuery.ShipToAddress;
                    Rec."Address Line 2" := AddressesCustomerQuery.ShipToAddress2;
                    Rec.ZipCode := AddressesCustomerQuery.ShipToPostCode;
                    Rec.City := AddressesCustomerQuery.ShipToCity;
                    Rec.Province := AddressesCustomerQuery.ShipToCounty;
                    Rec.Country := AddressesCustomerQuery.ShipToCountryRegionCode;
                    Rec."E-mail" := AddressesCustomerQuery.ShipToEMail;
                    Rec.Phone := AddressesCustomerQuery.ShipToPhoneNo;
                    Rec.Contact := AddressesCustomerQuery.ShipToContact;
                    Rec."Shipping Agent Code" := AddressesCustomerQuery.shiptoShippingAgentCode;
                    Rec."Shipping Agent Service Code" := AddressesCustomerQuery.ShipToShippingAgentServiceCode;
                    Rec."Shipment Method Code" := AddressesCustomerQuery.ShipToShipmentMethodCode;
                    Rec."House Number" := GetStreetNumber(AddressesCustomerQuery.ShipToAddress);
                    Rec.Insert(true);
                end;
            end;
            AddressesCustomerQuery.Close();
        end;
        //Vendor
        Vendor.Reset();
        Vendor.FindSet();
        repeat
            LineNoInteger += 1;
            Rec.Init();
            Rec.LineNo := LineNoInteger;
            Rec.AddressType := AddressTypeEnum::Vendor;
            Rec.Code := Vendor."No.";
            Rec.Name := Vendor.Name;
            Rec."Address Line 1" := Vendor.Address;
            Rec."Address Line 2" := Vendor."Address 2";
            Rec.ZipCode := Vendor."Post Code";
            Rec.City := Vendor.City;
            Rec.Province := Vendor.County;
            Rec.Country := Vendor."Country/Region Code";
            Rec."E-mail" := Vendor."E-Mail";
            Rec.Phone := Vendor."Phone No.";
            Rec.Contact := Vendor.Contact;
            Rec."Shipping Agent Code" := Vendor."Shipping Agent Code";
            Rec."Shipping Agent Service Code" := '';
            Rec."Shipment Method Code" := Vendor."Shipment Method Code";
            Rec."House Number" := GetStreetNumber(Vendor.Address);
            Rec.Insert(true);
        until Vendor.Next() = 0;
    end;

    local procedure GetStreetNumber(AddressText: Text[100]): Text[100]
    var
        i: Integer;
    begin
        i := AddressText.LastIndexOf(' ');
        if i > 0 then exit(CopyStr(AddressText, i, StrLen(AddressText)));
    end;
}
 
page 50054 AdjustBoMlines
{
    ///<summary>
    /// 2024.10             Jesper Harder       087         Adjust Multiple BoM lines
    /// Adds functionality to adjust the Quantity Per factor for Bill of Material lines.
    ///</summary>
    AdditionalSearchTerms = 'SCANPAN, BOM, Controlling';
    Caption = 'Adjust BOM Lines';
    PageType = Card;
    UsageCategory = Administration;
    ApplicationArea = All;

    layout
    {
        area(content)
        {
            group(Group)
            {
                Caption = 'BOM Adjustment Parameters';
                field("AdjustQtyPerFactor"; QuantityPerFactor)
                {
                    ApplicationArea = All;
                    Caption = 'Adjust Quantity Per Factor';
                    ToolTip = 'Enter the factor by which the Quantity Per should be adjusted for the selected Bill of Material lines.';
                    DecimalPlaces = 4;
                    // Field for entering the adjustment factor for Quantity Per. Supports up to 4 decimal places.
                }
            }
        }
    }

    var
        QuantityPerFactor: Decimal; // Variable to store the Quantity Per adjustment factor

    /// <summary>
    /// Returns the value of QuantityPerFactor entered by the user.
    /// </summary>
    /// <returns>The Quantity Per adjustment factor as a Decimal value.</returns>
    procedure ReturnQuantityPerFactor(): Decimal
    begin
        exit(QuantityPerFactor); // Return the user-entered adjustment factor
    end;
} 



/// <summary>
/// Page "SCANPAN_BC_LICENSE_INFORMATION" (ID 50002).
/// </summary>
/// 
/// <remarks>
/// 
/// – 
/// – TaLicense Permissionble Information
/// – Active Sessions
/// – Database locks
/// – Events
/// – Installed apps
/// 
/// </remarks>
page 50002 "BC_LICENSE_INFORMATION_SC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'SCANPAN_BC_LICENSE_INFORMATION';
    PageType = List;
    SourceTable = "License Information";
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Text"; Rec."Text")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Text field.';
                }
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field(SystemCreatedAt; Rec.SystemCreatedAt)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemCreatedAt field.';
                }
                field(SystemCreatedBy; Rec.SystemCreatedBy)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemCreatedBy field.';
                }
                field(SystemId; Rec.SystemId)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemId field.';
                }
                field(SystemModifiedAt; Rec.SystemModifiedAt)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemModifiedAt field.';
                }
                field(SystemModifiedBy; Rec.SystemModifiedBy)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemModifiedBy field.';
                }

            }
        }
    }
}
 





/// <summary>
/// Page BC_LICENSE_PERMISSION_SC (ID 50006).
/// </summary>
page 50006 "BC_LICENSE_PERMISSION_SC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'BC_LICENSE_PERMISSION';
    PageType = List;
    SourceTable = "License Permission";
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Delete Permission"; Rec."Delete Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Delete Permission field.';
                }
                field("Execute Permission"; Rec."Execute Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Execute Permission field.';
                }
                field("Insert Permission"; Rec."Insert Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Insert Permission field.';
                }
                field("Limited Usage Permission"; Rec."Limited Usage Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Limited Usage Permission field.';
                }
                field("Modify Permission"; Rec."Modify Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Modify Permission field.';
                }
                field("Object Number"; Rec."Object Number")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Object Number field.';
                }
                field("Object Type"; Rec."Object Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Object Type field.';
                }
                field("Read Permission"; Rec."Read Permission")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Read Permission field.';
                }
                field(SystemCreatedAt; Rec.SystemCreatedAt)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemCreatedAt field.';
                }
                field(SystemCreatedBy; Rec.SystemCreatedBy)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemCreatedBy field.';
                }
                field(SystemId; Rec.SystemId)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemId field.';
                }
                field(SystemModifiedAt; Rec.SystemModifiedAt)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemModifiedAt field.';
                }
                field(SystemModifiedBy; Rec.SystemModifiedBy)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the SystemModifiedBy field.';
                }
            }
        }
    }
}
 
/// <summary>
/// Page Campaign Sales (ID 50037).
/// </summary>
///
/// <remarks>
/// 2023.06.12                  Jesper Harder               034 Campaign statistics
/// </remarks> 
page 50037 "CampaignSales"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Sales Campaign Sales';
    DeleteAllowed = false;
    InsertAllowed = false;
    ModifyAllowed = false;
    ShowFilter = true;
    PageType = List;
    Permissions =
        tabledata Campaign = R,
        tabledata CampaignStatistics = RI,
        tabledata Currency = R,
        tabledata Customer = R,
        tabledata "Dimension Value" = R,
        tabledata Item = R,
        tabledata "Production Forecast Entry" = R,
        tabledata "Sales Header" = R,
        tabledata "Sales Invoice Header" = R,
        tabledata "Sales Invoice Line" = R,
        tabledata "Sales Line" = R;
    SourceTable = CampaignStatistics;
    UsageCategory = ReportsAndAnalysis;

    layout
    {
        area(Content)
        {
            group(group1)
            {
                ShowCaption = false;
                repeater(Campaigns)
                {
                    Caption = 'Campaigns';

                    field("Line No."; Rec."Line No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Line No. field.';
                    }
                    field("Date"; Rec."Date")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Date field.';
                    }
                    field("Chain Group"; Rec."Chain Group")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Customer Chain Group field.';
                    }
                    field(Chain; Rec.Chain)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Customer Chain field.';
                    }
                    field("Customer No."; Rec."Customer No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Customer No. field.';
                    }
                    field("Customer Name"; Rec."Customer Name")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Customer Name field.';
                    }
                    field("Country Code"; Rec."Country Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Country field.';
                    }

                    field(SalesPerson; Rec."SalesPerson Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the SalesPersconCode field.';
                    }
                    field("Campaign Code"; Rec."Campaign Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Campaign Code field.';
                    }
                    field("Campaign Name"; Rec."Campaign Name")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Campaign Name field.';
                    }
                    field("Campaign Type"; Rec."Campaign Type")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Campaign Type field.';
                    }
                    field("Campaign Purpose"; Rec."Campaign Purpose")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Campaign Purpose field.';
                    }
                    field("Document Type"; Rec."Document Type")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Document Type field.';
                    }
                    field("Document No."; Rec."Document No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Document No. field.';
                    }
                    field("Currency Code"; Rec."Currency Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Currency Code field.';
                    }
                    field("Currency Description"; Rec."Currency Description")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Currency Description field.';
                    }
                    field("Item No."; Rec."Item No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Item No. field.';
                    }
                    field("Item Description"; Rec."Item Description")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Item Description field.';
                    }
                    field(Quantity; Rec.Quantity)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Quantity field.';
                    }
                    field(Amount; Rec.Amount)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Amount field.';
                    }
                    field("Amount(RV)"; Rec."Amount(RV)")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Amount(RV) field.';
                    }
                }
            }

            group(Totals)
            {
                field(TotalQuantity; TotalQuantity)
                {
                    Caption = 'Total Quantity';
                    ToolTip = 'Sum of Quantity.';
                }
                field(TotalAmount; TotalAmount)
                {
                    Caption = 'Total Amount';
                    ToolTip = 'Sum of Amount.';
                }
                field(TotalAmountRV; TotalAmountRV)
                {
                    Caption = 'Total Amount(RV)';
                    ToolTip = 'Sum og Amount RV.';
                }
            }
        }
    }

    actions
    {
        area(Processing)
        {
            action("OpenFilterPage")
            {
                ApplicationArea = All;
                Caption = 'Update Contents', comment = '=Openes the filterpage and updates the page contents.';
                ToolTip = 'Updates the page based on filters set.';
                Promoted = true;
                PromotedOnly = true;
                PromotedCategory = Process;
                PromotedIsBig = true;
                Image = UseFilters;

                trigger OnAction()
                var
                    CampaignStatistics: Record CampaignStatistics;
                    FilterPageBuilder: FilterPageBuilder;
                    PageCaptionLbl: label 'Filterpage';
                    FieldCaptionLbl: Label 'Campaign Fields';

                begin
                    CampaignStatistics.SetView(Rec.GetView());
                    FilterPageBuilder.AddRecord(FieldCaptionLbl, CampaignStatistics);
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics.Date);
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics."Campaign Code");
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics."Campaign Type");
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics."Campaign Purpose");
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics.Chain);
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics."Chain Group");
                    FilterPageBuilder.AddField(FieldCaptionLbl, CampaignStatistics."Country Code");
                    FilterPageBuilder.PageCaption := PageCaptionLbl;
                    if FilterPageBuilder.RunModal() then begin
                        Rec.SetView(FilterPageBuilder.GetView(FieldCaptionLbl));
                        GetDataSet(Format(Rec.GetFilter(Date)));
                    end;
                end;
            }
        }
    }



    /*
        views
        {
            view(DateFilter)
            {
                Caption = 'Filter Date';
                Filters = where("Date" = filter('Y'));
                OrderBy = ascending("Line No.");
                SharedLayout = true;
            }
            view(SalesOrder)
            {
                Caption = 'Show Sales Order';
                Filters = where("Document Type" = filter("Sales Order"));
                OrderBy = ascending("Line No.");
                SharedLayout = true;
            }
            view(Invoice)
            {
                Caption = 'Show Invoice';
                Filters = where("Document Type" = filter(Invoice));
                OrderBy = ascending("Line No.");
                SharedLayout = true;
            }
            view(Forecast)
            {
                Caption = 'Show Forecast';
                Filters = where("Document Type" = filter(Forecast));
                OrderBy = ascending("Line No.");
                SharedLayout = true;
            }
        }
    */



    var

        ScanpanMiscellaneous: codeunit ScanpanMiscellaneous;
        TotalAmount: Decimal;
        TotalAmountRV: Decimal;
        TotalQuantity: Decimal;
        LineNo: Integer;
        LastRecFilter: Text;
        LastDateFilter: Text;

    trigger OnInit()
    var
    begin
        //LastRecFilter := Rec.GetFilters;
        LastDateFilter := Rec.GetFilter("Date");
        //GetDataSet(Format(CalcDate('<CM-1M>', Today)));
    end;

    trigger OnAfterGetRecord()
    var

    begin
    end;

    trigger OnAfterGetCurrRecord()
    var
    begin
        /*
        if LastDateFilter <> Rec.GetFilter("Date") then begin
            LastDateFilter := Rec.GetFilter("Date");
            GetDataSet(LastDateFilter)
        end;

        if LastRecFilter <> Rec.GetFilters then begin
            LastRecFilter := Rec.GetFilters();

            UpdateTotals();
        end
        */
    end;

    local procedure GetDataSet(DateRange: Text)
    var
        WindowDialog: Dialog;
        InfoLbl: Label 'Loading data. #1', Comment = '#1 Shows the businessarea being loaded.';
        Step: Integer;

    begin
        Rec.DeleteAll();
        WindowDialog.Open(InfoLbl, Step);
        WindowDialog.Update(1, 'Forecast');
        ScanpanMiscellaneous.CampaignSalesGetSalesForecasts(Rec, DateRange, LineNo);
        WindowDialog.Update(1, 'Salesorder');
        ScanpanMiscellaneous.CampaignSalesGetSalesOrders(Rec, DateRange, LineNo);
        WindowDialog.Update(1, 'Invoice');
        ScanpanMiscellaneous.CampaignSalesGetPostedSalesInvoice(Rec, DateRange, LineNo);
        UpdateTotals();
        WindowDialog.Close();
    end;

    local procedure UpdateTotals()
    begin
        if not Rec.IsEmpty then begin
            Rec.FindFirst();

            TotalQuantity := 0;
            TotalAmount := 0;
            TotalAmountRV := 0;

            repeat
                TotalQuantity += Rec.Quantity;
                TotalAmount += Rec.Amount;
                TotalAmountRV += Rec."Amount(RV)";
            until Rec.Next() = 0;
            Rec.FindFirst();
        end;
        CurrPage.Update(false);
    end;
} 






/// <summary>
/// Page CDOE-MailRecipient_SC (ID 50010).
/// </summary>
page 50010 "CDOE-MailRecipient"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'SCANPAN_CDO E-Mail Recipient';
    PageType = List;
    SourceTable = "CDO E-Mail Recipient";
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Table"; Rec."Table")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Table field.';
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the No. field.';
                }
                field("Document Type"; Rec."Document Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Document Type field.';
                }
                field("Document Code"; Rec."Document Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Document Code field.';
                }
                field("Recipient Type"; Rec."Recipient Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Recipient Type field.';
                }
                field("Contact No."; Rec."Contact No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Contact No. field.';
                }
                field("Contact Name"; Rec."Contact Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Contact Name field.';
                }
                field("Contact Company No."; Rec."Contact Company No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Contact Company No. field.';
                }
                field("Contact E-Mail"; Rec."Contact E-Mail")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Contact E-Mail field.';
                }
                field("E-Mail"; Rec."E-Mail")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the E-Mail field.';
                }
                field("Entry No."; Rec."Entry No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Entry No. field.';
                }
                field("Do not Attach Open Documents"; Rec."Do not Attach Open Documents")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Do not Attach Open Documents field.';
                }
                field("E-Mail Type"; Rec."E-Mail Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the E-Mail Type field.';
                }
                field("Customer Name"; Rec."Customer Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer Name field.';
                }
                field(Address1; Address1)
                {
                    Caption = 'Address1';
                    ToolTip = 'Specifies the value of the Address1 field.';
                }
                field(Address2; Address2)
                {
                    Caption = 'Address2';
                    ToolTip = 'Specifies the value of the Address2 field.';
                }
                field(CountryRegion; CountryRegion)
                {
                    Caption = 'Country/Region';
                    ToolTip = 'Specifies the value of the Country/Region field.';
                }
                field(City; City)
                {
                    Caption = 'City';
                    ToolTip = 'Specifies the value of the City field.';
                }
                field(PostNo; PostCode)
                {
                    Caption = 'Post Code';
                    ToolTip = 'Specifies the value of the Postnumber field.';
                }
                field("Customer Country/Region Code"; Rec."Customer Country/Region Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer Country/Region Code field.';
                }
                field("Customer SalesPerson"; Rec."Customer SalesPerson")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer SalesPerson Code field.';
                }
                field(LanguageCode; LanguageCode)
                {
                    Caption = 'Language Code';
                    ToolTip = 'Specifies the Language Code from the Customer.';
                }
            }
        }
    }

    var
        Address1: Text[100];
        Address2: Text[100];

        CountryRegion: Text[100];
        City: Text[100];
        PostCode: Text[100];

        Customer: Record Customer;
        LanguageCode: text[20];

    trigger OnAfterGetRecord()
    var

    begin
        Address1 := '';
        Address2 := '';
        CountryRegion := '';
        City := '';
        PostCode := '';
        LanguageCode := '';
        if Customer.Get(Rec."No.") then begin
            LanguageCode := Customer."Language Code";

            Address1 := Customer.Address;
            Address2 := Customer."Address 2";
            CountryRegion := Customer."Country/Region Code";
            City := Customer.City;
            PostCode := Customer."Post Code";
        end;


    end;





}
 
/// <summary>
/// Page SCANPAN Create Item Barcode (ID 50000).
/// </summary>
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
///
/// </remarks>

page 50000 "CreateMultipleBarcodes"
{
    AdditionalSearchTerms = 'Scanpan, Barcode';
    ApplicationArea = Basic, Suite;
    Caption = 'Create Multiple Item Barcode';
    DeleteAllowed = true;
    Editable = true;
    InsertAllowed = true;
    PageType = List;
    Permissions =
        tabledata BarCodesTmpSC = RIMD,
        tabledata Item = R;
    PromotedActionCategories = 'New,Item,Barcode,Item Reference';
    SourceTable = BarCodesTmpSC;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            group(WhatItem)
            {
                Caption = 'Barcodes';
                field(SelectedItemNo; SelectedItemNo)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Item to assign barcode';
                    TableRelation = item."No.";
                    ToolTip = 'Choose the Item to assign barcodes';

                    trigger OnValidate()
                    var
                        ItemRec: Record Item;
                    begin
                        if ItemRec.get(SelectedItemNo) then ScanpanMiscellaneousCU.fillBarcodeTable(Rec, SelectedItemNo);
                    end;
                }
            }
            repeater(Control1)
            {
                Caption = 'General';
                field("Item No"; "Item No")
                { ToolTip = 'Item No.'; }
                field("Unit of Measure Code"; Rec."Unit of Measure Code")
                { ToolTip = 'Unit of Measure Code.'; }
                field("Num Barcodes"; Rec."Num Barcodes")
                { ToolTip = 'Type Numberic Barcode.'; }
                field("Create Now EAN"; "Create Now EAN")
                { ToolTip = 'Check this to Create EAN code.'; }
                field("Create Now UPC"; "Create Now UPC")
                { ToolTip = 'Check this to Create UPC code.'; }
            }
        }
    }

    actions
    {
        area(Processing)
        {
            action("CreateSelectedBarcode")
            {
                ApplicationArea = all;
                Caption = 'Create Barcodes';
                Image = BarCode;
                ToolTip = 'Creates barcode from selected in the list.';
                trigger OnAction()
                var
                    hasSelected: Boolean;
                begin
                    Rec.SetRange("Create Now EAN", true);
                    if Rec.FindSet() then begin
                        hasSelected := true;
                        repeat
                            ScanpanMiscellaneousCU.CreateUOMBarcode(Rec."Item No", Rec."Unit of Measure Code", true);
                        until Rec.Next() = 0;
                    end;

                    Rec.Reset();
                    Rec.SetRange("Create Now UPC", true);
                    if Rec.FindSet() then begin
                        hasSelected := true;
                        repeat
                            ScanpanMiscellaneousCU.CreateUOMBarcode(Rec."Item No", Rec."Unit of Measure Code", false);
                        until Rec.Next() = 0;
                    end;

                    Rec.Reset();
                    if hasSelected = true then
                        Rec.DeleteAll()
                    else
                        message(Text011Lbl);
                end;
            }
            action("UpdateGTIN")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Update all Items GTIN';
                Image = "Action";
                ToolTip = 'Updates all Items GTIN from Item Reference';

                trigger OnAction()
                var
                    ScanpanMisc: Codeunit ScanpanMiscellaneous;
                begin
                    ScanpanMisc.UpdateAllItemsWithGTIN();
                end;
            }
        }
    }

    var
        ScanpanMiscellaneousCU: Codeunit ScanpanMiscellaneous;
        SelectedItemNo: text[20];
        Text011Lbl: LAbel 'There is no selection to Create.';
}
 



/// <summary>
/// Page DSVAPI (ID 50007).
/// </summary>
/// ///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>
page 50007 DSVAPI
{

    AdditionalSearchTerms = 'Scanpan, DSV, API, DSVAPI, CONTAINER, SHIPMENT, SEA, TRANSPORT';
    UsageCategory = Lists;
    PageType = List;
    ApplicationArea = Basic, Suite;
    Caption = 'DSV API';


    layout
    {

    }

    actions
    {
        area(Processing)
        {
            action("TEST")
            {
                Image = Troubleshoot;
                Caption = 'API Test';
                ToolTip = 'Testing the API.';
                trigger OnAction()
                var
                begin
                    DSVAPI.DSVCreateOrder(0, 'K101118', false);
                end;

            }
        }
    }

    var
        DSVAPI: Codeunit DSVAPI;
} 
/// <summary>
/// Page "ExtSalesCustomerSales" (ID 50024).
/// </summary>
Page 50024 ExtSalesCustomerSales
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Sales Ext Customer Sales';
    DeleteAllowed = false;
    InsertAllowed = false;
    ModifyAllowed = false;
    PageType = ListPart;
    Permissions =
        tabledata Customer = R,
        tabledata "Default Dimension" = R,
        tabledata "Dimension Value" = R;
    SourceTable = Customer;
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            group(filter)
            {
            }
            group(linesrepeater)
            {
                repeater(general)
                {
                    field("No."; Rec."No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Customer No.';
                        Visible = True;
                    }
                    field(Name; Rec.Name)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Customer Name';
                        Visible = True;
                    }
                    field(ChainGroup; Rec.ChainGroup)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Chaingroup';
                        Visible = True;
                    }
                    field("Chain Name"; Rec."Chain Name")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Chain Name';
                        Visible = True;
                    }
                    field(Chain; Rec.Chain)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Chain';
                        Visible = True;
                    }
                    field(SalesCurrMonth; SalesCurrMonth)
                    {
                        Caption = 'Sales Current Month';
                        ApplicationArea = All;
                        BlankNumbers = BlankZero;
                        BlankZero = true;
                        DecimalPlaces = 0;
                        ToolTip = 'Specifies Customer Sales Current Month.';
                        Visible = True;
                    }
                    field(SalesYTD; SalesYTD)
                    {
                        Caption = 'Sales Year-To-Date';
                        ApplicationArea = All;
                        BlankNumbers = BlankZero;
                        BlankZero = true;
                        DecimalPlaces = 0;
                        ToolTip = 'Specifies Customer Sales Year To Date.';
                        Visible = True;
                    }
                }
            }
        }
    }

    var
        //Inspiration
        EndOfCurrentYear: date;
        StartOfCurrentYear: date;
        SalesCurrMonth: Decimal;

        SalesYTD: Decimal;

    trigger OnInit()
    var
    begin
        StartOfCurrentYear := CALCDATE('<-CY>', Today);
        EndOfCurrentYear := CALCDATE('<+CY>', Today);
    end;

    trigger OnAfterGetRecord()
    var
        DefaultDimension: Record "Default Dimension";
        DimensionValue: Record "Dimension Value";

    begin
        if DefaultDimension.Get('18', Rec."No.", 'KÆDE') then begin
            //Rec.Chain := DefaultDimension."Dimension Value Code";
            DimensionValue.Get('KÆDE', DefaultDimension."Dimension Value Code");
            Rec."Chain Name" := CopyStr(DimensionValue.Name, 1, 10);

            //YTD
            Rec.SetFilter("Date Filter", '%1..%2', StartOfCurrentYear, EndOfCurrentYear);
            SalesYTD := CalculateAmtOfSaleLCY();

            //CURR MONTH
            Rec.SETRANGE("Date Filter", CALCDATE('<-CM>', TODAY), CALCDATE('<+CM>', TODAY));
            SalesCurrMonth := CalculateAmtOfSaleLCY();
        end;
    end;

    trigger OnAfterGetCurrRecord()
    var
    begin
        //CurrPage.Update(false);
    end;

    local procedure CalculateAmtOfSaleLCY(): Decimal
    var
        CustLedgerEntry: Record "Cust. Ledger Entry";
        Amt: Decimal;
        i: Integer;
    begin
        with CustLedgerEntry do begin
            SetCurrentKey("Document Type", "Customer No.", "Posting Date");
            SetRange("Customer No.", Rec."No.");
            SetFilter("Posting Date", Rec.GetFilter("Date Filter"));
            for i := 1 to 2 do begin
                case i of
                    1:
                        SetRange("Document Type", "Document Type"::Invoice);
                    2:
                        SetRange("Document Type", "Document Type"::"Credit Memo");
                end;
                CalcSums("Sales (LCY)");
                Amt := Amt + "Sales (LCY)";
            end;
            exit(Amt);
        end;
    end;
} 
/// <summary>
/// Page SCANPANItemListSalesExt (ID 50018).
/// </summary>
///
/// <remarks>
///
///  2023.03.12             Jesper Harder                   0292    Sales Tools Item List Available.
///
/// </remarks>
page 50018 "ExtSalesItemListSC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Sales Ext Item List';
    DeleteAllowed = false;
    InsertAllowed = false;
    ModifyAllowed = false;
    PageType = ListPart;
    Permissions =
        tabledata Item = R,
        tabledata "Item Translation" = R;
    SourceTable = Item;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            group(filters)
            {
                Caption = 'Filter';

                group(filter1)
                {
                    ShowCaption = false;

                    field(FilterItemNo; FilterItemNo)
                    {
                        Caption = 'Item No.';
                        TableRelation = Item."No." where("Inventory Posting Group" = const('INTERN|EKSTERN|BRUND'));
                        ToolTip = 'Set filter on Item No.';
                        trigger OnValidate()
                        var
                        begin
                            SetFilters();
                        end;
                    }
                }
                group(filter2)
                {
                    ShowCaption = false;

                    field(FilterItemProdGroupCode; FilterInventoryPostingGroup)
                    {
                        Caption = 'Item Inventory Posting Group Code';
                        TableRelation = "Inventory Posting Group" where(Code = const('INTERN|EKSTERN|BRUND'));
                        ToolTip = 'Set filter on Inventory Posting Group Code.';
                        trigger OnValidate()
                        var
                        begin
                            SetFilters();
                        end;
                    }
                }
            }
            repeater(General)
            {
                Editable = false;
                field(GTIN; Rec.GTIN)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Global Trade Item Number (GTIN) for the item. For example, the GTIN is used with bar codes to track items, and when sending and receiving documents electronically. The GTIN number typically contains a Universal Product Code (UPC), or European Article Number (EAN).';
                    Visible = false;
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the number of the item.';
                }
                field(Description; ItemTranslation.Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies what you are selling.';
                }
                field("Calculated Available NOTO"; Rec."Calculated Available NOTO")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Calculated Available field.';
                }
                field("Calculated Available Date NOTO"; Rec."Calculated Available Date NOTO")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Calculated Available Date field.';
                }
                field(Inventory; Rec.Inventory)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the total quantity of the item that is currently in inventory at all locations.';
                }
                field("Qty. on Purch. Order"; Rec."Qty. on Purch. Order")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies how many units of the item are inbound on purchase orders, meaning listed on outstanding purchase order lines.';
                }
                field("Qty. on Prod. Order"; Rec."Qty. on Prod. Order")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies how many units of the item are allocated to production orders, meaning listed on outstanding production order lines.';
                }
                field("Qty. on Sales Order"; Rec."Qty. on Sales Order")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies how many units of the item are allocated to sales orders, meaning listed on outstanding sales orders lines.';
                }
                field("Item Brand"; Rec."Item Brand")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item Brand field.';
                }
                field("Gen. Prod. Posting Group"; Rec."Gen. Prod. Posting Group")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the item''s product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.';
                }
                field("Product Line Code"; Rec."Product Line Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Product Line Code field.';
                }
                field("Product Usage"; Rec."Product Usage")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Product Usage field.';
                }
                field("Item Category Code"; Rec."Item Category Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the category that the item belongs to. Item categories also contain any assigned item attributes.';
                }
                field("ABCD Category"; Rec."ABCD Category")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the ABCD Category field.';
                }
            }
        }
    }
    var
        ItemTranslation: Record "Item Translation";
        FilterInventoryPostingGroup: code[20];
        FilterItemNo: code[20];

    trigger OnInit()
    var
    begin
        Rec.FilterGroup(2);
        Rec.SetFilter("Inventory Posting Group", '%1|%2|%3', 'INTERN', 'EKSTERN', 'BRUND');
        Rec.FilterGroup(0);
    end;

    trigger OnOpenPage()
    var
    begin
        Rec.FilterGroup(-1);
        Rec.SetFilter("Gen. Prod. Posting Group", '%1|%2|%3', 'INTERN', 'EKSTERN', 'BRUND');
        Rec.SetCurrentKey("Inventory Posting Group");
        Rec.FilterGroup(0);
        Rec.FindFirst();
    end;

    trigger OnAfterGetRecord()
    var
    begin
        if not ItemTranslation.Get('DAN', Rec."No. 2") then ItemTranslation.Description := Rec.Description;
    end;

    local procedure SetFilters()
    var
    begin
        Rec.SetRange("No.");
        if FilterItemNo <> '' then
            Rec.SetFilter("No.", FilterItemNo);

        Rec.SetRange("Inventory Posting Group");
        if FilterInventoryPostingGroup <> '' then
            Rec.SetFilter("Inventory Posting Group", FilterInventoryPostingGroup);

        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;
}
 
/// <summary>
/// Page SCANPANNotInvoicedSalesSubPage (ID 50014).
/// </summary>
///
/// <remarks>
///
///  2023.03.08                     Jesper Harder               0292               Salesperson Salesorder tools.
///
/// https://community.dynamics.com/business/b/that-nav-guy/posts/style-color
///
/// </remarks>
page 50014 "ExtSalesLinesSC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Sales Ext SalesLines';
    DeleteAllowed = false;
    InsertAllowed = false;
    ModifyAllowed = false;
    PageType = ListPart;
    Permissions =
        tabledata Campaign = R,
        tabledata "Default Dimension" = R,
        tabledata "Dimension Value" = R,
        tabledata ExtSalesLines = RIMD,
        tabledata MapCustomerSalesPerson = R,
        tabledata "Sales Header" = R,
        tabledata "Sales Line" = R,
        tabledata User = R;
    SourceTable = ExtSalesLines;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            group(filter)
            {
                Caption = 'Filter';
                group(filter1)
                {
                    ShowCaption = false;

                    field(ChainGroupFilter; ChainGroupFilter)
                    {
                        Caption = 'Chaingroup Filter';
                        TableRelation = "Dimension Value".Code where("Dimension Code" = const('KÆDE'), "Dimension Value Type" = const(Standard));
                        ToolTip = 'Sets filter on Customer Chaingroup';
                        trigger OnValidate()
                        var
                        begin
                            SetFilterChainGroup();
                        end;
                    }
                }
                group(filter2)
                {
                    ShowCaption = false;
                }
            }
            group(linesrepeater)
            {
                ShowCaption = false;

                repeater(General)
                {
                    Editable = false;

                    field("Line No."; Rec."Line No.")
                    {
                        Caption = 'Line No.';
                        ToolTip = 'Specifies the value of the Line No. field.';
                    }
                    field("SalesLine LineNo"; Rec."SalesLine LineNo")
                    {
                        Caption = 'Salesline Line No.';
                        ToolTip = 'Specifies the value of the Salesline Line No. field.';
                        Visible = false;
                    }
                    field("Sell-to Customer Name"; Rec."Sell-to Customer Name")
                    {
                        ApplicationArea = All;
                        Editable = false;
                        Style = StrongAccent;
                        StyleExpr = StyleSellToCustomerName;
                        ToolTip = 'Specifies the Sales Header Sell-to Customer Name.';
                        Visible = true;
                    }
                    field("Sell-to Customer No."; Rec."Sell-to Customer No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Sell-to Customer No.';
                        Visible = false;
                    }
                    field("Ship-to Name"; SalesHeaderGobal."Ship-to Name")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Sales Header Sell-to Customer Name.';
                        Visible = false;
                    }
                    field("Document No."; Rec."Document No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the document number.';
                        Visible = true;
                    }
                    field("Type"; Rec."Type")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the line type.';
                        Visible = false;
                    }
                    field("No."; Rec."No.")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Item of the record.';
                        Visible = true;
                    }
                    field(Description; Rec.Description)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies a description of the item or service on the line.';
                        Visible = true;
                    }
                    field("Used Campaign NOTO"; Rec."Used Campaign NOTO")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Campaign Code.';
                        Visible = false;
                    }
                    field(CampaignsDescription; CampaignsGlobal.Description)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Campaign Description';
                        Visible = false;
                    }
                    field(Quantity; Rec.Quantity)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the quantity of the sales order line.';
                        Visible = true;
                    }
                    field("Outstanding Quantity"; Rec."Outstanding Quantity")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Outstanding Quantity.';
                        Visible = true;
                    }
                    field("Qty. to Ship"; Rec."Qty. to Ship")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the quantity of items that remain to be shipped.';
                        Visible = false;
                    }
                    field("Quantity Shipped"; Rec."Quantity Shipped")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies how many units of the item on the line have been posted as shipped.';
                        Visible = false;
                    }
                    field("Qty. Shipped Not Invoiced"; Rec."Qty. Shipped Not Invoiced")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the value of the Qty. Shipped Not Invd. (Base) field.';
                        Visible = false;
                    }
                    field("Qty. to Invoice"; Rec."Qty. to Invoice")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the quantity that remains to be invoiced. It is calculated as Quantity - Qty. Invoiced.';
                        Visible = false;
                    }
                    field("Quantity Invoiced"; Rec."Quantity Invoiced")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies how many units of the item on the line have been posted as invoiced.';
                        Visible = false;
                    }
                    field("Line Amount"; Rec."Line Amount")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Line Amount.';
                        Visible = true;
                    }
                    field("Currency Code"; Rec."Currency Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Currency Code.';
                        Visible = false;
                    }
                    field("Salesperson Code"; Rec."Salesperson Code")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Salesperson Code.';
                        Visible = true;
                    }
                    field("Requested Delivery Date"; Rec."Requested Delivery Date")
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies the Requested Delivery Date.';
                        Visible = true;
                    }
                    field("ChainGroup Code"; Rec."ChainGroup Code")
                    {
                        //Visible = false;
                        Caption = 'Chaingroup Code';
                        Importance = Additional;
                        ToolTip = 'Specifies the value of the Chaingroup Code field.';
                        Visible = false;
                    }
                    field("ChainGroup Name"; Rec."ChainGroup Name")
                    {
                        Caption = 'Chaingroup Name';
                        Importance = Standard;
                        ToolTip = 'Specifies the value of the Chaingroup Name field.';
                        Visible = false;
                    }
                }
            }
            group(Details)
            {
                Caption = 'Sales Details';

                group(CustomerDetails)
                {
                    Caption = 'Customer Order Details';
                    ShowCaption = false;

                    field(SellToCustomerName; SellToCustomerName)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sell-To Customer Name';
                        Importance = Standard;
                        ToolTip = 'Shows selected line Sell-To Customer Name.';
                    }
                    field(ShipToName; ShipToName)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Ship-To Name';
                        Editable = false;
                        Importance = Additional;
                        ToolTip = 'Shows selected line Ship-To Name.';
                    }
                    field(DocumentNo; DocumentNoGlobal)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Order No.';
                        Editable = false;
                        Importance = Additional;
                        ToolTip = 'Shows selected line Order No.';
                    }
                }
                group(AmountStats)
                {
                    ShowCaption = false;

                    field(SalesTotal; SalesTotal)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sales Total';
                        Editable = false;
                        Importance = Additional;
                        ToolTip = 'Shows Total Sales Amount.';
                    }
                    field(CustomerTotal; CustomerTotal)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Customer Total';
                        Editable = false;
                        Importance = Additional;
                        ToolTip = 'Shows Customer Total of selected Customer No.';
                    }
                    field(OrderTotal; OrderTotal)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Order Total';
                        Editable = false;
                        Importance = Standard;
                        ToolTip = 'Shows Order Total of selected Order No.';
                    }
                }
            }
        }
    }
    /*
    actions
    {
        area(Processing)
        {
            action(ToggleInvNotShpd)
            {
                Caption = 'Show Shipped Not Invoiced';
                ToolTip = 'Toggles lines with Shipped not Invoiced.';
                trigger OnAction()
                var
                begin
                    ToggleShippedNotInvoiced := Not ToggleShippedNotInvoiced;
                    ToggleNotInvoicedQty(ToggleShippedNotInvoiced);
                end;
            }
        }
    }
    */
    var

        CampaignsGlobal: Record Campaign;

        SalesHeaderGobal: Record "Sales Header";
        StyleSellToCustomerName: Boolean;

        DocumentNoGlobal: Code[20];
        CustomerTotal: Decimal;
        OrderTotal: Decimal;
        SalesTotal: Decimal;

        ChainGroupFilter: Text;
        SellToCustomerName: Text;
        ShipToName: Text;

    trigger OnInit()
    var

    begin
        FillSalesLines(Rec);
        SalesTotal := GetSalesTotal();
    end;

    trigger OnAfterGetRecord()
    var

    begin
        StyleSellToCustomerName := Rec.SetStyleExpr;
    end;

    trigger OnAfterGetCurrRecord()
    var
        SalesHeader: Record "Sales Header";
    begin
        DocumentNoGlobal := Rec."Document No.";
        OrderTotal := GetOrderTotal(Rec."Document No.");
        CustomerTotal := GetCustomerTotal(Rec."Sell-to Customer No.");

        SellToCustomerName := '';
        ShipToName := '';
        if SalesHeader.Get(SalesHeader."Document Type"::Order, Rec."Document No.") then begin
            SellToCustomerName := SalesHeader."Sell-to Customer Name";
            ShipToName := SalesHeader."Ship-to Name";
        end;
    end;

    /// <summary>
    /// UpdateLines.
    /// </summary>
    /// <param name="ToggleNotInvoicedQtyBoolean">Boolean.</param>
    procedure ToggleNotInvoicedQty(ToggleNotInvoicedQtyBoolean: Boolean)
    var
    begin
        Rec.SetRange("Qty. Shipped Not Invoiced");
        if ToggleNotInvoicedQtyBoolean then Rec.SetFilter("Qty. Shipped Not Invoiced", '<>0');
        CurrPage.Update();
    end;

    local procedure FillSalesLines(var RecExtSalesLines: Record ExtSalesLines)
    var
        User: Record User;
        MapCustomerSalesPerson: Record MapCustomerSalesPerson;

        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";

        DefaultDimension: Record "Default Dimension";
        DimensionValue: Record "Dimension Value";
        Campaigns: Record Campaign;
        LineNo: Integer;
        SalesPersonFilter: Text;
        SalesPersonFilterShowAll: Boolean;
        NewSalesOrder: code[20];
    begin
        NewSalesOrder := '';
        User.Get(UserSecurityId());
        MapCustomerSalesPerson.SetFilter(UserName, User."User Name");
        SalesPersonFilterShowAll := false;
        if MapCustomerSalesPerson.FindSet() then begin
            repeat
                if MapCustomerSalesPerson.ShowAllCustomers then SalesPersonFilterShowAll := true;
                if MapCustomerSalesPerson.CustomerSalesCode <> '' then SalesPersonFilter += MapCustomerSalesPerson.CustomerSalesCode + '|';
            until MapCustomerSalesPerson.Next() = 0;
            if SalesPersonFilter <> '' then SalesPersonFilter := Format(SalesPersonFilter, StrLen(SalesPersonFilter) - 1);
            SalesHeader.SetFilter("Salesperson Code", SalesPersonFilter);
            if SalesPersonFilterShowAll then SalesHeader.SetRange("Salesperson Code");
        end else
            Exit;

        SalesHeader.SetFilter("Document Type", '%1', SalesHeader."Document Type"::Order);
        SalesLine.SetFilter("Document Type", '%1', SalesLine."Document Type"::Order);
        SalesLine.SetFilter(Type, '%1|%2', SalesLine.Type::Item, SalesLine.Type::"G/L Account");

        if SalesHeader.FindSet() then begin
            repeat
                SalesLine.SetFilter("Document No.", SalesHeader."No.");
                if NewSalesOrder <> SalesHeader."No." then begin
                    NewSalesOrder := SalesHeader."No.";
                    RecExtSalesLines.Init();
                    LineNo += 1;
                    RecExtSalesLines."Line No." := LineNo;
                    RecExtSalesLines."Sell-to Customer Name" := SalesHeader."Sell-to Customer Name";
                    RecExtSalesLines.SetStyleExpr := true;
                    if RecExtSalesLines.Insert() then;
                end;
                if SalesLine.FindSet() then
                    repeat
                        RecExtSalesLines.Init();
                        LineNo += 1;
                        RecExtSalesLines."Line No." := LineNo;
                        RecExtSalesLines."Sell-to Customer Name" := SalesHeader."Sell-to Customer Name";
                        RecExtSalesLines."Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                        RecExtSalesLines."Ship-to Name" := SalesHeader."Ship-to Name";
                        RecExtSalesLines."Document No." := SalesHeader."No.";
                        RecExtSalesLines."SalesLine LineNo" := SalesLine."Line No.";
                        RecExtSalesLines."Type" := Format(SalesLine."Type");
                        RecExtSalesLines."No." := SalesLine."No.";
                        RecExtSalesLines.Description := SalesLine.Description;
                        RecExtSalesLines."Used Campaign NOTO" := SalesLine."Used Campaign NOTO";
                        if Campaigns.get(SalesLine."Used Campaign NOTO") then RecExtSalesLines.CampaignsDescription := Campaigns.Description;
                        RecExtSalesLines.Quantity := SalesLine.Quantity;
                        RecExtSalesLines."Outstanding Quantity" := SalesLine."Outstanding Qty. (Base)";
                        RecExtSalesLines."Qty. to Ship" := SalesLine."Qty. to Ship (Base)";
                        RecExtSalesLines."Quantity Shipped" := SalesLine."Qty. Shipped (Base)";
                        RecExtSalesLines."Qty. Shipped Not Invoiced" := SalesLine."Qty. Shipped Not Invoiced";
                        RecExtSalesLines."Qty. to Invoice" := SalesLine."Qty. to Invoice (Base)";
                        RecExtSalesLines."Quantity Invoiced" := SalesLine."Qty. Invoiced (Base)";
                        RecExtSalesLines."Line Amount" := SalesLine.Amount;
                        RecExtSalesLines."Currency Code" := SalesLine."Currency Code";
                        RecExtSalesLines."Salesperson Code" := SalesHeader."Salesperson Code";
                        RecExtSalesLines."Requested Delivery Date" := SalesLine."Requested Delivery Date";

                        //Customers.Get(SalesHeader."Sell-to Customer No.");
                        if DefaultDimension.Get('18', SalesHeader."Sell-to Customer No.", 'KÆDE') then begin
                            RecExtSalesLines."ChainGroup Code" := DefaultDimension."Dimension Value Code";
                            DimensionValue.Get('KÆDE', DefaultDimension."Dimension Value Code");
                            RecExtSalesLines."ChainGroup Name" := DimensionValue.Name;
                        end;

                        if RecExtSalesLines.Insert() then;
                    until SalesLine.Next() = 0;
            until SalesHeader.Next() = 0;
            RecExtSalesLines.SetCurrentKey("Sell-to Customer No.", "Document No.", "No.");
            if RecExtSalesLines.FindFirst() then;
        end;
    end;

    local procedure GetCustomerTotal(SellToCustomerNo: code[20]): Decimal;
    var
        ExtSalesLines: Record ExtSalesLines;
        Totals: Decimal;
    begin
        ExtSalesLines.Copy(Rec, true);
        ExtSalesLines.Reset();
        ExtSalesLines.SetFilter("Sell-to Customer No.", SellToCustomerNo);
        if ExtSalesLines.FindSet() then
            repeat
                Totals += ExtSalesLines."Line Amount";
            until ExtSalesLines.Next() = 0;
        exit(Totals);
    end;

    local procedure GetOrderTotal(DocumentNoOrderTotal: code[20]): Decimal;
    var
        ExtSalesLines: Record ExtSalesLines;
        Totals: Decimal;
    begin
        ExtSalesLines.Copy(Rec, true);
        ExtSalesLines.Reset();
        ExtSalesLines.SetFilter("Document No.", DocumentNoOrderTotal);
        if ExtSalesLines.FindSet() then
            repeat
                Totals += ExtSalesLines."Line Amount";
            until ExtSalesLines.Next() = 0;

        exit(Totals);
    end;

    local procedure GetSalesTotal(): Decimal;
    var
        ExtSalesLines: Record ExtSalesLines;
        Totals: Decimal;
    begin
        ExtSalesLines.Copy(Rec, true);
        ExtSalesLines.Reset();
        if ExtSalesLines.FindSet() then
            repeat
                Totals += ExtSalesLines."Line Amount";
            until ExtSalesLines.Next() = 0;

        exit(Totals);
    end;

    local procedure SetFilterChainGroup()
    var
    begin
        Rec.SetFilter("ChainGroup Code", ChainGroupFilter);
        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;
}
 




/// <summary>
/// Page SCANPANMapSalesPerson (ID 50015).
/// </summary>
/// 
/// <remarks>
/// 
///  2023.03.08                 Jesper Harder               0292        Adgang til Salgslinjeværktøj Eksterne Sælgere
/// 
/// </remarks>  

page 50015 "ExtSalesMapSalespersonSC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Sales Ext Map Salesperson';
    PageType = List;
    Permissions =
        tabledata MapCustomerSalesPerson = RIMD;
    SourceTable = MapCustomerSalesPerson;
    UsageCategory = Administration;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field(UserName; Rec.UserName)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the User Name in Business Central.';
                }
                field(CustomerSalesCode; Rec.CustomerSalesCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer Sales Code field.';
                }
                field(ShowAllCustomers; Rec.ShowAllCustomers)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Show All Customers field.';
                }
            }
        }
    }

}


 
/// <summary>
/// Page FieldPage (ID 50004).
/// </summary>
/// <remarks>
///
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
///
/// </remarks>

page 50004 "FieldPage"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Fieldpage';
    PageType = List;
    Permissions =
        tabledata Field = RIMD;
    SourceTable = Field;
    UsageCategory = Administration;

    layout
    {
        area(Content)
        {
            repeater("fields")
            {
                field("No."; Rec."No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the ID number of the field in the table.';
                }
                field("Field Caption"; Rec."Field Caption")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the caption of the field, that is, the name that will be shown in the user interface.';
                }
            }
        }
    }
} 




/// <summary>
/// Page "SCANPANIICTracking" (ID 50022).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.22                        Jesper Harder                           012     IIC tracking Norway Denmark.
/// 
/// </remarks>      
/// 

page 50022 "IICTracking_BC"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Inter Company Infomation Tracking';
    PageType = List;
    UsageCategory = Lists;
    ApplicationArea = Basic, Suite;
    SourceTable = IICTrackingTmpSC;

    DeleteAllowed = false;
    InsertAllowed = false;
    Editable = false;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Line No."; Rec."Line No.")
                {
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field(Company; Rec.Company)
                {
                    ToolTip = 'Specifies the value of the Company Name field.';
                }
                field("Invoice No."; Rec."Invoice No.")
                {
                    ToolTip = 'Specifies the value of the Invoice No. (NO) field.';
                }
                field("Sell-to Customer No."; Rec."Sell-to Customer No.")
                {
                    ToolTip = 'Specifies the value of the Sell-to Customer No. (NO) field.';
                }
                field("Sell-To Customer Name (NO)"; Rec."Sell-To Customer Name (NO)")
                {
                    ToolTip = 'Specifies the value of the Sell-To Customer Name (NO) field.';
                }
                field("Sales Shipment No. (NO)"; Rec."Sales Shipment No. (NO)")
                {
                    ToolTip = 'Specifies the value of the Sales Shipment No. (NO) field.';
                }
                field("Purchase Order No."; Rec."Purchase Order No.")
                {
                    ToolTip = 'Specifies the value of the Purchase Order No. (NO) field.';
                }
                field("Sales Shipment No. (DK)"; Rec."Sales Shipment No. (DK)")
                {
                    ToolTip = 'Specifies the value of the Sales Shipment No. (DK) field.';
                }
                field("Sales Ship Posting Date (DK)"; Rec."Sales Ship Posting Date (DK)")
                {
                    ToolTip = 'Specifies the value of the Sales Shipment Posting Date (DK) field.';
                }
            }
        }
    }

    var


    trigger OnInit()
    var
    begin
        FillTable(Rec);
    end;




    local procedure FillTable(var RecIICTrackingTmpSC: Record IICTrackingTmpSC)
    var
        SalesInvoiceHeaderNO: Record "Sales Invoice Header";
        SalesShipmentHeaderNO: Record "Sales Shipment Header";
        SalesShipmentLineNO: Record "Sales Shipment Line";

        SalesInvoiceHeaderDK: Record "Sales Invoice Header";
        SalesShipmentHeaderDK: Record "Sales Shipment Header";
        SalesShipmentLineDK: Record "Sales Shipment Line";



        LineNo: Integer;
        CompanyNameNO: text[50];
        CompanyNameDK: text[50];
    begin
        CompanyNameNO := 'SCANPAN Norge';
        SalesInvoiceHeaderNO.ChangeCompany(CompanyNameNO);
        SalesShipmentHeaderNO.ChangeCompany(CompanyNameNO);
        SalesShipmentLineNO.ChangeCompany(CompanyNameNO);

        CompanyNameDK := 'SCANPAN Danmark';
        SalesInvoiceHeaderDK.ChangeCompany(CompanyNameDK);
        SalesShipmentHeaderDK.ChangeCompany(CompanyNameDK);
        SalesShipmentLineDK.ChangeCompany(CompanyNameDK);

        SalesInvoiceHeaderNO.SetAscending("No.", false);
        SalesInvoiceHeaderNO.FindSet();
        repeat
            SalesShipmentHeaderNO.SetFilter("Order No.", SalesInvoiceHeaderNO."Order No.");
            SalesShipmentHeaderNO.FindSet();
            repeat
                RecIICTrackingTmpSC.Init();
                LineNo += 1;
                RecIICTrackingTmpSC."Line No." := LineNo;
                RecIICTrackingTmpSC.Company := CopyStr(SalesInvoiceHeaderNO.CurrentCompany, 1, 50);
                RecIICTrackingTmpSC."Invoice No." := SalesInvoiceHeaderNO."No.";
                RecIICTrackingTmpSC."Sell-to Customer No." := SalesInvoiceHeaderNO."Sell-to Customer No.";
                RecIICTrackingTmpSC."Sell-To Customer Name (NO)" := SalesInvoiceHeaderNO."Sell-to Customer Name";

                RecIICTrackingTmpSC."Sales Shipment No. (NO)" := SalesShipmentHeaderNO."No.";
                SalesShipmentLineNO.SetFilter("Document No.", SalesShipmentHeaderNO."No.");
                SalesShipmentLineNO.FindFirst();
                RecIICTrackingTmpSC."Purchase Order No." := SalesShipmentLineNO."Purchase Order No.";

                SalesShipmentHeaderDK.SetFilter("External Document No.", RecIICTrackingTmpSC."Purchase Order No.");
                if SalesShipmentHeaderDK.FindFirst() then begin
                    RecIICTrackingTmpSC."Sales Shipment No. (DK)" := SalesShipmentHeaderDK."No.";
                    RecIICTrackingTmpSC."Sales Ship Posting Date (DK)" := SalesShipmentHeaderDK."Posting Date";
                end;

                If RecIICTrackingTmpSC.Insert() then;
            until SalesShipmentHeaderNO.Next() = 0;
        until SalesInvoiceHeaderNO.Next() = 0;
        If RecIICTrackingTmpSC.FindFirst() then;
    end;
}
 





/// <summary>
/// Page InventoryJournalShelfSC (ID 50026).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
/// 
/// </remarks>
page 50026 "InventoryJournalStatusSC"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Inventory Journal Status';
    ApplicationArea = All;
    PageType = Worksheet;
    SourceTable = InventoryJournalStatus;
    SourceTableView = sorting("Ressource ID", "Shelf No.", "Item No.");
    UsageCategory = Lists;

    Editable = true;


    layout
    {

        area(Content)
        {
            group(filter1)
            {
                ShowCaption = false;

                field(JournalBatchName; JournalBatchName)
                {
                    Caption = 'Journal Batch Name';
                    ApplicationArea = all;
                    ToolTip = 'Specifies the name of the journal batch, a personalized journal layout, that the journal is based on.';


                    //Item Journal Batch
                    trigger OnDrillDown()
                    var
                        ItemJournalBatch: Record "Item Journal Batch";
                    begin
                        if EmptyWorksheetYesNo() then begin

                            if Page.Runmodal(page::"Item Journal Batches", ItemJournalBatch) = Action::LookupOK then
                                JournalBatchName := ItemJournalBatch.Name;
                            ScanpanMiscellaneous.InventoryJournalFillITable(Rec, JournalBatchName);
                            CurrPage.Update(false);
                        end;
                    end;

                    trigger OnValidate()
                    var
                    begin
                        if EmptyWorksheetYesNo() then ScanpanMiscellaneous.InventoryJournalFillITable(Rec, JournalBatchName);
                        CurrPage.Update(false);
                    end;
                }
                field(RessourceID; RessourceID)
                {
                    Caption = 'Ressource ID';
                    ToolTip = 'Name of the ressource assigned to the task.';
                    ApplicationArea = all;

                    trigger OnDrillDown()
                    var
                        InventoryJournalStatus: Record InventoryJournalStatus;
                        InventoryRessource: Record InventoryRessourceID;
                        LastID: Text[30];
                    begin
                        InventoryJournalStatus.FindSet();
                        if InventoryRessource.Insert() then;
                        repeat
                            InventoryRessource.Init();
                            if LastID <> InventoryJournalStatus."Ressource ID" then
                                InventoryRessource."Ressouce ID" := InventoryJournalStatus."Ressource ID";
                            LastID := InventoryRessource."Ressouce ID";
                            if InventoryRessource.Insert() then;
                        until InventoryJournalStatus.Next() = 0;

                        IF PAGE.RUNMODAL(page::InventoryRessources, InventoryRessource) = ACTION::LookupOK THEN
                            RessourceID := InventoryRessource."Ressouce ID";
                        Setfilters();
                    end;

                    trigger OnValidate()
                    begin
                        Setfilters();
                    end;


                }
            }
            repeater(control1)
            {
                field("Line No."; Rec."Line No.")
                {
                    Visible = false;
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Line No. field.';

                }
                field("Ressource ID"; Rec."Ressource ID")
                {
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Ressource ID field.';
                }
                field("Shelf No."; Rec."Shelf No.")
                {
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Shelf No. field.';
                }
                field("Item No."; Rec."Item No.")
                {
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item No. field.';
                }
                field("Item Description"; Rec."Item Description")
                {
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item Description field.';
                }
                field("Inventory Journal ID"; Rec."Inventory Journal ID")
                {
                    Visible = false;
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Inventory Journal ID field.';
                }
                field("Reported Quatity"; Rec."Reported Quatity")
                {
                    Editable = true;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Reported Quantity field.';
                    trigger OnValidate()
                    var
                    begin
                        CalcInventorySums(Rec."Item No.");
                    end;
                }
                field("Base Quantity"; Rec."Base Quantity")
                {
                    Editable = false;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Base Quantity field.';
                }
                field("Difference Quatity"; Rec."Difference Quatity")
                {
                    Editable = false;
                    Style = Attention;
                    StyleExpr = ToggleDifferenceQuatity;
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Difference Quantity field.';

                }
            }
        }

    }
    actions
    {
        area(Navigation)
        {
        }

        area(Processing)
        {
            action(UpdateRessourceMap)
            {
                Caption = 'Update Ressource Shelf Map';
                ToolTip = 'Update the ressource shelfs mappings.';
                ApplicationArea = Basic, Suite;

                Image = InventoryCalculation;
                RunObject = Page InventoryMapShelfNoSC;
            }
            action("Transfer Result")
            {
                Caption = 'Transfer Status Result';
                ToolTip = 'Transfers the complete results from Inventory Status.';
                ApplicationArea = Basic, Suite;
                Image = Warning;
                trigger OnAction()
                begin
                    ScanpanMiscellaneous.InventoryJournalWriteBack(Rec, JournalBatchName);
                end;
            }

        }

    }

    var

        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        ToggleDifferenceQuatity: Boolean;
        //ItemJnlMgtCodeUnit: Codeunit ItemJnlManagement;
        //ItemJournalBatchRec: Record "Item Journal Batch";
        JournalBatchName: Code[10];
        RessourceID: Text[20];

    trigger OnInit()
    var

    begin
    end;

    trigger OnOpenPage()
    var
    begin
        if not Rec.IsEmpty then begin
            Rec.FindFirst();
            JournalBatchName := CopyStr(Rec."Inventory Journal ID", 1, 10);
        end;
        if Rec.FindFirst() then;
    end;

    trigger OnAfterGetRecord()
    begin
        ToggleDifferenceQuatity := false;
        if Rec."Difference Quatity" <> "Base Quantity" then
            ToggleDifferenceQuatity := true;
    end;

    trigger OnAfterGetCurrRecord()
    begin
        ToggleDifferenceQuatity := false;
        if Rec."Difference Quatity" <> "Base Quantity" then
            ToggleDifferenceQuatity := true;

    end;










    local procedure Setfilters()
    var
    begin
        Rec.SetRange("Ressource ID");
        if RessourceID <> '' then Rec.SetFilter("Ressource ID", RessourceID);
        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;



    local procedure CalcInventorySums(ItemNo: code[20]);
    var
        InventoryJournalStatus: Record InventoryJournalStatus;
        SaveView: Text;
        GotoLine: Integer;
        ReportedSum: Decimal;
    begin
        CurrPage.SaveRecord();
        InventoryJournalStatus.CopyFilters(Rec);
        GotoLine := Rec."Line No.";
        SaveView := Rec.GetView();
        Rec.Reset();
        Rec.SetFilter("Item No.", ItemNo);
        ReportedSum := 0;

        //find sum of all base qty for this linje
        Rec.FindSet();
        repeat
            ReportedSum += Rec."Reported Quatity";
        until Rec.Next() = 0;


        //find add reported sum to base sum to sum of all base qty for this linje
        Rec.Reset();
        Rec.SetFilter("Item No.", ItemNo);
        Rec.FindSet();
        repeat
            Rec."Difference Quatity" := ReportedSum - Rec."Base Quantity";
            Rec.Modify();
        until Rec.Next() = 0;
        //Rec.SetRange("Item No.");
        Rec.CopyFilters(InventoryJournalStatus);
        Rec.SetView(SaveView);
        Rec.Get(GotoLine);
        CurrPage.Update(false);

    end;


    local procedure EmptyWorksheetYesNo(): Boolean
    var
        Answer: Boolean;
        Text000Lbl: Label 'This will reset the worksheet. Are you sure?';
        Question: Text;
    begin
        Question := Text000Lbl;
        Answer := Dialog.Confirm(Question, false);
        Exit(Answer);
    end;
}

 
/// <summary>
/// Page InventoryStatusSC (ID 50025).
/// </summary>
///
/// <remarks>
///
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
///
/// </remarks>
page 50025 "InventoryMapShelfNoSC"
{
    AdditionalSearchTerms = 'Scanpan';
    UsageCategory = Lists;
    ApplicationArea = Basic, Suite;
    Caption = 'Inventory Map Shelf No.';
    PageType = List;
    SourceTable = InventoryMapShelfSC;
    //UsageCategory = Lists;

    Editable = true;
    Permissions =
        tabledata InventoryMapShelfSC = RIMD;

    layout
    {
        area(Content)
        {
            repeater(control1)
            {
                field("Ressource Name"; Rec."Ressource Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Ressouce Name field.';
                }
                field("Shelf No."; Rec."Shelf No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Shelf No. field.';
                }
            }
        }
    }
} 





/// <summary>
/// Page InventoryRessources (ID 50027).
/// </summary>
/// <remarks>
/// 
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
/// 
/// </remarks>
page 50027 "InventoryRessources"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Inventory Ressources';
    //UsageCategory = Lists;
    Editable = false;
    //ApplicationArea = All;
    PageType = List;
    Permissions =
        tabledata InventoryRessourceID = R;
    SourceTable = InventoryRessourceID;
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            repeater(control1)
            {
                field("Ressouce ID"; Rec."Ressouce ID")
                {
                    ToolTip = 'Specifies the value of the Ressource ID field.';
                }
            }
        }
    }

} 
page 50055 "Item Stock Overview"
{
    PageType = List;
    SourceTable = Item;
    //ApplicationArea = All;

    layout
    {
        area(content)
        {
            repeater(Group)
            {
                field("Item No."; Rec."No.")
                {
                    ApplicationArea = All;
                }
                field("Description"; Rec.Description)
                {
                    ApplicationArea = All;
                }
                field("Quantity on Stock"; Rec."Inventory")
                {
                    ApplicationArea = All;
                }
                field("Sales Impact (Next 365 Days)"; GetSalesImpact("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Sales Impact';
                }
                field("Purchase Impact (Next 365 Days)"; GetPurchaseImpact("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Purchase Impact';
                }
                field("Transfer Impact (Next 365 Days)"; GetTransferImpact("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Transfer Impact';
                }
                field("Production Consumption (Next 365 Days)"; GetProductionConsumptionImpact("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Production Consumption';
                }
                field("Production Output (Next 365 Days)"; GetProductionOutputImpact("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Production Output';
                }
                field("Lowest Quantity (Next 365 Days)"; GetLowestQuantity("No."))
                {
                    ApplicationArea = All;
                    Caption = 'Lowest Quantity';
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            action(CalculateLowestQty)
            {
                Caption = 'Calculate Lowest Quantity';
                ToolTip = 'Calculate the lowest quantity based on sales, purchase, transfer orders, and production for the next 365 days.';
                ApplicationArea = All;
                trigger OnAction()
                begin
                    // Refresh the page and recalculate for all items
                    CurrPage.Update();
                end;
            }
        }
    }

    var
        CalculateOnLocation: Code[20];
        StartDate: Date;
        EndDate: Date;
        DaysToCalculate: Integer;

    trigger OnOpenPage()
    var
    begin
        //Rec.SetRange("Gen. Prod. Posting Group", 'INTERN');
        InitiateVariables();

    end;


    procedure InitiateVariables()
    begin
        CalculateOnLocation := 'AUNING';
        Rec.SetRange("Location Filter", CalculateOnLocation);

        DaysToCalculate := 365;
        StartDate := Today();
        EndDate := CalcDate('+' + Format(DaysToCalculate) + 'D', StartDate);


    end;

    procedure GetLowestQuantity(ItemNo: Code[20]): Decimal;
    var
        CurrentQuantity: Decimal;
    begin
        // Start with the current quantity on stock and apply adjustments
        CurrentQuantity := Rec.Inventory;

        // Apply all impacts from sales, purchases, transfers, production consumption, and production output
        CurrentQuantity := CurrentQuantity +
                            GetPurchaseImpact(ItemNo) +
                            GetTransferImpact(ItemNo) -
                            GetProductionConsumptionImpact(ItemNo) +
                            GetProductionOutputImpact(ItemNo) -
                            GetSalesImpact(ItemNo);

        exit(CurrentQuantity);
    end;

    procedure GetSalesImpact(ItemNo: Code[20]): Decimal;
    var
        SalesLine: Record "Sales Line";
        SalesImpact: Decimal;
    begin
        SalesImpact := 0;

        SalesLine.SetRange("Location Code", CalculateOnLocation);
        SalesLine.SetRange(Type, SalesLine.Type::Item);
        SalesLine.SetRange("No.", ItemNo);
        SalesLine.SetRange("Shipment Date", 0D, EndDate);
        if SalesLine.FindSet() then
            repeat
                SalesImpact := SalesImpact + SalesLine."Outstanding Quantity";
            until SalesLine.Next() = 0;

        exit(SalesImpact);
    end;

    procedure GetPurchaseImpact(ItemNo: Code[20]): Decimal;
    var
        PurchaseLine: Record "Purchase Line";
        PurchaseImpact: Decimal;
    begin
        PurchaseImpact := 0;

        PurchaseLine.SetRange("Location Code", CalculateOnLocation);
        PurchaseLine.SetRange(Type, PurchaseLine.Type::Item);
        PurchaseLine.SetRange("No.", ItemNo);
        PurchaseLine.SetRange("Expected Receipt Date", StartDate, EndDate);
        if PurchaseLine.FindSet() then
            repeat
                PurchaseImpact := PurchaseImpact + PurchaseLine.Quantity;
            until PurchaseLine.Next() = 0;

        exit(PurchaseImpact);
    end;

    procedure GetTransferImpact(ItemNo: Code[20]): Decimal;
    var
        TransferLine: Record "Transfer Line";
        TransferImpact: Decimal;
    begin
        TransferImpact := 0;

        TransferLine.SetRange("Transfer-to Code", CalculateOnLocation);
        TransferLine.SetRange("Item No.", ItemNo);
        TransferLine.SetRange("Shipment Date", StartDate, EndDate);
        if TransferLine.FindSet() then
            repeat
                TransferImpact := TransferImpact + TransferLine."Outstanding Quantity";
            until TransferLine.Next() = 0;

        exit(TransferImpact);
    end;

    procedure GetProductionConsumptionImpact(ItemNo: Code[20]): Decimal;
    var
        ProdOrderComp: Record "Prod. Order Component";
        ProductionConsumptionImpact: Decimal;
    begin
        exit;
        /*
        ProductionConsumptionImpact := 0;

        ProdOrderComp.SetRange("Item No.", ItemNo);
        ProdOrderComp.SetRange("Expected Consumption Date", StartDate, EndDate);
        if ProdOrderComp.FindSet() then
            repeat
                ProductionConsumptionImpact := ProductionConsumptionImpact + ProdOrderComp."Remaining Quantity";
            until ProdOrderComp.Next() = 0;

        exit(ProductionConsumptionImpact);
        */
    end;

    procedure GetProductionOutputImpact(ItemNo: Code[20]): Decimal;
    var
        ProdOrderLine: Record "Prod. Order Line";
        ProductionOutputImpact: Decimal;
    begin
        ProductionOutputImpact := 0;

        ProdOrderLine.SetRange("Location Code", CalculateOnLocation);
        ProdOrderLine.SetRange("Item No.", ItemNo);
        ProdOrderLine.SetRange("Ending Date", StartDate, EndDate);
        if ProdOrderLine.FindSet() then
            repeat
                ProductionOutputImpact := ProductionOutputImpact + ProdOrderLine."Remaining Quantity";
            until ProdOrderLine.Next() = 0;

        exit(ProductionOutputImpact);
    end;
}
 



page 50057 "Machine Center Selector"
{
    // 057 Page Part - Chart sorting parts
    PageType = List;
    SourceTable = "Machine Center";
    SourceTableView = where("Work Center No." = const('<>MEDARB'));
    Editable = false;
    //    ApplicationArea = All;
    Caption = 'Select a Machine Center';

    layout
    {
        area(content)
        {
            repeater(Group)
            {
                field("No."; Rec."No.")
                {
                    ApplicationArea = All;
                }
                field("Name"; Rec."Name")
                {
                    ApplicationArea = All;
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            action(Select)
            {
                Caption = 'Select';
                ApplicationArea = All;
                Promoted = true;
                PromotedCategory = Process;
                ToolTip = 'Select the chosen Machine Center';
                trigger OnAction()
                begin
                    CurrPage.Close();
                end;
            }
        }
    }
}
 
/// <summary>
/// Page MandatoryFieldSetup (ID 50003).
/// </summary>
/// <remarks>
///
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
///
/// </remarks>
page 50003 MandatoryFieldSetup
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Mandatory Field Setup';
    PageType = List;
    Permissions =
        tabledata MandatoryFieldSetup2 = RIMD;
    SourceTable = MandatoryFieldSetup2;
    UsageCategory = Administration;

    layout
    {
        area(Content)
        {
            group(Controls)
            {
                Caption = 'Controls';
                field(TableType2; EnumTableType)
                {
                    Caption = 'Business Area';
                    ToolTip = 'Selects the Business Area for Mandatory Fields.';

                    trigger OnValidate()
                    begin
                        SetTableTypeFilter();
                        CurrPage.Update();
                    end;
                }
            }
            group(RepeaterGroup)
            {
                Caption = 'Mandatory fields';
                repeater("Repeater")
                {
                    field("Field No."; Rec."Field No.")
                    {
                        ShowMandatory = true;
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Field No. field.';

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            FieldRec: Record Field;
                        begin

                            FieldRec.SetRange(TableNo, Rec."Table No.");
                            if Page.RunModal(Page::FieldPage, FieldRec) = Action::LookupOK then begin
                                Text := Format(FieldRec."No.");
                                exit(true);
                            end;
                        end;
                    }
                    field("Field Name"; Rec."Field Name")
                    {
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Field Name field.';
                    }
                    field("Logical Operator"; Rec."Logical Operator")
                    {
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Logical Operator field.';
                    }
                    field("Field Test"; Rec."Field Test")
                    {
                        Visible = ShowConditionalFields;
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Field Test field.';
                    }
                    field("Conditional Field No."; Rec."Conditional Field No.")
                    {
                        Visible = ShowConditionalFields;
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Conditional Field No. field.';

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            FieldRec: Record Field;
                        begin

                            FieldRec.SetRange(TableNo, Rec."Table No.");
                            if Page.RunModal(Page::FieldPage, FieldRec) = Action::LookupOK then begin
                                Text := Format(FieldRec."No.");
                                exit(true);
                            end;
                        end;

                    }
                    field("Conditional Field Name"; Rec."Conditional Field Name")
                    {
                        Visible = ShowConditionalFields;
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Conditional Field Name field.';
                    }
                    field(Condition; Rec.Condition)
                    {
                        Visible = ShowConditionalFields;
                        ApplicationArea = Basic, Suite;
                        ToolTip = 'Specifies the value of the Condition field.';
                    }

                }
            }
        }
    }
    var
        EnumTableType: Enum EnumTableType;
        ShowConditionalFields: Boolean;

    trigger OnOpenPage()
    begin
        EnumTableType := EnumTableType::Item;
        //if UserId.ToLower() = 'jesperharder' then
        ShowConditionalFields := true;
        SetTableTypeFilter();
    end;

    trigger OnNewRecord(BelowxRec: Boolean)
    begin
        Rec.NewRecord();
    end;

    local procedure SetTableTypeFilter()
    begin
        Rec.FilterGroup := 2;
        Rec.SetRange("Table Type", EnumTableType);
        Rec.FilterGroup := 0;
    end;
} 




/// <summary>
/// Page PhysInventoryJournalReplace (ID 50046).
/// </summary>
/// 2024.01             Jesper Harder       062         Search and replace Inventory Journal<remarks>
/// </remarks>
page 50046 PhysInventoryJournalReplace
{

    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Search and Replace';
    PageType = StandardDialog;
    SourceTable = "Item Journal Line";
    UsageCategory = Tasks;

    layout
    {
        area(Content)
        {
            field(FindValue; FindValue)
            {
                Caption = 'Find Value';
                ToolTip = 'Specifies the value of the Find Value field.';
                Editable = true;
            }
            field(ReplaceValue; ReplaceValue)
            {
                Caption = 'Replace Value';
                ToolTip = 'Specifies the value of the Replace Value field.';
                Editable = true;
            }
        }
    }
    actions
    {
        area(Processing)
        {
            action(ReplaceValues)
            {
                Caption = 'Replace Document No.';
                ToolTip = 'Replaces values.';
                ApplicationArea = Basic, Suite;
                Image = ExecuteBatch;
                //Promoted = true;
                //PromotedCategory = Process;
                trigger OnAction()
                begin
                    ReplaceJournalValues();
                end;
            }
        }
    }
    var
        FindValue: Text;
        ReplaceValue: Text;

    trigger OnQueryClosePage(CloseAction: Action): Boolean;
    begin
        if CloseAction = Action::OK then
            ReplaceJournalValues()
        else
            exit(true);
    end;

    local procedure ReplaceJournalValues()
    var
        ItemJournalLine: Record "Item Journal Line";
        NotFoundMsgLbl: Label 'We could not find Document Number #1################################### for replacement.', Comment = '#1################################### = FindValue variable.';
    begin
        ItemJournalLine.SetFilter("Journal Template Name", Rec."Journal Template Name");
        ItemJournalLine.SetFilter("Journal Batch Name", Rec."Journal Batch Name");
#pragma warning disable AA0210
        ItemJournalLine.SetFilter("Document No.", FindValue);
#pragma warning restore AA0210
        if not ItemJournalLine.FindSet() then
            Error(NotFoundMsgLbl, FindValue);
        ItemJournalLine.ModifyAll("Document No.", ReplaceValue);
    end;
}
 
/// <summary>
/// Page Picture URL Dialog (ID 50001).
/// </summary>
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2022.12.25          Jesper Harder       0193        SOAP Workings by Magnus Harder, great code understanding and icebraker..
///
/// </remarks>
page 50001 "Picture URL Dialog"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Picture URL Dialog';
    //https://yzhums.com/17574/
    PageType = StandardDialog;

    layout
    {
        area(content)
        {
            label("Single Item Image update")
            {
                ApplicationArea = All;
                Caption = 'Single Item Image update';
            }
            field(ItemNo; ItemNo)
            {
                ApplicationArea = All;
                Caption = 'Item No.';
                Editable = false;
                ToolTip = 'Specifies the value of the Item No. field.';
            }
            field(ItemDesc; ItemDesc)
            {
                ApplicationArea = All;
                Caption = 'Item Description';
                Editable = false;
                ToolTip = 'Specifies the value of the Item Description field.';
            }
            field(PictureURL; PictureURL)
            {
                ApplicationArea = All;
                Caption = 'Picture URL';
                ExtendedDatatype = URL;
                ToolTip = 'Specifies the value of the Picture URL field.';
            }
            label("spacer2")
            {
                ApplicationArea = Basic, Suite;
                Caption = '', Locked = true;
            }
            label("Multiple Item Image update")
            {
                ApplicationArea = All;
                Caption = 'Multiple Item Image update';
            }
            field(OverwriteExistingImage; OverwriteExistingImage)
            {
                ApplicationArea = All;
                Caption = 'Overwrite existing Item Picture';
                ToolTip = 'Specifies the value of the Overwrite existing Item Picture field.';
            }
            field(ItemPostingGroup; InventoryPostinGroup)
            {
                ApplicationArea = All;
                Caption = 'Filter on Inventory Posting Group';
                TableRelation = "Inventory Posting Group";
                ToolTip = 'Specifies the value of the Filter on Inventory Posting Group field.';
            }
        }
    }

    var
        PIMimages: Codeunit "PIMimages";
        OverwriteExistingImage: Boolean;
        InventoryPostinGroup: Code[20];
        ItemNo: Code[20];
        PictureURL: Text;
        ItemDesc: Text[100];

    /// <summary>
    /// GetItemImages.
    /// </summary>
    procedure GetItemImages()
    var
    begin
        if PictureURL <> '' then PIMimages.ImportItemPictureFromURL(ItemNo, PictureURL);
        if InventoryPostinGroup <> '' then PIMimages.GetItemImagesFromFilter(InventoryPostinGroup, OverwriteExistingImage);
    end;

    /// <summary>
    /// SetItemInfo.
    /// </summary>
    /// <param name="NewItemNo">Code[20].</param>
    /// <param name="NewItemDesc">Text[100].</param>
    procedure SetItemInfo(NewItemNo: Code[20]; NewItemDesc: Text[100])
    begin
        ItemNo := NewItemNo;
        ItemDesc := NewItemDesc;
    end;
} 



/// <summary>
/// 
/// 2024.06             Jesper Harder       068         Add Page Production BOM Line
/// 
/// </summary>
page 50029 "ProdBomLine"
{
    AdditionalSearchTerms = 'Scanpan,Production';
    ApplicationArea = Basic, Suite;
    Caption = 'Production BOM Line';
    Editable = false;
    PageType = List;

    SourceTable = "Production BOM Line";
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            repeater("fields")
            {

                field("Production BOM No."; Rec."Production BOM No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Production BOM No. field.', Comment = '%';
                }
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Line No. field.', Comment = '%';
                }
                field("Type"; Rec."Type")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the type of production BOM line.';
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the number of the involved entry or record, according to the specified number series.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies a description of the production BOM line.';
                }
                field("Quantity per"; Rec."Quantity per")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies how many units of the component are required to produce the parent item.';
                }
                field("Unit of Measure Code"; Rec."Unit of Measure Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.';
                }
                field("Scrap %"; Rec."Scrap %")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the percentage of the item that you expect to be scrapped in the production process.';
                }
                field("Starting Date"; Rec."Starting Date")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the date from which this production BOM is valid.';
                }
                field("Ending Date"; Rec."Ending Date")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the date from which this production BOM is no longer valid.';
                }
                field(Quantity; Rec.Quantity)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Quantity field.', Comment = '%';
                }
                field("Routing Link Code"; Rec."Routing Link Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the routing link code.';
                }
                field(Comment; Rec.Comment)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Comment field.', Comment = '%';
                }
            }
        }
    }
} 
/// <summary>
/// Page ProdControllingDashboard (ID 50044).
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// 2023.11             Jesper Harder       058         Save Page Settings
/// </remarks>
page 50044 "ProdControllingDashboard"
{

    AdditionalSearchTerms = 'Scanpan, Dashboard, Production, Controlling';
    ApplicationArea = All;
    Caption = 'Production Controlling Dashboard';
    PageType = Card;
    Permissions =
        tabledata UserSettingsPage = RIM;
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            group(Foundry)
            {
                Caption = 'Foundry';
                Visible = VisibleFoundry;

                group(PressAll)
                {
                    Visible = VisiblePressAll;
                    Caption = 'All Presses';
                    usercontrol(AllPresses; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press1)
                {
                    Caption = 'Casting1';
                    Visible = VisiblePress1;
                    usercontrol(ST1; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press2)
                {
                    Caption = 'Casting1';
                    Visible = VisiblePress2;
                    usercontrol(ST2; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press3)
                {
                    Caption = 'Casting3';
                    Visible = VisiblePress3;
                    usercontrol(ST3; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press4)
                {
                    Caption = 'Casting4';
                    Visible = VisiblePress4;
                    usercontrol(ST4; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press5)
                {
                    Caption = 'Casting5';
                    Visible = VisiblePress5;
                    usercontrol(ST5; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press6)
                {
                    Caption = 'Casting6';
                    Visible = VisiblePress6;
                    usercontrol(ST6; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press7)
                {
                    Caption = 'Casting7';
                    Visible = VisiblePress7;
                    usercontrol(ST7; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
                group(Press8)
                {
                    Caption = 'Casting8';
                    Visible = VisiblePress8;
                    usercontrol(ST8; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            RefreshPage();
                        end;
                    }
                }
            }
            group(Processing)
            {
                Caption = 'Processing';
                Visible = VisibleProcessing;

                group(Coating09)
                {
                    Caption = 'Coating1';
                    Visible = Visible09;
                    usercontrol(Machin09; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }

                group(Coating16)
                {
                    Caption = 'Coating2';
                    Visible = Visible16;
                    usercontrol(Machin16; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }


                group(Lathe1)
                {
                    Caption = 'Lathe1';
                    Visible = Visible10;
                    usercontrol(Machin10; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                group(Lathe2)
                {
                    Caption = 'Lathe2';
                    Visible = Visible15;
                    usercontrol(Machin15; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }

                group(Lathe3)
                {
                    Caption = 'Lathe3';
                    Visible = Visible18;
                    usercontrol(Machin18; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }


                group(Polishing1)
                {
                    Caption = 'Polishing';
                    Visible = Visible25;
                    usercontrol(Machin25; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                group(Scrubbing1)
                {
                    Caption = 'Scrubbing';
                    Visible = Visible27;
                    usercontrol(Machin27; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
            }

            group(Packaging)
            {
                Caption = 'Packaging';
                Visible = VisiblePackaging;

                group(RoutePA)
                {
                    Caption = 'Arb.Center f. pakkeri';
                    Visible = VisiblePA;

                    usercontrol(MachinPA; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            // RefreshPage();
                        end;
                    }
                }
                group(RouteNI)
                {
                    Caption = 'Arb.Center f. nittemaskine';
                    Visible = VisibleNI;
                    usercontrol(WorkNI; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                group(RouteSK)
                {
                    Caption = 'Skafte';
                    Visible = VisibleSK;
                    usercontrol(MachinSK; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                    {
                        ApplicationArea = all;
                        trigger AddInReady()
                        begin
                            //PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
            }

            group(Settings)
            {
                Caption = 'Settings';
                group(POrderStatus)
                {
                    Caption = 'Order Status';
                    //"Simulated","Planned","Firm Planned","Released","Finished";
                    field(OrderStatus0; OrderStatus[1])
                    {
                        Caption = 'Simulated';
                        ToolTip = 'Specifies the value of the Simulated field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(OrderStatus1; OrderStatus[2])
                    {
                        Caption = 'Planned';
                        ToolTip = 'Specifies the value of the Planned field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(OrderStatus2; OrderStatus[3])
                    {
                        Caption = 'Firm Planned';
                        ToolTip = 'Specifies the value of the Firm Planned field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(OrderStatus3; OrderStatus[4])
                    {
                        Caption = 'Released';
                        ToolTip = 'Specifies the value of the Released field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(OrderStatus4; OrderStatus[5])
                    {
                        Caption = 'Finished';
                        ToolTip = 'Specifies the value of the Finished field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                group(Types)
                {
                    Caption = 'Chart settings';

                    field(BusinessChartType; BusinessChartType)
                    {
                        Caption = 'Chart Type';
                        ToolTip = 'Specifies the value of the Chart Type field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(ChartDataType; ChartDataType)
                    {
                        Caption = 'Data Type';
                        ToolTip = 'Specifies the value of the Data Type field.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                field(DateFilter; DateFilter)
                {
                    Caption = 'Date Filter';
                    ToolTip = 'Specifies the value of the Date Filter field.';
                    trigger OnValidate()
                    var
                        FilterTxt: Text;
                    begin
                        FilterTxt := DateFilter;
                        FilterTokens.MakeDateFilter(FilterTxt);
                        DateFilter := Format(FilterTxt, 2048);
                        UseCurrentDate := false;
                        PageIsFirstRun := 2;
                        RefreshPage();
                    end;
                }
                field(UseCurrentDate; UseCurrentDate)
                {
                    Caption = 'Use Current Date';
                    ToolTip = 'Specifies the value of the Use Current Date field.';
                    trigger OnValidate()
                    begin
                        DateFilter := Format(Today);
                        PageIsFirstRun := 2;
                        RefreshPage();
                    end;
                }
                field(PeriodFormat; PeriodFormat)
                {
                    Caption = 'Period Format';
                    ToolTip = 'Specifies the value of the PeriodFormat field.';
                    trigger OnValidate()
                    begin
                        PageIsFirstRun := 2;
                        RefreshPage();
                    end;
                }
                field(PeriodLength; PeriodLength)
                {
                    Caption = 'Period Length';
                    ToolTip = 'Specifies the value of the Period Length field.';
                    trigger OnValidate()
                    begin
                        PageIsFirstRun := 2;
                        RefreshPage();
                    end;
                }
            }
            group(demo)
            {
                field(DemoActive; DemoActive)
                {
                    Caption = 'Activates demo functions';
                    ToolTip = 'Specifies the value of the Activates demo functions field.';
                    trigger OnValidate()
                    begin
                        ChartBuilder.TriggerDemoActive(DemoActive);
                        PageIsFirstRun := 2;
                        RefreshPage();
                    end;
                }
            }


            group(FoundryChartSettings)
            {
                Caption = 'FoundryChart Settings';
                group(FoundryChartVisibility)
                {
                    Caption = 'Foundry Chart visibility';

                    field(VisibleFoundry; VisibleFoundry)
                    {
                        Caption = 'Toggle Foundry';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePressAll; VisiblePressAll)
                    {
                        Caption = 'All Presses';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress1; VisiblePress1)
                    {
                        Caption = 'Press 1';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress2; VisiblePress2)
                    {
                        Caption = 'Press 2';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress3; VisiblePress3)
                    {
                        Caption = 'Press 3';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress4; VisiblePress4)
                    {
                        Caption = 'Press 4';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress5; VisiblePress5)
                    {
                        Caption = 'Press 5';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress6; VisiblePress6)
                    {
                        Caption = 'Press 6';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress7; VisiblePress7)
                    {
                        Caption = 'Press 7';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisiblePress8; VisiblePress8)
                    {
                        Caption = 'Press 8';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                }
                group(ProcessingChartVisibility)
                {
                    Caption = 'Processing Chart visibility';
                    //120
                    field(VisibleProcessing; VisibleProcessing)
                    {
                        Caption = 'Toggle Processing';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible09; Visible09)
                    {
                        Caption = 'Coating1';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }

                    field(Visible16; Visible16)
                    {
                        Caption = 'Coating2';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible10; Visible10)
                    {
                        Caption = 'Lathe1';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible15; Visible15)
                    {
                        Caption = 'Lathe2';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible18; Visible18)
                    {
                        Caption = 'Lathe3';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible25; Visible25)
                    {
                        Caption = 'Polishing';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(Visible27; Visible27)
                    {
                        Caption = 'Scrubbing';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }

                }
                group(PackagingChartVisibility)
                {
                    Caption = 'Packaging Chart visibility';
                    field(VisiblePackaging; VisiblePackaging)
                    {
                        Caption = 'Toggle Packaging';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }

                    field(VisiblePA; VisiblePA)
                    {
                        Caption = 'Packaging';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisibleNI; VisibleNI)
                    {
                        Caption = 'Riviting';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }
                    field(VisibleSK; VisibleSK)
                    {
                        Caption = 'Installing Handle';
                        ToolTip = 'Triggers visibility.';
                        trigger OnValidate()
                        begin
                            PageIsFirstRun := 2;
                            RefreshPage();
                        end;
                    }

                }
            }
        }
    }

    actions
    {
        area(Navigation)
        {
            ToolTip = 'Navigate related production areas.';

            group(BuildInAreas)
            {
                Caption = 'Native Tools';
                ToolTip = 'Navigate the Business Central native production tools.';

                action("Firm Planned Prod. Orders")
                {
                    Image = PlannedOrder;
                    Caption = 'Firm Planned Prod. Orders';
                    ToolTip = 'Executes the Firm Planned Prod. Orders action.';
                    RunObject = page "Firm Planned Prod. Orders";
                }
                action("Released Production Orders")
                {
                    Image = PlannedOrder;
                    Caption = 'Released Production Orders';
                    ToolTip = 'Executes the Released Production Orders action.';
                    RunObject = page "Released Production Orders";
                }
                action("Finished Production Orders")
                {
                    Image = Archive;
                    Caption = 'Finished Production Orders';
                    ToolTip = 'Executes the Finished Production Orders action.';
                    RunObject = page "Finished Production Orders";
                }

            }
            group("Controlling")
            {
                Caption = 'Controlling';
                ToolTip = 'Navigate the specialized Controlling tools.';
                action("ProductionControlling ")
                {
                    Image = LinesFromJob;
                    Caption = 'Production Lines';
                    ToolTip = 'Insepct Firmed, Released and Transfer lines.';
                    RunObject = Page ProductionControlling;
                }
                action("ProdControllingRoutingLine")
                {
                    Image = Production;
                    Caption = 'Production Prioritize Routing Line';
                    ToolTip = 'prioritize, comments, and print the list.';
                    RunObject = Page ProdControllingRoutingLine;
                }
                action("ProdControlListRoutingLine")
                {
                    Image = Route;
                    Caption = 'Production List Routing Line';
                    ToolTip = 'View all production routinglines.';
                    RunObject = page ProdControlListRoutingLine;
                }
                group("ControllingSetup")
                {
                    Caption = 'Controlling Setup';
                    ToolTip = 'Establish the prerequisites for Controlling.';
                    action("ProdControllingItemMap")
                    {
                        Image = ProductionSetup;
                        Caption = 'Setup Production Item Map';
                        ToolTip = 'Setup list for listing BoM items with common nametypes.';
                        RunObject = page ProdControllingItemMap;
                    }

                }
            }
        }
        area(Processing)
        { }
        area(Reporting)
        {
            action("ProductionControllingPriority")
            {
                Image = PrintChecklistReport;
                Caption = 'Print Production Priority Report';
                ToolTip = 'Prints production priority report, used at each production ressource.';
                RunObject = report ProductionControllingPriority;
            }

        }
        area(Creation)
        { }
    }

    var
        ChartBuilder: Codeunit "ChartBuilder";
        FilterTokens: Codeunit "Filter Tokens";

        OrderStatus: array[5] of Boolean;

        UseCurrentDate: Boolean;

        BusinessChartType: enum "Business Chart Type";
        CapacityType: Enum "Capacity Type";
        ChartDataType: Enum EnumChartDataType;
        PeriodFormat: Enum "PeriodType";
        PeriodLength: Integer;

        OrderStatusOption: Option "Simulated","Planned","Firm Planned","Released","Finished";

        DateFilter: Text[2048];

        PageIsFirstRun: Integer;
        PageMaxElements: Integer;

        DemoActive: Boolean;

        //110
        VisibleFoundry: Boolean;
        VisiblePressAll: Boolean;
        VisiblePress1: Boolean;
        VisiblePress2: Boolean;
        VisiblePress3: Boolean;
        VisiblePress4: Boolean;
        VisiblePress5: Boolean;
        VisiblePress6: Boolean;
        VisiblePress7: Boolean;
        VisiblePress8: Boolean;

        //120
        VisibleProcessing: Boolean;
        Visible09: Boolean;
        Visible15: Boolean;
        Visible10: Boolean;
        Visible16: Boolean;
        Visible18: Boolean;
        Visible25: Boolean;
        Visible27: Boolean;
        //130
        VisiblePackaging: Boolean;
        VisiblePA: Boolean;
        VisibleSK: Boolean;
        VisibleNI: Boolean;



    trigger OnOpenPage()
    begin
        PageIsFirstRun := 1;
        UserSettings(0);
        CurrPage.Update();
    end;

    trigger OnClosePage()
    begin
        UserSettings(1);
    end;

    local procedure RefreshPage()
    var
        TempBusinessChartBuffer: Record "Business Chart Buffer" temporary;
        c: Integer;
        Dialog: Dialog;
        MessageLbl: label 'Refreshing Charts #1', Comment = '#1 Counter.';
    begin
        if GuiAllowed then Dialog.Open(MessageLbl);
        if (PageIsFirstRun = 1) and (PageMaxElements <> 0) then exit;
        //PageIsFirstRun := 2;
        //
        // 110
        //
        if VisiblePressAll then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P1..P8',
                                     CapacityType::"Machine Center",
                                     TempBusinessChartBuffer,
                                     OrderStatus,
                                     PeriodFormat,
                                     DateFilter,
                                     PeriodLength,
                                     BusinessChartType,
                                     ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.AllPresses);
        end;

        if VisiblePress1 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P1',
                                     CapacityType::"Machine Center",
                                     TempBusinessChartBuffer,
                                     OrderStatus,
                                     PeriodFormat,
                                     DateFilter,
                                     PeriodLength,
                                     BusinessChartType,
                                     ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST1);
        end;

        if VisiblePress2 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P2', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST2);
        end;

        if VisiblePress3 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P3', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST3);
        end;

        if VisiblePress4 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P4', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST4);
        end;

        if VisiblePress5 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P5', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST5);
        end;

        if VisiblePress6 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P6', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST6);
        end;

        if VisiblePress7 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P7', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST7);
        end;

        if VisiblePress8 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('P8', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.ST8);
        end;

        //
        // 120
        //
        if Visible09 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('09', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin09);
        end;

        if Visible15 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);
            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('15', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin15);
        end;

        if Visible10 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('10', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin10);
        end;

        if Visible16 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('16', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin16);
        end;

        if Visible18 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('18', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin18);
        end;

        if Visible25 then begin

            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('25', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin25);
        end;

        if Visible27 then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('27', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.Machin27);
        end;

        //
        // 130
        //
        if VisiblePA then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('PA', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.MachinPA);
        end;

        if VisibleSK then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('SK', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.MachinSK);
        end;

        if VisibleNI then begin
            c += 1;
            if GuiAllowed then Dialog.Update(1, c);

            TempBusinessChartBuffer.DeleteAll();
            ChartBuilder.UpdateProductionChart('NI', CapacityType::"Work Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
            TempBusinessChartBuffer.Update(CurrPage.WorkNI);
        end;
        //
        UserSettings(1);

        CurrPage.Update();
        if GuiAllowed then Dialog.Close();

        PageMaxElements := c;
        PageIsFirstRun := 1;
    end;

    //058     Save Page Settings
    local procedure UserSettings(GetSave: Option Get,Save)
    var
        UserSettingsPage: Record "UserSettingsPage";
        CurrUserID: Text;
    begin
        CurrUserID := Database.UserId;

        UserSettingsPage.Reset();
        UserSettingsPage.SetFilter(UserID, CurrUserID);
        UserSettingsPage.SetFilter(PageID, '50044');

        if UserSettingsPage.IsEmpty then begin
            UserSettingsPage.Init();
            UserSettingsPage."UserID" := Format(CurrUserID, 250);
            UserSettingsPage."PageID" := '50044';
            UserSettingsPage.Integer_2 := OrderStatusOption;
            UserSettingsPage."EnumPeriodFormat" := UserSettingsPage."EnumPeriodFormat"::Week;
            UserSettingsPage."Integer_1" := 12;
            UserSettingsPage."Text50_2" := Format(Today);
            UserSettingsPage."Boolean_1" := true;

            //"Simulated","Planned","Firm Planned","Released","Finished";
            UserSettingsPage.Simulated := OrderStatus[1];
            UserSettingsPage.Planned := OrderStatus[2];
            UserSettingsPage."Firm Planned" := OrderStatus[3];
            UserSettingsPage.Released := OrderStatus[4];
            UserSettingsPage.Finished := OrderStatus[5];

            UserSettingsPage.EnumBusinessChartType := BusinessChartType;
            UserSettingsPage.EnumChartDataType := ChartDataType;

            UserSettingsPage.VisibleFoundry := true;

            UserSettingsPage.ChartVisibilityAll := true;
            UserSettingsPage.ChartVisibility1 := true;
            UserSettingsPage.ChartVisibility2 := true;
            UserSettingsPage.ChartVisibility3 := true;
            UserSettingsPage.ChartVisibility4 := true;
            UserSettingsPage.ChartVisibility5 := true;
            UserSettingsPage.ChartVisibility6 := true;
            UserSettingsPage.ChartVisibility7 := true;
            UserSettingsPage.ChartVisibility8 := true;

            //120
            UserSettingsPage.VisibleProcessing := true;
            UserSettingsPage.Visible09 := true;
            UserSettingsPage.Visible15 := true;
            UserSettingsPage.Visible10 := true;
            UserSettingsPage.Visible16 := true;
            UserSettingsPage.Visible18 := true;
            UserSettingsPage.Visible25 := true;
            UserSettingsPage.Visible27 := true;
            //130
            UserSettingsPage.VisiblePackaging := true;
            UserSettingsPage.VisiblePA := true;
            UserSettingsPage.VisibleSK := true;
            UserSettingsPage.VisibleNI := true;


            UserSettingsPage.Insert();
        end;
        UserSettingsPage.FindFirst();

        if GetSave = GetSave::Get then begin
            OrderStatusOption := UserSettingsPage.Integer_2;
            PeriodFormat := UserSettingsPage."EnumPeriodFormat";
            PeriodLength := UserSettingsPage."Integer_1";
            DateFilter := UserSettingsPage."Text50_2";
            UseCurrentDate := UserSettingsPage."Boolean_1";
            if UseCurrentDate = true then DateFilter := format(Today);

            OrderStatus[1] := UserSettingsPage.Simulated;
            OrderStatus[2] := UserSettingsPage.Planned;
            OrderStatus[3] := UserSettingsPage."Firm Planned";
            OrderStatus[4] := UserSettingsPage.Released;
            OrderStatus[5] := UserSettingsPage.Finished;

            BusinessChartType := UserSettingsPage.EnumBusinessChartType;
            ChartDataType := UserSettingsPage.EnumChartDataType;

            //110
            VisibleFoundry := UserSettingsPage.VisibleFoundry;
            VisiblePressAll := UserSettingsPage.ChartVisibilityAll;
            VisiblePress1 := UserSettingsPage.ChartVisibility1;
            VisiblePress2 := UserSettingsPage.ChartVisibility2;
            VisiblePress3 := UserSettingsPage.ChartVisibility3;
            VisiblePress4 := UserSettingsPage.ChartVisibility4;
            VisiblePress5 := UserSettingsPage.ChartVisibility5;
            VisiblePress6 := UserSettingsPage.ChartVisibility6;
            VisiblePress7 := UserSettingsPage.ChartVisibility7;
            VisiblePress8 := UserSettingsPage.ChartVisibility8;

            //120
            VisibleProcessing := UserSettingsPage.VisibleProcessing;
            Visible09 := UserSettingsPage.Visible09;
            Visible15 := UserSettingsPage.Visible15;
            Visible10 := UserSettingsPage.Visible10;
            Visible16 := UserSettingsPage.Visible16;
            Visible18 := UserSettingsPage.Visible18;
            Visible25 := UserSettingsPage.Visible25;
            Visible27 := UserSettingsPage.Visible27;
            //130
            VisiblePackaging := UserSettingsPage.VisiblePackaging;
            VisiblePA := UserSettingsPage.VisiblePA;
            VisibleSK := UserSettingsPage.VisibleSK;
            VisibleNI := UserSettingsPage.VisibleNI;


        end;

        if GetSave = GetSave::Save then begin
            UserSettingsPage.Integer_2 := OrderStatusOption;
            UserSettingsPage."EnumPeriodFormat" := PeriodFormat;
            UserSettingsPage."Integer_1" := PeriodLength;
            UserSettingsPage."Text50_2" := DateFilter;
            UserSettingsPage."Boolean_1" := UseCurrentDate;

            UserSettingsPage.Simulated := OrderStatus[1];
            UserSettingsPage.Planned := OrderStatus[2];
            UserSettingsPage."Firm Planned" := OrderStatus[3];
            UserSettingsPage.Released := OrderStatus[4];
            UserSettingsPage.Finished := OrderStatus[5];

            UserSettingsPage.EnumBusinessChartType := BusinessChartType;
            UserSettingsPage.EnumChartDataType := ChartDataType;

            //110
            UserSettingsPage.VisibleFoundry := VisibleFoundry;
            UserSettingsPage.ChartVisibilityAll := VisiblePressAll;
            UserSettingsPage.ChartVisibility1 := VisiblePress1;
            UserSettingsPage.ChartVisibility2 := VisiblePress2;
            UserSettingsPage.ChartVisibility3 := VisiblePress3;
            UserSettingsPage.ChartVisibility4 := VisiblePress4;
            UserSettingsPage.ChartVisibility5 := VisiblePress5;
            UserSettingsPage.ChartVisibility6 := VisiblePress6;
            UserSettingsPage.ChartVisibility7 := VisiblePress7;
            UserSettingsPage.ChartVisibility8 := VisiblePress8;

            //120
            UserSettingsPage.VisibleProcessing := VisibleProcessing;
            UserSettingsPage.Visible09 := Visible09;
            UserSettingsPage.Visible15 := Visible15;
            UserSettingsPage.Visible10 := Visible10;
            UserSettingsPage.Visible16 := Visible16;
            UserSettingsPage.Visible18 := Visible18;
            UserSettingsPage.Visible25 := Visible25;
            UserSettingsPage.Visible27 := Visible27;
            //130
            UserSettingsPage.VisiblePackaging := VisiblePackaging;
            UserSettingsPage.VisiblePA := VisiblePA;
            UserSettingsPage.VisibleSK := VisibleSK;
            UserSettingsPage.VisibleNI := VisibleNI;


            UserSettingsPage.Modify();
        end;
    end;
} 






/// <summary>
/// Page ProdControllingItemMap (ID 50042).
/// </summary>
/// <remarks>
/// 2023.10             Jesper Harder       056         Coating Description on Production Orders
/// </remarks>
page 50042 ProdControllingItemMap
{
    AdditionalSearchTerms = 'Scanpan, Controlling, Production';
    Caption = 'SCANPAN Production Controlling Item Map';

    PageType = List;
    UsageCategory = Lists;
    ShowFilter = true;
    ApplicationArea = Basic, Suite;

    SourceTable = ProdControllingItemMap;
    Permissions =
        tabledata ProdControllingItemMap = RIMD;

    layout
    {
        area(Content)
        {
            repeater(ItemMap)
            {

                field("Item No."; Rec."Item No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Item No. field.';
                }
                field(Coating; Rec.Coating)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Coating Name field.';
                }
            }
        }

    }



} 
/// <summary>
/// Page ProdControllingPanPlan (ID 50030).
/// </summary>
///
/// <remarks>
///
/// 2023.04.10      Jesper Harder               022     Porting the PanPlan project to AL/Code.
///
/// </remarks>
///

page 50030 "ProdControllingPanPlan"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'SCANPAN Production Controlling PanPlan';
    PageType = List;
    Permissions =
        tabledata Item = R,
        tabledata "Item Ledger Entry" = R,
        tabledata "Prod. Order Component" = R,
        tabledata "Prod. Order Line" = R,
        tabledata ProdControllingPanPlan = RIMD,
        tabledata "Purchase Line" = R,
        tabledata "Transfer Line" = R;
    SourceTable = ProdControllingPanPlan;
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            repeater(Productionorders)
            {
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field("Order No."; Rec."Order No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Order Number field.';
                }
                field("Start Date"; Rec."Start Date")
                {
                    ToolTip = 'Specifies the value of the Start Date field.';
                }
                field("End Date"; Rec."End Date")
                {
                    ToolTip = 'Specifies the value of the End Date field.';
                }
                field(Status; Rec.Status)
                {
                    ToolTip = 'Specifies the value of the Order Status field.';
                }
                field("Status Text"; Rec."Status Text")
                {
                    ToolTip = 'Specifies the value of the Status Text field.';
                }
                field("Order Item No."; Rec."Order Item No.")
                {
                    ToolTip = 'Specifies the value of the Item No. field.';
                }
                field("Order Item Description"; Rec."Order Item Description")
                {
                    ToolTip = 'Specifies the value of the Item Description field.';
                }
                field("Order Unit"; Rec."Order Unit")
                {
                    ToolTip = 'Specifies the value of the Order Unit field.';
                }
                field("Bom Item No."; Rec."Bom Item No.")
                {
                    ToolTip = 'Specifies the value of the Bom Item No. field.';
                }
                field("Bom Description"; Rec."Bom Description")
                {
                    ToolTip = 'Specifies the value of the Bom Description field.';
                }
                field("Bom Unit"; Rec."Bom Unit")
                {
                    ToolTip = 'Specifies the value of the Bom Unit field.';
                }
                field("Bom Item Category Code"; Rec."Bom Item Category Code")
                {
                    ToolTip = 'Specifies the value of the Category field.';
                }
                field("PO Item No. Level"; Rec."PO Item No. Level")
                {
                    ToolTip = 'Specifies the value of the LevelOfProduction Level field.';
                }
                field("Bom Item No. Level"; Rec."Bom Item No. Level")
                {
                    ToolTip = 'Specifies the value of the LevelOfProduction BomLevel field.';
                }
                field("Bom Sorting"; Rec."Bom Sorting")
                {
                    ToolTip = 'Specifies the value of the Bom Sorting field.';
                }
                field("Sorting"; Rec."Sorting")
                {
                    ToolTip = 'Specifies the value of the Sorting field.';
                }
                field("Warehouse Quantity"; Rec."Warehouse Quantity")
                {
                    ToolTip = 'Specifies the value of the Quantity field.';
                }
                field("Order Quantity"; Rec."Order Quantity")
                {
                    ToolTip = 'Specifies the value of the Order Quantity field.';
                }
                field("Remaining Quantity"; Rec."Remaining Quantity")
                {
                    ToolTip = 'Specifies the value of the Remaining Quantity field.';
                }
                field("Scrap percentage"; Rec."Scrap percentage")
                {
                    ToolTip = 'Specifies the value of the Scrap field.';
                }
                field("Bom Expected Quantity"; Rec."Bom Expected Quantity")
                {
                    ToolTip = 'Specifies the value of the Expected field.';
                }
                field("Bom Remaining Quantity"; Rec."Bom Remaining Quantity")
                {
                    ToolTip = 'Specifies the value of the Bom Remaining field.';
                }
            }
        }
    }

    trigger OnInit()
    begin
        BuildPanPlanInputData(Rec);
    end;

    /// <summary>
    /// BuildPanPlanInputData.
    /// </summary>
    /// <param name="RecProdControllingPanPlan">Record ProdControllingPanPlan.</param>
    procedure BuildPanPlanInputData(var RecProdControllingPanPlan: Record ProdControllingPanPlan)
    var
        Item: Record Item;
        ItemPOL: Record Item;
        ItemLedgerEntry: Record "Item Ledger Entry";
        ProdOrderComponent: Record "Prod. Order Component";

        ProdOrderLine: Record "Prod. Order Line";
        TempProdControllingPanPlan: Record ProdControllingPanPlan temporary;
        PurchaseLine: Record "Purchase Line";
        TransferLine: Record "Transfer Line";
        Quantity: Decimal;
        EnumOrderStatus: enum EnumProductionOrderStatus;
        LineNo: Integer;
        LineNoTempTable: Integer;
    begin
        ProdOrderLine.SetFilter(Status, '%1|%2|%3',
                                EnumOrderStatus::Planned,
                                EnumOrderStatus::Planned,
                                EnumOrderStatus::Released);

        item.SetFilter("Inventory Posting Group", 'INTERN|MELLEM|MELLEM RÅ|RV-KROPPE|RV-ALU');
        item.SetFilter("Prod. Group Code", '<>%1', 'PAP');

        if ProdOrderLine.FindSet() then
            repeat
                ItemPOL.Get(ProdOrderLine."Item No.");

                ProdOrderComponent.SetFilter("Prod. Order No.", ProdOrderLine."Prod. Order No.");
                if ProdOrderComponent.FindSet() then begin
                    repeat
                        item.SetFilter("No.", ProdOrderComponent."Item No.");
                        Quantity := 0;
                        if item.FindFirst() then begin
                            ItemLedgerEntry.SetFilter("Item No.", ProdOrderComponent."Item No.");
                            ItemLedgerEntry.CalcSums(Quantity);
                            Quantity := ItemLedgerEntry.Quantity;

                            LineNo += 1;
                            RecProdControllingPanPlan."Line No." := LineNo;
                            RecProdControllingPanPlan."Order No." := ProdOrderLine."Prod. Order No.";
                            RecProdControllingPanPlan."Start Date" := ProdOrderLine."Starting Date";
                            RecProdControllingPanPlan."End Date" := ProdOrderLine."Ending Date";
                            RecProdControllingPanPlan."Remaining Quantity" := ProdOrderLine."Remaining Qty. (Base)";

                            RecProdControllingPanPlan.Status := ProdOrderLine.Status.AsInteger();
                            RecProdControllingPanPlan."Status Text" := CopyStr(EnumProductionOrderStatusLoop(ProdOrderLine.Status.AsInteger()), 1, 30);
                            RecProdControllingPanPlan."Order Item No." := ProdOrderLine."Item No.";
                            RecProdControllingPanPlan."Order Item Description" := ItemPOL.Description;
                            RecProdControllingPanPlan."Order Unit" := ItemPOL."Base Unit of Measure";
                            RecProdControllingPanPlan."Bom Item No." := item."No.";
                            RecProdControllingPanPlan."Bom Description" := item.Description;
                            RecProdControllingPanPlan."Bom Unit" := item."Base Unit of Measure";
                            RecProdControllingPanPlan."Bom Item Category Code" := Item."Item Category Code";
                            case ItemPOL."Prod. Group Code" of
                                'KROP':
                                    RecProdControllingPanPlan."PO Item No. Level" := '0';
                                '1':
                                    RecProdControllingPanPlan."PO Item No. Level" := '1';
                                '6':
                                    RecProdControllingPanPlan."PO Item No. Level" := '6';
                                '2':
                                    RecProdControllingPanPlan."PO Item No. Level" := '2';
                                '3':
                                    RecProdControllingPanPlan."PO Item No. Level" := '3';
                                else
                                    RecProdControllingPanPlan."PO Item No. Level" := 'FV';
                            end;

                            case item."Prod. Group Code" of
                                'KROP':
                                    RecProdControllingPanPlan."Bom Item No. Level" := '0';
                                '1':
                                    RecProdControllingPanPlan."Bom Item No. Level" := '1';
                                '6':
                                    RecProdControllingPanPlan."Bom Item No. Level" := '6';
                                '2':
                                    RecProdControllingPanPlan."Bom Item No. Level" := '2';
                                '3':
                                    RecProdControllingPanPlan."Bom Item No. Level" := '3';
                                else
                                    RecProdControllingPanPlan."Bom Item No. Level" := 'FV';
                            end;

                            case item."Prod. Group Code" of
                                'KROP':
                                    RecProdControllingPanPlan."Bom Sorting" := '0';
                                '1':
                                    RecProdControllingPanPlan."Bom Sorting" := '1';
                                '6':
                                    RecProdControllingPanPlan."Bom Sorting" := '6';
                                '2':
                                    RecProdControllingPanPlan."Bom Sorting" := '2';
                                '3':
                                    RecProdControllingPanPlan."Bom Sorting" := '3';
                                else
                                    RecProdControllingPanPlan."Bom Sorting" := 'FV';
                            end;

                            RecProdControllingPanPlan."Warehouse Quantity" := Quantity;
                            RecProdControllingPanPlan."Order Quantity" := ProdOrderLine."Quantity (Base)";
                            RecProdControllingPanPlan."Remaining Quantity" := ProdOrderLine."Remaining Qty. (Base)";
                            RecProdControllingPanPlan."Scrap percentage" := ProdOrderLine."Scrap %";
                            RecProdControllingPanPlan."Bom Expected Quantity" := ProdOrderComponent."Expected Qty. (Base)";
                            RecProdControllingPanPlan."Bom Remaining Quantity" := ProdOrderComponent."Remaining Qty. (Base)";
                            if RecProdControllingPanPlan.Insert() then;
                        end;
                    until ProdOrderComponent.Next() = 0;

                    //Now fill transferlines and purchselines
                    Item.Reset();
                    TempProdControllingPanPlan.DeleteAll();
                    LineNoTempTable := 0;
                    Item.SetFilter("Inventory Posting Group", 'RV-KROPPE', 'RV-ALU');
                    if ProdOrderComponent.FindSet() then
                        repeat
                            if Item.get(ProdOrderComponent."Item No.") then begin
                                //TransferLine
                                Quantity := 0;
                                TransferLine.SetFilter("Item No.", Item."No.");
                                TransferLine.SetFilter("Transfer-to Code", 'RYOM');
                                TransferLine.SetFilter("Outstanding Qty. (Base)", '<>0');
                                if TransferLine.FindSet() then
                                    repeat
                                        Quantity := TransferLine."Outstanding Qty. (Base)";
                                        //Insert or Update
                                        TempProdControllingPanPlan.SetFilter("Bom Item No.", Item."No.");
                                        TempProdControllingPanPlan.SetFilter("Start Date", '%1', TransferLine."Receipt Date");
                                        if TempProdControllingPanPlan.FindFirst() then begin
                                            TempProdControllingPanPlan."Bom Expected Quantity" += Quantity;
                                            if TempProdControllingPanPlan.Modify() then;
                                        end else begin
                                            TempProdControllingPanPlan.Init();
                                            LineNoTempTable += 1;
                                            TempProdControllingPanPlan."Line No." := LineNoTempTable;
                                            TempProdControllingPanPlan."Bom Item No." := Item."No.";
                                            TempProdControllingPanPlan."Bom Description" := Item.Description;
                                            TempProdControllingPanPlan."Start Date" := TransferLine."Receipt Date";
                                            TempProdControllingPanPlan."Bom Expected Quantity" := Quantity;
                                            if TempProdControllingPanPlan.Insert() then;
                                        end;
                                    until TransferLine.Next() = 0;

                                //PurchaseLine
                                Quantity := 0;
                                PurchaseLine.SetFilter("Document Type", '%1', PurchaseLine."Document Type"::Order);
                                PurchaseLine.SetFilter(Type, '%1', PurchaseLine.Type::Item);
                                PurchaseLine.SetFilter("No.", Item."No.");
                                PurchaseLine.SetFilter("Location Code", 'RYOM');
                                PurchaseLine.SetFilter("Outstanding Qty. (Base)", '<>0');
                                if PurchaseLine.FindSet() then
                                    repeat
                                        Quantity := PurchaseLine."Outstanding Qty. (Base)";
                                        //Insert or Update
                                        TempProdControllingPanPlan.SetFilter("Bom Item No.", Item."No.");
                                        TempProdControllingPanPlan.SetFilter("Start Date", '%1', PurchaseLine."Expected Receipt Date");
                                        if TempProdControllingPanPlan.FindFirst() then begin
                                            TempProdControllingPanPlan."Bom Expected Quantity" += Quantity;
                                            if TempProdControllingPanPlan.Modify() then;
                                        end else begin
                                            TempProdControllingPanPlan.Init();
                                            LineNoTempTable += 1;
                                            TempProdControllingPanPlan."Line No." := LineNoTempTable;
                                            TempProdControllingPanPlan."Bom Item No." := Item."No.";
                                            TempProdControllingPanPlan."Bom Description" := Item.Description;
                                            TempProdControllingPanPlan."Start Date" := PurchaseLine."Expected Receipt Date";
                                            TempProdControllingPanPlan."Bom Expected Quantity" := Quantity;
                                            if TempProdControllingPanPlan.Insert() then;
                                        end;
                                    until PurchaseLine.Next() = 0;
                            end;
                        until ProdOrderComponent.Next() = 0;
                    //fill result into rec dataset
                    if not TempProdControllingPanPlan.IsEmpty then begin
                        TempProdControllingPanPlan.FindSet();
                        repeat
                            LineNo += 1;
                            RecProdControllingPanPlan."Line No." := LineNo;
                            RecProdControllingPanPlan.Status := 5;
                            RecProdControllingPanPlan."Status Text" := CopyStr(EnumProductionOrderStatusLoop(5), 1, 30);
                            RecProdControllingPanPlan."Order Item No." := TempProdControllingPanPlan."Bom Item No.";
                            RecProdControllingPanPlan."Order Item Description" := TempProdControllingPanPlan."Bom Description";
                            RecProdControllingPanPlan."Start Date" := TempProdControllingPanPlan."Start Date";
                            RecProdControllingPanPlan."Order Quantity" := TempProdControllingPanPlan."Order Quantity";
                            if RecProdControllingPanPlan.Insert() then;
                        until TempProdControllingPanPlan.Next() = 0;
                    end;
                end;
            until ProdOrderLine.Next() = 0;
    end;

    local procedure EnumProductionOrderStatusLoop(EnumValueID: Integer): Text
    //Credit to; https://stefanmaron.com/2021/04/19/code-review-loop-over-an-enum/
    var
        EnumType: Enum EnumProductionOrderStatus;
    begin
        foreach EnumType in Enum::"Sales Document Type".Ordinals() do
            if EnumType.AsInteger() = EnumValueID then exit(Format(EnumType));
    end;
}

/*
SELECT
	COMP.OrderStatus
	,COMP.OrderStatusTxt
	,COMP.OrderNo
	,COMP.OrderItemNo
	,COMP.OrderDescription
	,COMP.OrderItemUnitOfMeasure
	,COMP.OrderStartingDate
	,COMP.OrderEndingDate
	,COMP.BomItemNo
	,COMP.BomItemDescription
	,COMP.BomUnitOfMeasure
	,COMP.BomCategoryCode
	,COMP.PlanLevel
	,COMP.NiveauSorting
	,COMP.BomPlanLevel
	,COMP.BomNiveauSorting

	,FPOrderReceiptQty
	+RelOrderReceiptQty
	+QtyonSalesOrder
	+Inventory
	+[ScheduledNeedQty]
	+[QtyinTransit]
	+[TransOrdReceiptQty]
	+[TransOrdShipmentQty]
	+[QtyOnPurchOrder]
	as BomWarehouseQuantity

	,COMP.OrderQuantity
	,COMP.OrderRemainingQuantity
	,COMP.OrderScrapQuantityPCT
	,COMP.BomExpectedQuantity
	,COMP.BomRemainingQuantity
	,'---------------'
	,FPOrderReceiptQty
	,RelOrderReceiptQty
	,[ScheduledNeedQty]
	,QtyonSalesOrder
	,Inventory
	,[QtyinTransit]
	,[TransOrdReceiptQty]
	,[TransOrdShipmentQty]
	,[QtyOnPurchOrder]

FROM (SELECT
	POL.Status as OrderStatus
	,CASE POL.Status
	WHEN 0 THEN 'Simulering'
	WHEN 1 THEN 'Planlagt'
	WHEN 2 THEN 'Fastlagt'
	WHEN 3 THEN 'Frigivet'
	WHEN 4 THEN 'Færdig'
	END as OrderStatusTxt
	,POL.[Prod_ Order No_] as OrderNo
	,POL.[Item No_] as OrderItemNo
	,POL.Description as OrderDescription
	,POL.[Unit of Measure Code] as OrderItemUnitOfMeasure
	----
	,CAST(POL.[Starting Date] as DATE) as OrderStartingDate
	,CAST(POL.[Ending Date] as DATE) as OrderEndingDate
	----
	,ITM.No_ as BomItemNo
	,ITM.Description as BomItemDescription
	,PC.[Unit of Measure Code] as BomUnitOfMeasure
	,ITM.[Item Category Code] as BomCategoryCode
	,CASE POLITM.[Product Group Code]
		WHEN 'KROP' THEN '0'
		WHEN '1' THEN '1'
		WHEN '6' THEN '6'
		WHEN '2' THEN '2'
		WHEN '3' THEN '3'
	ELSE 'FV' END as PlanLevel
	,CASE POLITM.[Product Group Code]
		WHEN 'KROP' THEN -1
		WHEN '1' THEN 0
		WHEN '6' THEN 1
		WHEN '2' THEN 2
		WHEN '3' THEN 3
	ELSE 4 END as NiveauSorting
	,CASE ITM.[Product Group Code]
		WHEN 'KROP' THEN '0'
		WHEN '1' THEN '1'
		WHEN '6' THEN '6'
		WHEN '2' THEN '2'
		WHEN '3' THEN '3'
	ELSE 'FV' END as BomPlanLevel
	,CASE ITM.[Product Group Code]
		WHEN 'KROP' THEN -1
		WHEN '1' THEN 0
		WHEN '6' THEN 1
		WHEN '2' THEN 2
		WHEN '3' THEN 3
	ELSE 4 END as BomNiveauSorting

-----
	,CAST(IL.Quantity as DECIMAL(18,0)) as BomWarehouseQuantity
-----
	,CAST(POL.Quantity as DECIMAL(18,0)) as OrderQuantity
	,CAST(POL.[Remaining Quantity] as DECIMAL(18,0)) as OrderRemainingQuantity
	,CAST(POL.[Scrap %] as DECIMAL(18,1)) as OrderScrapQuantityPCT
	,CAST(PC.[Expected Quantity] as DECIMAL(18,0)) as BomExpectedQuantity
	,CAST(PC.[Remaining Quantity] as DECIMAL(18,0)) as BomRemainingQuantity
-----

,'------------------------' as otherfields
--Warehouse Inventory
	,CAST(ISNULL((SELECT SUM(LG.Quantity) AS Inventory FROM [SCANPAN A_S$Item Ledger Entry] AS LG
	WHERE IL.[Item No_] = LG.[Item No_] AND LG.[Location Code] = 'RV'
	),0) as INT) AS Inventory
--PlannedOrderReceipt [PlannedOrderReceiptQty]
	,CAST(ISNULL((SELECT SUM(POL1.[Remaining Quantity]) AS [PlannedOrderReceiptQty] FROM [SCANPAN A_S$Prod_ Order Line] AS POL1
	WHERE		POL1.[Item No_] = IL.[Item No_] AND POL1.[Status] = 1 AND POL1.[Due Date] < POL.[Starting Date]
	),0) as INT) AS [PlannedOrderReceiptQty]
	--GrossRequirement - [QtyonSalesOrder]
		,CAST(ISNULL((SELECT -SUM(SL.[Outstanding Quantity]) FROM dbo.[SCANPAN A_S$Sales Line] AS SL
		WHERE	SL.[Document Type] = 1 AND SL.[Type] = 2 AND SL.[No_] = IL.[Item No_] AND SL.[Drop Shipment] = 0 AND SL.[Shipment Date] < POL.[Starting Date]
		),0) as int) as [QtyonSalesOrder]
	--ScheduledReceipt - [RelOrderReceiptQty]
		,CAST(ISNULL((SELECT SUM(POL1.[Remaining Quantity]) FROM dbo.[SCANPAN A_S$Prod_ Order Line] AS POL1
		WHERE	POL1.[Item No_] = IL.[Item No_] AND POL1.[Status] = 3 AND POL1.[Due Date]<POL.[Starting Date]
		),0) as int) AS [RelOrderReceiptQty]
	--ScheduledReceipt [FPOrderReceiptQty]
		,CAST(ISNULL((SELECT SUM(POL1.[Remaining Quantity]) FROM dbo.[SCANPAN A_S$Prod_ Order Line] AS POL1
		WHERE	POL1.[Item No_] = IL.[Item No_] AND POL1.[Status] = 2 AND POL1.[Due Date]<POL.[Starting Date]
		),0) as INT) AS [FPOrderReceiptQty]
	--GrossRequirement - [ScheduledNeedQty]
		,CAST(ISNULL((SELECT -SUM(POC.[Remaining Qty_ (Base)]) FROM dbo.[SCANPAN A_S$Prod_ Order Component] AS POC
		WHERE	POC.[Status] in(1,2,3) AND POC.[Item No_] = IL.[Item No_] AND POC.[Due Date]  < POL.[Starting Date]
		),0) as int) as [ScheduledNeedQty]
	--ScheduledReceipt - [QtyinTransit]
		,CAST(ISNULL((SELECT SUM([Qty_ in Transit (Base)]) FROM dbo.[SCANPAN A_S$Transfer Line] AS TL
		WHERE	TL.[Item No_] = IL.[Item No_] AND TL.[Receipt Date] < POL.[Starting Date]
		),0) as INT) as [QtyinTransit]

	--ScheduledReceipt - [TransOrdReceiptQty]
		,CAST(ISNULL((SELECT SUM([Outstanding Quantity]) FROM dbo.[SCANPAN A_S$Transfer Line] AS TL
		WHERE  	TL.[Transfer-to Code] = 'RV' AND TL.[Item No_] = IL.[Item No_] AND TL.[Receipt Date] < POL.[Starting Date]
		),0) as int) as [TransOrdReceiptQty]
	--GrossRequirement - [TransOrdShipmentQty]
		--,CAST(ISNULL((SELECT -SUM(TL.[Outstanding Quantity]) FROM dbo.[SCANPAN A_S$Transfer Line] AS TL
		--WHERE	TL.[Transfer-from Code] <> 'RV' AND TL.[Item No_] = IL.[Item No_] AND TL.[Shipment Date] < POL.[Starting Date]
		--),0) as int) as [TransOrdShipmentQty]
		,0 as [TransOrdShipmentQty]

	--ScheduledReceipt - [QtyOnPurchOrder]
		,CAST(ISNULL(
		(SELECT SUM(PULIN.[Outstanding Quantity]) FROM dbo.[SCANPAN A_S$Purchase Line] AS PULIN
		WHERE	PULIN.[Location Code] = 'RV' AND PULIN.[Document Type] = 1 AND PULIN.[Type] = 2 AND PULIN.[No_] = IL.[Item No_] AND PULIN.[Drop Shipment] = 0 AND PULIN.[Expected Receipt Date]  < POL.[Starting Date]
		),0) as int) as [QtyOnPurchOrder]

--,'----- ITEM' as delim
--,ITM.*

FROM	[SCANPAN A_S$Prod_ Order Line] POL
		left join [SCANPAN A_S$Item] POLITM on POL.[Item No_] = POLITM.No_
		left join [SCANPAN A_S$Prod_ Order Component] PC on POL.[Prod_ Order No_] = PC.[Prod_ Order No_]
		left join [SCANPAN A_S$Item] ITM on PC.[Item No_] = ITM.No_
		left join (SELECT [Item No_], cast(sum([Quantity]) as decimal(18,0)) as Quantity
					FROM [NAVDATABASE].[dbo].[_JH_Item_Ledger] GROUP BY [Item No_]
					) as IL on PC.[Item No_] = IL.[Item No_]

WHERE 0=0
and ITM.[Gen_ Prod_ Posting Group] in('INTERN','MELLEM','MELLEM RÅ','RV-KROPPE','RV-ALU')
and ITM.[Product Group Code] not in('PAP') --,'0','1','2','6','3')
and POL.[Status] in (1,2,3)
) as COMP
--WHERE 0=0
----and COMP.OrderStatus = 3
----and OrderItemNo = ''
----and OrderNo = '133733'
--ORDER BY OrderNo  --NiveauSorting

UNION ALL

SELECT
	[Status] as OrderStatus
	,CAST([Status] as VARCHAR) + ' - Tilgang' as OrderStatusTxt
	,null as OrderNo
	,OrderItemNo
	,OrderItemDescription
	,null as OrderItemUnitOfMeasure
	,OrderStartingDate as OrderStartingDate
	,null as OrderEndingDate
	,null as BomItemNo
	,null as BomItemDescription
	,null as BomUnitOfMeasure
	,null as BomCategoryCode
	,null as PlanLevel
	,null as NiveauSorting
	,null as BomPlanLevel
	,null as BomNiveauSorting

	,null as BomWarehouseQuantity

	,sum(OutstandingQuantity) as OrderQuantity
	,null as OrderRemainingQuantity
	,null as OrderScrapQuantityPCT
	,null as BomExpectedQuantity
	,null as BomRemainingQuantity
	,'---------------'
	,null as FPOrderReceiptQty
	,null as RelOrderReceiptQty
	,null as [ScheduledNeedQty]
	,null as QtyonSalesOrder
	,null as Inventory
	,null as [QtyinTransit]
	,null as [TransOrdReceiptQty]
	,null as [TransOrdShipmentQty]
	,null as [QtyOnPurchOrder]

FROM (
SELECT
		'5' as [Status]
		,ITEMS.ItemNo as OrderItemNo
		,ITEMS.Description as OrderItemDescription
		,CAST(TL.[Outstanding Quantity] as decimal(18,0)) as OutstandingQuantity
		,CAST(TL.[Receipt Date] as date) as OrderStartingDate
FROM (SELECT DISTINCT POC.[Item No_] as ItemNo, ITM.Description FROM [SCANPAN A_S$Prod_ Order Component] POC
			join [SCANPAN A_S$Item] ITM on POC.[Item No_] = ITM.No_
										and Status in(1,2,3)
										and ITM.[Gen_ Prod_ Posting Group] in('RV-KROPPE','RV-ALU')
	) as ITEMS
	left join [SCANPAN A_S$Transfer Line] AS TL on ITEMS.ItemNo = TL.[Item No_] and TL.[Transfer-to Code] = 'RV'
WHERE TL.[Outstanding Quantity] <>0

UNION ALL

SELECT
		'5' as [Status]
		,ITEMS.ItemNo as OrderItemNo
		,ITEMS.Description as OrderItemDescription
		,CAST(PULIN.[Outstanding Quantity] as decimal(18,0)) as OutstandingQuantity
		,CAST(PULIN.[Expected Receipt Date] as date) as OrderStartingDate

FROM (SELECT DISTINCT POC.[Item No_] as ItemNo, ITM.Description FROM [SCANPAN A_S$Prod_ Order Component] POC
			join [SCANPAN A_S$Item] ITM on POC.[Item No_] = ITM.No_
										and Status in(1,2,3)
										and ITM.[Gen_ Prod_ Posting Group] in('RV-KROPPE','RV-ALU')
	) as ITEMS
	left join [SCANPAN A_S$Purchase Line] AS PULIN on ITEMS.ItemNo = PULIN.No_  and PULIN.[Location Code] = 'RV'
										AND PULIN.[Document Type] = 1 AND PULIN.[Type] = 2 AND PULIN.[Drop Shipment] = 0
WHERE PULIN.[Outstanding Quantity] <>0
) as ItemStatus
GROUP BY 	[Status]
	,OrderItemNo
	,OrderItemDescription
	,OrderStartingDate

*/
 
/// <summary>
/// Page SCANPANProdFoundry (ID 50021).
/// </summary>
///
/// <remarks>
///
/// 2023.03.21          Jesper Harder        010         List Production Orders in STØBERI
/// 2023.03.28          Jesper Harder        010         Added CapLedgEntries OutputQty by Operation
/// 2023.10             Jesper Harder        055         Priority and Description P.Order RoutingLines
/// 2023.10             Jesper Harder        056         Coating Description on Production Orders
/// </remarks>

page 50021 "ProdControllingRoutingLine"
{
    AdditionalSearchTerms = 'Scanpan, Controlling, Production';
    ApplicationArea = Basic, Suite;
    Caption = 'SCANPAN Production Controlling Routing List';
    PageType = List;
    Permissions =
        tabledata "Capacity Ledger Entry" = R,
        tabledata "Prod. Order Line" = R,
        tabledata "Prod. Order Routing Line" = RM,
        tabledata ProdContllingRoutingLinesTMP = RIMD;
    SourceTable = ProdContllingRoutingLinesTMP;
    UsageCategory = Lists;
    ShowFilter = true;

    layout
    {
        area(content)
        {
            group(group1)
            {
                ShowCaption = false;

                field(FilterWorkCenterGroupCode; FilterWorkCenterGroupCode)
                {
                    Caption = 'Work Center Group Code';
                    ToolTip = 'Defines filter on Work Center Group Code';
                    trigger OnValidate()
                    var
                    begin
                        FilterList();
                    end;
                }
                field(FilterStatus; FilterStatusEnum)
                {
                    Caption = 'Order status';
                    ToolTip = 'Filters the routinglines based on the order status.';
                    trigger OnValidate()
                    var
                    begin
                        FilterList();
                    end;
                }
            }

            repeater(General)
            {
                field("Line No."; Rec."Line No.")
                {
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field(Modiified; Rec.Modiified)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Modified record field.';
                }
                field(Status; Rec.Status)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Production Order Status.';
                }
                field(Priority; Rec.Priority)
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    ToolTip = 'Indicates Order Priority.';
                }
                field(Comment; Rec.Comment)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Add Comments field.';
                }
                field("Production Order No."; Rec."Production Order No.")
                {
                    ToolTip = 'Specifies the value of the Production Order No. field.';
                    //LookupPageId = "Released Production Order";
                }
                field("Routing Type"; Rec.RoutingType)
                {
                    ToolTip = 'Specifies the value of the Ressource Type field.';
                }
                field("Ressource No."; Rec."Ressource No.")
                {
                    ToolTip = 'Specifies the value of the Ressource No. field.';
                }
                field("Routing Description"; Rec."Routing Description")
                {
                    ToolTip = 'Specifies the value of the Ressource Name field.';
                }
                field("Operation No."; Rec."Operation No.")
                {
                    ToolTip = 'Specifies the value of the Operation No. field.';
                }
                field("Starting Date"; Rec."Starting Date")
                {
                    ToolTip = 'Specifies the value of the Starting Date field.';
                }
                field("Ending Date"; Rec."Ending Date")
                {
                    ToolTip = 'Specifies the value of the Ending Date field.';
                }
                field(ItemNo; Rec.ItemNo)
                {
                    ToolTip = 'Specifies the value of the Item No. field.';
                }
                field("Item Description"; Rec."Item Description")
                {
                    ToolTip = 'Specifies the value of the Item Description field.';
                }
                field(Coating; Rec.Coating)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the type of coating used in this Item.';
                }
                field("Coating Item"; Rec."Coating Item")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the type of coating item used in this Item.';
                }
                field("First BOM Body"; Rec."First BOM Body")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the First BOM Body field.';
                }
                field("Work Center Group Code"; Rec."Work Center Group Code")
                {
                    ToolTip = 'Specifies the value of the Departmnet No. field.';
                }
                field(Quantity; Rec.Quantity)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Quantity field.';
                }
                field("Finished Quantity"; Rec."Finished Quantity")
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Finished Quantity field.';
                }
                field("Remaining Quantity"; Rec."Remaining Quantity")
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Remaining Quantity field.';
                }
                field("Finished Percentage"; Rec."Finished Percentage")
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Finished Percentage field.';
                }
                field("Item Set Multiplier"; Rec."Item Set Multiplier")
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    ToolTip = 'Shows how manny productionitems is contained in this Item.';
                }
                field("Quantity Set"; Rec."Quantity Set")
                {
                    DecimalPlaces = 0;
                    BlankZero = true;
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Quantity Set field.';
                }

                field("Remaining Set Quantity"; Rec."Remaining Set Quantity")
                {
                    Caption = 'Remaining Set Quantity';
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Remaining Set Quantity field.';
                }
                field("Finished Set Quantity"; Rec."Finished Set Quantity")
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    DecimalPlaces = 0;
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Finished Set Quantity field.';
                }
            }
        }
    }
    actions
    {
        area(Processing)
        {
            action(save)
            {
                Caption = 'Save changes';
                Image = Save;
                ToolTip = 'Saves changes into Productionorder routing lines.';

                trigger OnAction()
                var
                begin
                    SaveChanges();
                end;
            }
            action(clear)
            {
                Caption = 'Clear all priorities';
                Image = Delete;
                ToolTip = 'Executes the Clear all priorities action.';

                trigger OnAction()
                var
                begin
                    DeleteAllPriorities();
                end;
            }
            action(ItemMap)
            {
                Caption = 'Item Mapping';
                Image = ItemSubstitution;
                ToolTip = 'Executes the Item Mapping action.';

                trigger OnAction()
                var
                    ProdControllingItemMap: Page ProdControllingItemMap;
                begin
                    ProdControllingItemMap.RunModal();
                end;
            }
        }
        area(Reporting)
        {
            action(PriorityReport)
            {
                Caption = 'Print Route priority';
                Image = PrintReport;
                ToolTip = 'Prints the Priority report with comments.';

                trigger OnAction()
                var
                    PriorityReport: Report ProductionControllingPriority;
                begin
                    //CheckModified();
                    PriorityReport.SetTableView(Rec);
                    PriorityReport.Run();
                end;
            }
        }
    }

    var
        //FilterMachineCenter: Text;
        ProdContllingRoutingLinesTMPFilters: Record ProdContllingRoutingLinesTMP;
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        StyleExprFinishedQtyFavorable: Boolean;
        FilterStatusEnum: Enum EnumProductionOrderStatus;
        FilterWorkCenterGroupCode: text;

    trigger OnInit()
    var
    begin
        ScanpanMiscellaneous.ControllingFillProductionRouteLine(Rec);

        FilterStatusEnum := FilterStatusEnum::Released;
    end;

    trigger OnOpenPage()
    begin
        FilterList();
    end;

    trigger OnClosePage()
    var
    begin
        CheckModified();
    end;

    trigger OnAfterGetRecord()
    begin
        StyleExprFinishedQtyFavorable := false;
        if rec."Remaining Quantity" < 0 then StyleExprFinishedQtyFavorable := true;
    end;

    local procedure CheckModified()
    var
        NotSavedLbl: Label 'Changes has not been saved.';
        SaveChangesLbl: Label 'Do you want to save changes?';
    begin
        SaveRestoreFilters(0);
        Rec.SetFilter(Modiified, '%1', true);
        if not Rec.IsEmpty then begin
            if Dialog.Confirm(SaveChangesLbl) = true then
                SaveChanges()
            else
                error(NotSavedLbl);
            SaveRestoreFilters(1);
        end;
    end;

    local procedure DeleteAllPriorities()
    var
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
    begin
        ProdOrderRoutingLine.SetFilter(Status, '<>%1', ProdOrderRoutingLine.Status::Finished);
        ProdOrderRoutingLine.FindSet();
        ProdOrderRoutingLine.ModifyAll(Priority, 0, true);

        Rec.Reset();
        Rec.ModifyAll(Priority, 0, true);
        Rec.ModifyAll(Modiified, false);
    end;

    local procedure FilterList()
    var
    begin
        Rec.SetRange("Work Center Group Code");
        Rec.SetRange(Status);
        if FilterWorkCenterGroupCode <> '' then Rec.SetFilter("Work Center Group Code", '%1', FilterWorkCenterGroupCode);
        Rec.SetFilter(Status, '%1', FilterStatusEnum);

        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;

    local procedure SaveChanges()
    var
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
    begin
        SaveRestoreFilters(0);
        Rec.Reset();
        Rec.SetFilter(Modiified, '%1', true);
        Rec.FindSet();
        repeat
            // key(Key1; Status, "Prod. Order No.", "Routing Reference No.", "Routing No.", "Operation No.")
            ProdOrderRoutingLine.SetFilter(Status, '%1', Rec.Status);
            ProdOrderRoutingLine.SetFilter("Prod. Order No.", Rec."Production Order No.");
            //ProdRoutingLine.SetFilter("Routing Reference No.",);
            ProdOrderRoutingLine.SetFilter("Operation No.", Rec."Operation No.");
            ProdOrderRoutingLine.FindSet();
            ProdOrderRoutingLine.Comment := Rec.Comment;
            ProdOrderRoutingLine.Priority := Rec.Priority;
            ProdOrderRoutingLine.ModifyAll(Comment, Rec.Comment, true);
            ProdOrderRoutingLine.ModifyAll(Priority, Rec.Priority, true);
        until Rec.Next() = 0;
        Rec.Reset();
        SaveRestoreFilters(1);
        Rec.FindFirst();
    end;

    local procedure SaveRestoreFilters(SaveRestore: Integer)
    var
    begin
        if SaveRestore = 1 then
            Rec.CopyFilters(ProdContllingRoutingLinesTMPFilters);
        if SaveRestore = 0 then
            ProdContllingRoutingLinesTMPFilters.CopyFilters(Rec);
    end;
}

/*

Type  Prod Ress
No.     P101943
CapLedgEntries: Record "Capacity Ledger Entry";

*/
 
/// <summary>
/// Page ProdControlListRoutingLine (ID 50036).
/// </summary>
/// <remarks>
/// 2023.05.11                      Jesper Harder                           030     List All Routing Lines
/// </remarks>
page 50036 "ProdControlListRoutingLine"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Production Controlling List Routing Lines';
    PageType = List;
    SourceTable = "ProdControllingRoutes";
    SourceTableTemporary = true;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Line No. field.';
                    Editable = isEditable;
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the No. field.';
                    Editable = isEditable;
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Description field.';
                    Editable = isEditable;
                }
                field(Status; Rec.Status)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Status field.';
                    Editable = isEditable;
                }
                field(LastDateModified; Rec.LastDateModified)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Last Date Modified field.';
                    Editable = isEditable;
                }
                field(Comment; Rec.Comment)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Has Comment field.';
                    Editable = isEditable;
                }
                field(OperationNo; Rec.OperationNo)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Operation No. field.';
                    Editable = isEditable;
                }
                field("Routing Priority"; Rec."Routing Priority")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Routing Priority field.';
                    Editable = true;
                    Visible = false;
                }
                field(Line_Type; Rec.Line_Type)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Type field.';
                    Editable = isEditable;
                }
                field(Line_No; Rec.Line_No)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Ressource No. field.';
                    Editable = isEditable;
                }
                field(Line_Description; Rec.Line_Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Ressouce Description field.';
                    Editable = isEditable;
                }
                field(RoutingLinkCode; Rec.RoutingLinkCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Routing Link Code field.';
                    Editable = isEditable;
                }
                field(SetupTime; Rec.SetupTime)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Setup Time field.';
                    Editable = isEditable;
                }
                field(RunTime; Rec.RunTime)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Run Time field.';
                    Editable = isEditable;
                }
                field(RunTimeUnitofMeasCode; Rec.RunTimeUnitofMeasCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Run Time Unit of Measure Code field.';
                    Editable = isEditable;
                }
                field(WaitTime; Rec.WaitTime)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Wait Time field.';
                    Editable = isEditable;
                }
                field(MoveTime; Rec.MoveTime)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Move Time field.';
                    Editable = isEditable;
                }
                field(FixedScrapQuantity; Rec.FixedScrapQuantity)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Fixed Scrap Quantity field.';
                    Editable = isEditable;
                }
                field(ScrapFactor; Rec.ScrapFactor)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Scrap Factor field.';
                    Editable = isEditable;
                }
                field(ConcurrentCapacities; Rec.ConcurrentCapacities)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Concurrent Capacities field.';
                    Editable = isEditable;
                }
                field(SendAheadQuantity; Rec.SendAheadQuantity)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Send Ahead Quantity field.';
                    Editable = isEditable;
                }
                field(UnitCostper; Rec.UnitCostper)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Unit Cost per field.';
                    Editable = isEditable;
                }
            }
        }
    }

    var
        isEditable: Boolean;

    trigger OnOpenPage()
    var
        QueryProdRoutingLinesList: Query "ProdRoutingLinesList";
        LineNo: Integer;
    begin
        isEditable := false;
        QueryProdRoutingLinesList.Open();
        while QueryProdRoutingLinesList.Read() do begin
            Rec.Init();
            LineNo += 1;
            Rec."Line No." := LineNo;
            Rec."No." := QueryProdRoutingLinesList.No;
            Rec.Description := QueryProdRoutingLinesList.Description;
            Rec.Status := QueryProdRoutingLinesList.Status;
            Rec.LastDateModified := QueryProdRoutingLinesList.LastDateModified;
            Rec.OperationNo := QueryProdRoutingLinesList.OperationNo;
            //Rec."Routing Priority" := QueryProdRoutingLinesList.RoutingPriority;
            Rec.Line_Type := QueryProdRoutingLinesList.Line_Type;
            Rec.Line_No := QueryProdRoutingLinesList.Line_No;
            Rec.Line_Description := QueryProdRoutingLinesList.Line_Description;
            Rec.RoutingLinkCode := QueryProdRoutingLinesList.RoutingLinkCode;
            Rec.SetupTime := QueryProdRoutingLinesList.SetupTime;
            Rec.RunTime := QueryProdRoutingLinesList.RunTime;
            Rec.RunTimeUnitofMeasCode := QueryProdRoutingLinesList.RunTimeUnitofMeasCode;
            Rec.WaitTime := QueryProdRoutingLinesList.WaitTime;
            Rec.MoveTime := QueryProdRoutingLinesList.MoveTime;
            Rec.FixedScrapQuantity := QueryProdRoutingLinesList.FixedScrapQuantity;
            Rec.ScrapFactor := QueryProdRoutingLinesList.ScrapFactor;
            Rec.ConcurrentCapacities := QueryProdRoutingLinesList.ConcurrentCapacities;
            Rec.SendAheadQuantity := QueryProdRoutingLinesList.SendAheadQuantity;
            Rec.UnitCostper := QueryProdRoutingLinesList.UnitCostper;
            Rec.Insert();
        end;
        Rec.FindFirst();
    end;
}
 



/*
page 50056 ProdDashboardPart
{

    // Additional search terms used for finding the page.
    AdditionalSearchTerms = 'Scanpan Pagepart Production Controlling Dashboard';

    // Caption displayed for the page part.
    Caption = 'Scanpan Production Dashboard';

    // Define the type of page as a CardPart.
    PageType = CardPart;

    // Refresh the page when it is activated.
    RefreshOnActivate = true;

    layout
    {
        area(Content)
        {
            group(Chart)
            {
                Caption = 'Chart';
                usercontrol(ChartControl; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                {
                    ApplicationArea = all;
                    trigger AddInReady()
                    begin
                        UpdateChartControl();
                    end;
                }
            }

        }
    }


    local procedure UpdateChartControl()
    var
        TempBusinessChartBuffer: Record "Business Chart Buffer" temporary;
        CapacityType: Enum "Capacity Type";

    begin

        TempBusinessChartBuffer.DeleteAll();
        UpdateProductionChart('16', CapacityType::"Machine Center", TempBusinessChartBuffer, OrderStatus, PeriodFormat, DateFilter, PeriodLength, BusinessChartType, ChartDataType);
        TempBusinessChartBuffer.Update(CurrPage.ChartControl);
    end;

    procedure UpdateProductionChart(CapacityNo: Code[20];
                            CapacityType: enum "Capacity Type";
                            var BusinessChartBuffer: Record "Business Chart Buffer";
                            OrderStatus: array[5] of Boolean;
                            PeriodType: Enum "PeriodType";
                            PeriodStart: Text[2048];
                            PeriodLength: Integer;
                            BusinessChartType: enum "Business Chart Type";
                            ChartDataType: enum EnumChartDataType
                        )
    var
        CalendarDate: Record Date;
        Qty: Decimal;
        PorderStatus: Enum "Production Order Status";
        ColumnNo: Integer;
        MeassureIndex: Integer;
        StatusLvl: Integer;
        SecondaryChartLbl: Label 'Planned Qty';
    begin
        BusinessChartBuffer.Initialize();
        //"Simulated","Planned","Firm Planned","Released","Finished"
        StatusLvl := 0;
        MeassureIndex := 0;
        foreach StatusLvl in enum::"Production Order Status".ordinals do
            if OrderStatus[StatusLvl + 1] = true then begin

                PorderStatus := enum::"Production Order Status".FromInteger(StatusLvl);
                BusinessChartBuffer.AddMeasure(Format(PorderStatus),
                                                MeassureIndex,
                                                BusinessChartBuffer."Data Type"::Decimal,
                                                BusinessChartType.AsInteger()
                                                );
                MeassureIndex += 1;
            end;

        //DEMO
        if DemoActive then
            BusinessChartType := BusinessChartType::Line;
        BusinessChartBuffer.AddMeasure(SecondaryChartLbl,
                                        MeassureIndex,
                                        BusinessChartBuffer."Data Type"::Decimal,
                                        BusinessChartType.AsInteger()
                                        );

        //Y-Axis

        //X-Axis
        BusinessChartBuffer.SetXAxis(Format(PeriodType), BusinessChartBuffer."Data Type"::String);

        //GetDateSet
        GetCalendarPeriodType(CalendarDate,
                    PeriodType,
                    PeriodLength,
                    PeriodStart);
        //X-Axis Columns
        ColumnNo := 0;
        if CalendarDate.FindSet() then
            repeat
                if PeriodType = PeriodType::Date then
                    BusinessChartBuffer.AddColumn(format(CalendarDate."Period Start"))
                else
                    BusinessChartBuffer.AddColumn(format(Date2DMY(CalendarDate."Period Start", 3)) + '-' + format(CalendarDate."Period Name"));

                //"Simulated","Planned","Firm Planned","Released","Finished"
                MeassureIndex := 0;
                for StatusLvl := 0 to 4 do
                    if OrderStatus[StatusLvl + 1] = true then begin
                        Qty := 0;
                        if StatusLvl = 4 then PorderStatus := PorderStatus::Finished;
                        if StatusLvl = 3 then PorderStatus := PorderStatus::Released;
                        if StatusLvl = 2 then PorderStatus := PorderStatus::"Firm Planned";
                        if StatusLvl = 1 then PorderStatus := PorderStatus::Planned;
                        if StatusLvl = 0 then PorderStatus := PorderStatus::Simulated;

                        //Planned
                        if (ChartDataType = ChartDataType::"Planned Quantity") or (ChartDataType = ChartDataType::"Planned Time") then begin
                            //Finished
                            if StatusLvl = 4 then
                                Qty := GetProductionPostedCapacityLedgerQuantity(PorderStatus,
                                                                           CapacityNo,
                                                                           CapacityType,
                                                                           ChartDataType,
                                                                           CalendarDate);

                            //Not Status Finished
                            if StatusLvl <> 4 then
                                Qty := GetProductionOrderRoutingLineQuantity(PorderStatus,
                                                                            CapacityNo,
                                                                            CapacityType,
                                                                            ChartDataType,
                                                                            CalendarDate);
                        end;
                        //Actual
                        if (ChartDataType = ChartDataType::"Actual Quantity") or (ChartDataType = ChartDataType::"Actual Time") then
                            Qty := GetProductionPostedCapacityLedgerQuantity(PorderStatus,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType,
                                                                       CalendarDate);


                        BusinessChartBuffer.SetValueByIndex(MeassureIndex, ColumnNo, Qty);
                        MeassureIndex += 1;
                    end;

                //DEMO
                if DemoActive then begin
                    Qty := GetProductionOrderRoutingLineQuantity(PorderStatus::Finished,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);

                    Qty += GetProductionOrderRoutingLineQuantity(PorderStatus::Released,
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);
                    Qty += GetProductionOrderRoutingLineQuantity(PorderStatus::"Firm Planned",
                                                                       CapacityNo,
                                                                       CapacityType,
                                                                       ChartDataType::"Planned Quantity",
                                                                       CalendarDate);

                    BusinessChartBuffer.SetValueByIndex(MeassureIndex, ColumnNo, Qty);
                end;

                ColumnNo += 1;
            until CalendarDate.Next() = 0;
    end;


}
*/ 





page 50039 ProdDeleteBomComponents
{

    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Delete BOM components';
    PageType = List;
    SourceTable = "Where-Used Line";
    SourceTableTemporary = true;
    UsageCategory = Lists;

    layout
    {

        area(Content)
        {
            repeater(repeater)
            {

                field("Item No."; Rec."Item No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the number of the item that the base item or production BOM is assigned to.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the description of the item to which the item or production BOM component is assigned.';
                }
                field("Production BOM No."; Rec."Production BOM No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Production BOM No. field.';
                }
                field("Entry No."; Rec."Entry No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Entry No. field.';
                }
            }
        }

    }


} 

page 50013 "ProductionControlling"
{
    /// <summary>
    /// Page SCANPANProductionLines (ID 50013).
    /// 2023.03.13          Jesper Harder                   001 Production Controlling
    /// 2024.10             Jesper Harder                   Code changes for better performance, Bom lookup not using build-in functions
    /// </summary>


    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Production Controlling Lines';
    DeleteAllowed = false;
    //Editable = false;
    PageType = List;
    Permissions =
        tabledata "BOM Buffer" = R,
        tabledata Item = R,
        tabledata "ProdControllingLinesTMP" = RIM,
        tabledata "Transfer Line" = R;
    SourceTable = "ProdControllingLinesTMP";
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            group(Selects)
            {
                Caption = 'Settings';

                group(Settings1)
                {
                    ShowCaption = false;

                    field(DateFormulaEndingDate; DateFormulaEndingDate)
                    {
                        Caption = 'Dateformula Ending Date';
                        DecimalPlaces = 0;
                        Editable = true;
                        ToolTip = 'Adjust the days for waringin in Ending Date.';
                        Width = 5;
                    }
                }
                group(Settings2)
                {
                    ShowCaption = false;

                    field(ShowTransferLines; ShowTransferLines)
                    {
                        Caption = 'Show Transfer Lines';
                        Editable = true;
                        ToolTip = 'Toggles calculation of Transfer Lines.';
                    }
                    field(ShowFirmPo; ShowFirmPo)
                    {
                        Caption = 'Show Firm Production Lines';
                        Editable = true;
                        ToolTip = 'Toggles calculation of Firmed Production Order Lines.';
                    }
                    field(ShowReleasedPO; ShowReleasedPO)
                    {
                        Caption = 'Show Released Production Lines';
                        Editable = true;
                        ToolTip = 'Toggles calculation of Released Production Order Lines.';
                    }
                }
            }
            repeater(General)
            {
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Shows Line numbber.';
                }
                field("Order Type"; Rec."Order Type")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Order Type field.';
                }
                field("Document No."; Rec."Document No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Document No. field.';
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Unfavorable;
                    StyleExpr = StyleExprEndingDateUnfaborable;
                    ToolTip = 'Specifies the value of the No. field.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Description field.';
                }
                field(Quantity; Rec.Quantity)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Quantity field.';
                }
                field("Remaining Quantity"; Rec."Remaining Quantity")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Remaining Quantity field.';
                }
                field("Finished Quantity"; Rec."Finished Quantity")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Finished Quantity field.';
                }
                field("Quantity Production Units"; Rec."Quantity Production Units")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Quantity Production Units field.';
                }
                field("Remaining Qty Production Units"; Rec."Remaining Qty Production Units")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Remaining Quantity Production Units field.';
                }
                field("Finished Qty Production Units"; Rec."Finished Qty Production Units")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Favorable;
                    StyleExpr = StyleExprFinishedQtyFavorable;
                    ToolTip = 'Specifies the value of the Finished Quantity Production Units field.';
                }
                field("Starting Date"; Rec."Starting Date")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Starting Date field.';
                }
                field("Ending Date"; Rec."Ending Date")
                {
                    ApplicationArea = Basic, Suite;
                    Style = Unfavorable;
                    StyleExpr = StyleExprEndingDateUnfaborable;
                    ToolTip = 'Specifies the value of the Ending Date field.';
                }
                field("Due Date"; Rec."Due Date")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Due Date field.';
                }
                field(Material; Rec.Material)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Material field.';
                }
                field("Route Type"; Rec."Route Type")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Route Type field.';
                }
                field(YearWeek; Rec.YearWeek)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the YearWeek field.';
                }
                field("Gen. Prod. Posting Group"; Rec."Gen. Prod. Posting Group")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Gen. Prod. Posting Group field.';
                }
                field("Product Line Code"; Rec."Product Line Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Product Line Code field.';
                }
                field("ABCD Category"; Rec."ABCD Category")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the ABCD Category field.';
                }
            }
        }
    }

    actions
    {
        area(Navigation)
        {
        }
        area(Processing)
        {
            action(GetLines)
            {
                Caption = 'Fetch Lines';
                image = GetLines;
                ToolTip = 'Get transfer and production lines.';
                trigger OnAction()
                begin
                    FillControllingTable();
                end;
            }

            action(EmptyTable)
            {
                Caption = 'Empty Table';
                Image = Table;
                ToolTip = 'Removes all data from this table.';
                trigger OnAction()
                begin
                    Rec.DeleteAll();
                end;
            }
        }
    }

    var
        ShowFirmPo: Boolean;
        ShowReleasedPO: Boolean;
        ShowTransferLines: Boolean;
        StyleExprEndingDateUnfaborable: Boolean;
        StyleExprFinishedQtyFavorable: Boolean;
        DateFormulaEndingDate: Decimal;
        EnumGetBomDetails: enum EnumGetBOMDetails;
        EnumProductionOrderStatus: Enum "EnumProductionOrderStatus";

    trigger OnAfterGetRecord()
    begin
        StyleExprFinishedQtyFavorable := false;
        if Rec."Remaining Qty Production Units" < 0 then StyleExprFinishedQtyFavorable := true;
        StyleExprEndingDateUnfaborable := false;
        if Rec."Ending Date" < Today + DateFormulaEndingDate then StyleExprEndingDateUnfaborable := true;
    end;

    local procedure FillControllingTable()
    var
        WindowDialog: Dialog;
    begin
        WindowDialog.Open('Opdaterer Controllingtabel');
        Rec.DeleteAll();
        if ShowTransferLines then FillFromTransferlines(true);
        if ShowFirmPo then FillFromProductionLines(true, EnumProductionOrderStatus::"Firm Planned");
        if ShowReleasedPO then FillFromProductionLines(true, EnumProductionOrderStatus::Released);
        if Rec.FindFirst() then;
        WindowDialog.Close();
    end;

    local procedure FillFromProductionLines(ShowDialog: Boolean; PoStatus: enum "EnumProductionOrderStatus")
    var
        Items: Record Item;
        ProdOrderLine: Record "Prod. Order Line";
        WindowDialog: Dialog;
        QuantityProductionUnits: Decimal;
        BatchSize: Integer;
        Counter: Integer;
        LineNo: Integer;
        MaxCount: Integer;
        pct: Integer;
        DynYearWeek: Text[10];
        MaterialTxt: Text[100];
        RouteType: Text[100];
        WindowText: text[50];
        Text000Lbl: Label 'Firmed Production Order Lines #1', Comment = '#1 = Counter';
        Text001Lbl: Label 'Released Production Order Lines #1', Comment = '#1 = Counter';
        Text002Lbl: Label 'Count';
        Text003Lbl: Label 'Processed';

    begin

        ProdOrderLine.Reset();
        ProdOrderLine.SetFilter(Status, '%1', PoStatus);
        LineNo := GetLastLineNo(Rec);
        if ProdOrderLine.FindSet() then begin
            MaxCount := ProdOrderLine.Count;
            if ShowDialog then begin
                if PoStatus = PoStatus::"Firm Planned" then WindowDialog.Open(Text000Lbl, WindowText);
                if PoStatus = PoStatus::Released then WindowDialog.Open(Text001Lbl, WindowText);
            end;

            WindowText := Text002Lbl + ' ' + Format(MaxCount) + ' ' + Text003Lbl + ' 0' + '%';
            if ShowDialog then WindowDialog.Update();

            repeat
                Counter += 1;

                BatchSize := MaxCount div 10; // Update every 10% to reduce frequency
                if Counter mod BatchSize = 0 then begin
                    pct := round((100 / MaxCount) * Counter, 1);

                    WindowText := Text002Lbl + ' ' + Format(MaxCount) + ' ' + Text003Lbl + ' ' + Format(pct) + '%';
                    if ShowDialog then WindowDialog.Update();
                end;

                // Construct Year-Week
                DynYearWeek := FomatYearWeek(ProdOrderLine."Ending Date");

                //BOM LOOKUP
                QuantityProductionUnits := LookupBOM(ProdOrderLine."Item No.");

                //Get Material (0)
                MaterialTxt := GetBOMDetailsProdOrderLine(ProdOrderLine, EnumGetBomDetails::Material);
                RouteType := GetBOMDetailsProdOrderLine(ProdOrderLine, EnumGetBomDetails::"Operation Type");


                Rec.Init();
                LineNo += 1;
                Rec."Line No." := LineNo;
                Rec."Order Type" := Rec."Order Type"::"Firm PO";
                if ProdOrderLine.Status = ProdOrderLine.Status::Released then
                    Rec."Order Type" := Rec."Order Type"::"Released PO";
                Rec."Document No." := ProdOrderLine."Prod. Order No.";
                Rec."No." := ProdOrderLine."Item No.";
                Rec.Description := ProdOrderLine.Description;
                Rec.Quantity := ProdOrderLine.Quantity;
                Rec."Finished Quantity" := ProdOrderLine."Finished Quantity";
                Rec."Remaining Quantity" := Rec.Quantity - Rec."Finished Quantity";

                Rec."Quantity Production Units" := Rec.Quantity * QuantityProductionUnits;
                Rec."Remaining Qty Production Units" := Rec."Remaining Quantity" * QuantityProductionUnits;
                Rec."Finished Qty Production Units" := Rec."Finished Quantity" * QuantityProductionUnits;

                if ProdOrderLine."Ending Date" <> 0D then begin
                    Rec."Starting Date" := ProdOrderLine."Starting Date";
                    Rec."Ending Date" := ProdOrderLine."Ending Date";
                    Rec."Due Date" := ProdOrderLine."Due Date";
                end;
                Rec.Material := MaterialTxt;
                Rec."Route Type" := RouteType;
                Rec.YearWeek := DynYearWeek;
                if Items.Get(ProdOrderLine."Item No.") then begin
                    Rec."Gen. Prod. Posting Group" := Items."Gen. Prod. Posting Group";
                    Rec."Product Line Code" := CopyStr(Items."Product Line Code", 1, 20);
                    Rec."ABCD Category" := Items."ABCD Category";
                end;

                if Rec.Insert(true) then;
            until ProdOrderLine.Next() = 0;
            if ShowDialog then WindowDialog.Close();
        end;
    end;

    local procedure FillFromTransferlines(ShowDialog: Boolean)
    var
        Items: Record Item;
        TransferLines: Record "Transfer Line";
        WindowDialog: Dialog;
        QuantityProductionUnits: Decimal;
        BatchSize: Integer;
        counter: Integer;
        LineNo: Integer;
        MaxCount: Integer;
        pct: Integer;
        DynYearWeek: Text[10];
        MaterialTxt: Text[100];
        RouteType: Text[100];
        WindowText: text[50];
        Text000Lbl: Label 'Transfer Order Lines #1', Comment = '#1 = Counter';
        Text002Lbl: Label 'Count';
        Text003Lbl: Label 'Processed';

    begin
        TransferLines.Reset();
        TransferLines.SetFilter("Transfer-from Code", 'RYOM');
        TransferLines.SetFilter("Transfer-to Code", 'AUNING');
        LineNo := GetLastLineNo(Rec);
        if TransferLines.FindSet() then begin
            MaxCount := TransferLines.Count;


            if ShowDialog then WindowDialog.Open(Text000Lbl, WindowText);
            repeat
                Counter += 1;

                BatchSize := MaxCount div 10; // Update every 10% to reduce frequency
                if Counter mod BatchSize = 0 then begin
                    pct := round((100 / MaxCount) * Counter, 1);

                    WindowText := Text002Lbl + ' ' + Format(MaxCount) + ' ' + Text003Lbl + ' ' + Format(pct) + '%';
                    if ShowDialog then WindowDialog.Update();
                end;

                // Construct Year-Week
                DynYearWeek := FomatYearWeek(TransferLines."Shipment Date");

                //BOM LOOKUP
                QuantityProductionUnits := LookupBOM(TransferLines."Item No.");

                //Get Material (0)
                MaterialTxt := GetBOMDetailsTransferLine(TransferLines, EnumGetBomDetails::Material);
                RouteType := GetBOMDetailsTransferLine(TransferLines, EnumGetBomDetails::"Operation Type");
                //end;

                Rec.Init();
                LineNo += 1;
                Rec."Line No." := LineNo;
                Rec."Order Type" := Rec."Order Type"::"Transfer Order";
                Rec."Document No." := TransferLines."Document No.";
                Rec."No." := TransferLines."Item No.";
                Rec.Description := TransferLines.Description;
                Rec.Quantity := TransferLines.Quantity;
                Rec."Finished Quantity" := TransferLines."Quantity Shipped";
                Rec."Remaining Quantity" := Rec.Quantity - Rec."Finished Quantity";

                Rec."Quantity Production Units" := Rec.Quantity * QuantityProductionUnits;
                Rec."Remaining Qty Production Units" := Rec."Remaining Quantity" * QuantityProductionUnits;
                Rec."Finished Qty Production Units" := Rec."Finished Quantity" * QuantityProductionUnits;

                if TransferLines."Shipment Date" <> 0D then begin
                    Rec."Starting Date" := TransferLines."Shipment Date";
                    Rec."Ending Date" := TransferLines."Shipment Date";
                    Rec."Due Date" := TransferLines."Shipment Date";
                end;
                Rec.Material := MaterialTxt;
                Rec."Route Type" := RouteType;
                Rec.YearWeek := DynYearWeek;
                if Items.Get(TransferLines."Item No.") then begin
                    Rec."Gen. Prod. Posting Group" := Items."Gen. Prod. Posting Group";
                    Rec."Product Line Code" := CopyStr(Items."Product Line Code", 1, 20);
                    Rec."ABCD Category" := Items."ABCD Category";
                end;

                if Rec.Insert(true) then;
            until TransferLines.Next() = 0;
            if ShowDialog then WindowDialog.Close();
        end;
    end;

    local procedure GetBOMDetailsTransferLine(TransferLine: Record "Transfer Line"; ExitType: Enum EnumGetBOMDetails): Text[50]
    begin

        // MATERIAL
        if ExitType = ExitType::Material then begin
            if TransferLine."Item No." = '00001' then exit('ALU');
            exit('STEEL');
        end;
        //ROUTE TYPE = MACHINE CENTER
        if ExitType = ExitType::"Operation Type" then
            exit('');

    end;

    local procedure GetBOMDetailsProdOrderLine(ProdOrderLine: Record "Prod. Order Line"; ExitType: Enum EnumGetBOMDetails): Text[50]
    var
        //Items: Record Item;
        ProdOrderComponent: Record "Prod. Order Component";
        ProdOrderRoutingLine: Record "Prod. Order Routing Line";
    begin

        // MATERIAL
        ProdOrderComponent.Reset();
        ProdOrderComponent.SetRange(Status, ProdOrderLine.Status);
        ProdOrderComponent.SetRange("Prod. Order No.", ProdOrderLine."Prod. Order No.");
        if ProdOrderComponent.FindFirst() then
            if ExitType = ExitType::Material then begin
                ProdOrderComponent.SetFilter("Item No.", '00001');
                if not ProdOrderComponent.IsEmpty() then exit('ALU');
                exit('STEEL');
            end;
        // key(Key1; Status, "Prod. Order No.", "Routing Reference No.", "Routing No.", "Operation No.")

        ProdOrderRoutingLine.Reset();
        ProdOrderRoutingLine.SetRange(Status, ProdOrderLine.Status);
        ProdOrderRoutingLine.SetRange("Prod. Order No.", ProdOrderLine."Prod. Order No.");
        if ProdOrderRoutingLine.FindFirst() then
            //ROUTE TYPE
            if ExitType = ExitType::"Operation Type" then begin
                //ProdOrderRoutingLine.SetFilter(Type, '%1|%2', ProdOrderRoutingLine.Type::"Machine Center",ProdOrderRoutingLine.Type::"Work Center");

                //INDUKTION AFDREJER2
                ProdOrderRoutingLine.SetFilter("No.", '16');
                if not ProdOrderRoutingLine.IsEmpty() then exit(CopyStr(ProdOrderRoutingLine.Description, 1, 50));

                //INDUKTION AFDREJER3
                ProdOrderRoutingLine.SetFilter("No.", '18');
                if not ProdOrderRoutingLine.IsEmpty() then exit(CopyStr(ProdOrderRoutingLine.Description, 1, 50));

                //Blankpolering
                ProdOrderRoutingLine.SetFilter("No.", '25');
                if not ProdOrderRoutingLine.IsEmpty() then exit(CopyStr(ProdOrderRoutingLine.Description, 1, 50));

                //Børstning
                ProdOrderRoutingLine.SetFilter("No.", '27');
                if not ProdOrderRoutingLine.IsEmpty() then exit(CopyStr(ProdOrderRoutingLine.Description, 1, 50));

                exit('');
            end;
    end;


    local procedure GetLastLineNo(var RecProdControllingLinesTMP: Record "ProdControllingLinesTMP"): Integer;
    var
    begin
        If RecProdControllingLinesTMP.FindLast() then exit(RecProdControllingLinesTMP."Line No.");
    end;

    local procedure LookupBOM(ItemNo: Code[20]): Decimal
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
    begin
        exit(ScanpanMiscellaneous.GetItemSetMultiplier(ItemNo));
    end;

    local procedure FomatYearWeek(DatoToConvert: Date): text[10]
    var
        CalcYearWeek: Text[10];
        Padding: Text[10];
    begin

        if DatoToConvert = 0D then
            exit('');

        Padding := Format(Date2DWY(DatoToConvert, 3));
        CalcYearWeek := Padding;
        Padding := Format(Date2DWY(DatoToConvert, 2));
        Padding := PadStr('', 2 - StrLen(Padding), '0') + Padding;
        CalcYearWeek += '-' + Padding;

        exit(CalcYearWeek);
    end;
}
 
/// <summary>
/// Page PurchLines_SC (ID 50017).
/// </summary>
///
/// 2023.03             Jesper Harder                   016     Purchase Lines
///
page 50017 "PurchLines"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'SCANPANPurchLines';
    PageType = List;
    SourceTable = "Purchase Line";
    UsageCategory = Lists;
    DeleteAllowed = false;
    InsertAllowed = false;
    Editable = false;
    Permissions =
        tabledata "Purchase Header" = R,
        tabledata "Purchase Line" = R;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("Buy-from Vendor No."; Rec."Buy-from Vendor No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Buy-from Vendor No.';
                }
                field("Document No."; Rec."Document No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the document number.';
                }
                field("Buy-from Vendor Name"; PurchaseHeader."Buy-from Vendor Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Buy-from Vendor Name.';
                }
                field("Type"; Rec."Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the line type.';
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the number of the involved entry or record, according to the specified number series.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies a description of the blanket purchase order.';
                }
                field(Quantity; Rec.Quantity)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the quantity of the purchase order line.';
                }
                field("Qty. to Receive"; Rec."Qty. to Receive")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the quantity of items that remains to be received.';
                }
                field("Quantity Received"; Rec."Quantity Received")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies how many units of the item on the line have been posted as received.';
                }
                field("Qty. Rcd. Not Invoiced"; Rec."Qty. Rcd. Not Invoiced")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the quantity of the received item that has been posted as received but that has not yet been posted as invoiced.';
                }
                field("Quantity Invoiced"; Rec."Quantity Invoiced")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies how many units of the item on the line have been posted as invoiced.';
                }
                field("Order Date"; Rec."Order Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Order Date.';
                }
                field("Planned Receipt Date"; Rec."Planned Receipt Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies Planned Receipt Date.';
                }
                field("Promised Receipt Date"; Rec."Promised Receipt Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies Promiced Receipt Date.';
                }
            }
        }
    }
    actions
    {
        area(Processing)
        {
            group(SCANPAN)
            {
                action(ReceivedNotInvoiced)
                {
                    Image = Action;
                    Caption = 'Received Not Invoiced';
                    ToolTip = 'Toggle Received Not Invoiced.';
                    trigger OnAction()
                    var
                    begin
                        ToggleReceivedNotInvoiced();
                    end;
                }
            }
        }
    }

    var
        PurchaseHeader: Record "Purchase Header";
        ToggleRecvedNotInvoiced: Boolean;

    trigger OnAfterGetRecord()
    var
    begin
        PurchaseHeader.Get(Rec."Document Type", Rec."Document No.")
    end;

    local procedure ToggleReceivedNotInvoiced()
    var
    begin
        ToggleRecvedNotInvoiced := not ToggleRecvedNotInvoiced;
        Rec.SetRange("Qty. Rcd. Not Invoiced");
        if ToggleRecvedNotInvoiced then Rec.SetFilter("Qty. Rcd. Not Invoiced", '<>0');
    end;
}
 
page 50045 "SalesBackordersInterCompany"
{
    PageType = List;
    Caption = 'Sales Backorders InterCompany';
    UsageCategory = Lists;
    ApplicationArea = all;
    SourceTable = Integer;
    SourceTableView = where(Number = filter(1 .. 10000));
    Editable = false;

    layout
    {
        area(Content)
        {
            repeater(repeater)
            {
                field(Number; Rec.Number)
                {
                    Caption = 'Line Number';
                    ToolTip = 'Specifies the Excel row number.';
                }
                field(SalesOrderNumberNO; GetSalesNO(Rec.Number, 1))
                {
                    Caption = 'Salesorder NO';
                    ToolTip = 'Specifies the value of the SalesOrderNumberNO field.';
                }
                field(SalesNOdeleteBackOrder; GetSalesNO(Rec.Number, 2))
                {
                    Caption = 'Delete BackOrder NO';
                    ToolTip = 'Specifies the value of the SalesNOdeleteBackOrder field.';
                }
                field(PurchaseOrderNumberNO; GetPurchaseNO(
                                                GetSalesNO(Rec.Number, 1)
                                                    , 1))
                {
                    Caption = 'Purchaseorder NO';
                    ToolTip = 'Specifies the value of the Purchaseorder NO field.';
                }
                field(SalesOrderNumberDK; GetSalesDK(
                                                    GetPurchaseNO(
                                                        GetSalesNO(Rec.Number, 1)
                                                        , 2)))
                {
                    Caption = 'Salesorder DK';
                    ToolTip = 'Specifies the value of the Salesorder DK field.';
                }
            }
        }
    }

    var




    local procedure GetSalesNO(c: Integer; ReturnType: Integer): Text
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        FirstSalesLine: Integer;
    begin
        SalesHeader.ChangeCompany('SCANPAN Norge');
        SalesLine.ChangeCompany('SCANPAN Norge');
        SalesLine.SetFilter("Document Type", '%1', SalesLine."Document Type"::Order);
        FirstSalesLine := 0;
        if SalesLine.FindSet() then
            repeat
                SalesHeader.SetFilter("Document Type", '%1', SalesLine."Document Type");
                SalesHeader.SetFilter("No.", SalesLine."Document No.");
                SalesHeader.SetFilter("Del. SO's With Rem. Qty. NOTO", '%1', true);
                if SalesHeader.FindFirst() then begin
                    FirstSalesLine += 1;
                    if FirstSalesLine = c then begin
                        if ReturnType = 1 then exit(SalesLine."Document No.");
                        if ReturnType = 2 then exit(Format(SalesHeader."Del. SO's With Rem. Qty. NOTO"));
                    end;
                end
            until SalesLine.Next() = 0;
    end;

    local procedure GetPurchaseNO(OrderNo: Text; ReturnType: Integer): Text
    var
        PurchaseHeader: Record "Purchase Header";
        PurchaseLine: Record "Purchase Line";
    begin
        if OrderNo = '' then exit('');

        PurchaseHeader.ChangeCompany('SCANPAN Norge');
        PurchaseLine.ChangeCompany('SCANPAN Norge');
        PurchaseLine.SetFilter("Document Type", '%1', PurchaseLine."Document Type"::Order);
        PurchaseLine.SetFilter("Sales Order No.", OrderNo);
        if PurchaseLine.FindFirst() then begin
            PurchaseHeader.SetRange("Document Type", PurchaseLine."Document Type");
            PurchaseHeader.SetRange("No.", PurchaseLine."Document No.");
            PurchaseHeader.FindFirst();
            if ReturnType = 1 then
                exit(PurchaseLine."Document No.");
            if ReturnType = 2 then
                exit(PurchaseHeader."Vendor Order No.");

        end;


    end;

    local procedure GetSalesDK(OrderNo: Text): Text
    var
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
    begin
        if OrderNo = '' then exit('');

        SalesHeader.ChangeCompany('SCANPAN Danmark');
        SalesLine.ChangeCompany('SCANPAN Danmark');
        SalesLine.SetFilter("Document Type", '%1', SalesLine."Document Type"::Order);
        SalesLine.SetFilter("Document No.", OrderNo);
        if SalesLine.FindFirst() then
            exit(SalesLine."Document No.");
    end;
} 
/// <summary>
/// Page Invoice Lines (ID 50035).
/// </summary>
/// <remarks>
/// 2023.05.01              Jesper Harder                       028     SalesCommision
/// 2023.06.15              Jesper Harder                       028     Changes to layout
/// </remarks>

page 50035 "Sales Commission"
{
    AdditionalSearchTerms = 'Scanpan, Salesperson';
    ApplicationArea = All;
    Caption = 'Sales Commission (Items)';
    Editable = false;
    PageType = List;
    Permissions = 
        tabledata Campaign = R,
        tabledata Customer = R,
        tabledata "Sales Cr.Memo Header" = R,
        tabledata "Sales Cr.Memo Line" = R,
        tabledata "Sales Invoice Header" = R,
        tabledata "Sales Invoice Line" = R,
        tabledata "Salesperson/Purchaser" = R;
    SourceTable = "DocumentLines";
    SourceTableView = sorting("Posting Date") order(ascending);
    SourceTableTemporary = true;
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            repeater(lines)
            {
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Line No. field.';
                    Visible = HideLineDetails;
                }
                field("Customer No."; Rec."Customer No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer No. field.';
                }
                field("Customer Name"; Rec."Customer Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Customer Name field.';
                }
                field("Posting Date"; Rec."Posting Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Posting Date field.';
                }
                field("Document Type"; Rec."Document Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Document Type field.';
                    Visible = HideLineDetails;
                }
                field("Document No."; Rec."Document No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Document No. field.';
                }
                field("Currency Code"; Rec."Currency Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Currency Code field.';
                }
                field("Currency Factor"; Rec."Currency Factor")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Currency Factor field.';
                    Visible = HideLineDetails;
                }
                field("Salesperson Code"; Rec."Salesperson Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Salesperson Code field.';
                }
                field("Salesperson Name"; Rec."Salesperson Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Salesperson Name field.';
                }
                field("Salesperson Commission %"; Rec."Salesperson Commission %")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Salespersion Commission % field.';
                }
                field("Item No."; Rec."Item No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item No. field.';
                    Visible = HideLineDetails;
                }
                field("Item Desription"; Rec."Item Desription")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item Description field.';
                    Visible = HideLineDetails;
                }
                field(Quantity; Rec.Quantity)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Quantity field.';
                    Visible = HideLineDetails;
                }
                field("Campaign Code"; Rec."Campaign Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Campaign Code field.';
                    Visible = HideLineDetails;
                }
                field("Campaign Name"; Rec."Campaign Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Campaign Name field.';
                    Visible = HideLineDetails;
                }
                field("Starting Date"; Rec."Starting Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Campaign Starting Date field.';
                    Visible = HideLineDetails;
                }
                field("Ending Date"; Rec."Ending Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Campaign Ending Date field.';
                    Visible = HideLineDetails;
                }
                field(Amount; Rec.Amount)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Amount field.';
                }
                field("Commission Amount"; Rec."Commission Amount")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Commission Amount field.';
                }
                field("Amount(RV)"; Rec."Amount(RV)")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Amount(RV) field.';
                    Visible = HideLineDetails;
                }
                field("Commission Amount(RV)"; Rec."Commission Amount(RV)")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Commission Amount(RV) field.';
                    Visible = HideLineDetails;
                }
            }

            group(totals)
            {
                Enabled = TotalsVisible;
                ShowCaption = false;
                Visible = HideLineDetails;

                field(TotalAmount; TotalAmount)
                {
                    Visible = HideLineDetails;
                    ToolTip = 'Specifies the value of the TotalAmount field.';
                    Caption = 'Total Amount';
                }
                field(TotalAmountRV; TotalAmountRV)
                {
                    Visible = HideLineDetails;
                    ToolTip = 'Specifies the value of the TotalAmountRV field.';
                    Caption = 'Total Amount RV';
                }
                field(TotalCommission; TotalCommission)
                {
                    Visible = HideLineDetails;
                    ToolTip = 'Specifies the value of the TotalCommission field.';
                    Caption = 'Total Commission';
                }
                field(TotalCommissionRV; TotalCommissionRV)
                {
                    Visible = HideLineDetails;
                    ToolTip = 'Specifies the value of the TotalCommissionRV field.';
                    Caption = 'Total Commission RV';
                }
            }
        }
    }
    var
        HideLineDetails: Boolean;
        TotalAmount: Decimal;
        TotalAmountRV: Decimal;
        TotalCommission: Decimal;
        TotalCommissionRV: Decimal;
        LineNo: Integer;
        TotalsVisible: Boolean;

    //Testing Local change of language ID

    trigger OnInit()
    begin
        HideLineDetails := false;
        TotalsVisible := false;
    end;

    trigger OnOpenPage()
    var
        Customers: Record Customer;
        TempDocumentLines: Record "DocumentLines" temporary;
        varFilterPageBuilder: FilterPageBuilder;
        Text001Lbl: Label 'Sales Commision';
    begin

        varFilterPageBuilder.PageCaption := Text001Lbl;

        varFilterPageBuilder.AddRecord('PageFilter', TempDocumentLines);
        varFilterPageBuilder.AddField('PageFilter', TempDocumentLines."Posting Date");
        varFilterPageBuilder.AddField('PageFilter', TempDocumentLines."Show Lines");

        varFilterPageBuilder.AddRecord('Customers', Customers);
        varFilterPageBuilder.AddField('Customers', Customers."No.");
        varFilterPageBuilder.AddField('Customers', Customers."Salesperson Code");

        //varFilterPageBuilder.AddRecord('Campaigns', Campaigns);
        //varFilterPageBuilder.AddField('Campaigns', Campaigns."No.");

        varFilterPageBuilder.RunModal();

        BuildDataSetInvoice(varFilterPageBuilder);
        BuildDataSetCreditNote(varFilterPageBuilder);
    end;

    trigger OnAfterGetRecord()
    var
    begin
    end;

    trigger OnAfterGetCurrRecord()
    begin
        /*
        Rec.CalcSums(Amount, "Amount(RV)", "Commission Amount", "Commission Amount(RV)");
        TotalAmount := Rec.Amount;
        TotalAmountRV := Rec."Amount(RV)";
        TotalCommission := Rec."Commission Amount";
        TotalCommissionRV := rec."Commission Amount(RV)";
        CurrPage.Update(false);
        */
    end;

    local procedure BuildDataSetCreditNote(FilterPageBuilder: FilterPageBuilder)
    var
        CampaignLookup: Record Campaign;
        Campaigns: Record Campaign;
        Customers: Record Customer;
        TempDocumentLines: Record "DocumentLines" temporary;
        SalesCrMemoHeader: Record "Sales Cr.Memo Header";
        SalesCrMemoLine: Record "Sales Cr.Memo Line";
        SalesPersonPurchaser: Record "Salesperson/Purchaser";
        ShowLines: Boolean;

        AmountDec: Decimal;
        AmountRV: Decimal;
        Commission: Decimal;
        CommissionRV: Decimal;
        PostingDateFilter: Text[100];
    begin
        Customers.SetView(FilterPageBuilder.GetView('Customers'));
        Campaigns.SetView(FilterPageBuilder.GetView('Campaigns'));
        if Campaigns.HasFilter then CampaignLookup.CopyFilters(Campaigns);
        TempDocumentLines.SetView(FilterPageBuilder.GetView('PageFilter'));
        PostingDateFilter := CopyStr(TempDocumentLines.GetFilter("Posting Date"), 1, 100);

        ShowLines := false;
        case TempDocumentLines.GetFilter("Show Lines") of
            'Ja':
                ShowLines := true;
            'Yes':
                ShowLines := true;
        end;
        //Toggle Fields visibility
        HideLineDetails := ShowLines;

        if Customers.FindSet() then
            repeat
                SalesCrMemoHeader.SetFilter("Bill-to Customer No.", Customers."No.");
                SalesCrMemoHeader.SetFilter("Posting Date", PostingDateFilter);
                if SalesCrMemoHeader.FindSet() then
                    repeat
                        Rec.Init();
                        Rec."Show Lines" := ShowLines;
                        Rec."Customer No." := SalesCrMemoHeader."Bill-to Customer No.";
                        Rec."Customer Name" := SalesCrMemoHeader."Bill-to Name";
                        Rec."Document Type" := Rec."Document Type"::"Posted Sales Ceredit Memo";
                        Rec."Document No." := SalesCrMemoHeader."No.";
                        Rec."Posting Date" := SalesCrMemoHeader."Posting Date";
                        Rec."Currency Factor" := SalesCrMemoHeader."Currency Factor";
                        if Rec."Currency Factor" = 0 then Rec."Currency Factor" := 1;
                        Rec."Currency Code" := SalesCrMemoHeader."Currency Code";
                        //if Rec."Currency Code" = '' then Rec."Currency Code" := 'DKR';
                        Rec."Salesperson Code" := SalesCrMemoHeader."Salesperson Code";
                        if SalesPersonPurchaser.Get(SalesCrMemoHeader."Salesperson Code") then begin
                            Rec."Salesperson Name" := SalesPersonPurchaser.Name;
                            Rec."Salesperson Commission %" := SalesPersonPurchaser."Commission %";
                        end;

                        //Document Lines
                        AmountDec := 0;
                        AmountRV := 0;
                        Commission := 0;
                        CommissionRV := 0;

                        SalesCrMemoLine.SetFilter("Document No.", SalesCrMemoHeader."No.");
                        SalesCrMemoLine.SetFilter(Type, '%1', SalesCrMemoLine.Type::Item);
                        SalesCrMemoLine.SetFilter("Quantity (Base)", '<>0');
                        if SalesCrMemoLine.FindSet() then begin

                            repeat
                                if ShowLines then begin
                                    Rec."Item No." := SalesCrMemoLine."No.";
                                    Rec."Item Desription" := SalesCrMemoLine.Description;
                                    Rec.Quantity := -SalesCrMemoLine."Quantity (Base)";
                                    Rec.Amount := -SalesCrMemoLine."Line Amount";
                                    Rec."Amount(RV)" := Rec.Amount / Rec."Currency Factor";

                                    if Rec."Salesperson Commission %" <> 0 then begin
                                        Rec."Commission Amount" := Rec.Amount * (Rec."Salesperson Commission %" / 100);
                                        Rec."Commission Amount(RV)" := Rec."Commission Amount" / Rec."Currency Factor";
                                    end;

                                    LineNo += 1;
                                    Rec."Line No." := LineNo;
                                    if Rec.Insert() then;
                                end else
                                    //Only Headers
                                    if not ShowLines then begin
                                        AmountDec += -SalesCrMemoLine."Line Amount";
                                        AmountRV := AmountDec / Rec."Currency Factor";

                                        if Rec."Salesperson Commission %" <> 0 then begin
                                            Commission := AmountDec * (Rec."Salesperson Commission %" / 100);
                                            CommissionRV := Commission / Rec."Currency Factor";
                                        end;
                                    end;
                            until SalesCrMemoLine.Next() = 0;
                            //Only Headers
                            if not ShowLines then begin
                                Rec.Amount := AmountDec;
                                Rec."Amount(RV)" := AmountRV;
                                Rec."Commission Amount" := Commission;
                                Rec."Commission Amount(RV)" := CommissionRV;

                                LineNo += 1;
                                Rec."Line No." := LineNo;
                                if Rec.Insert() then;
                            end;
                        end;
                    until SalesCrMemoHeader.Next() = 0;
            until Customers.Next() = 0;

        //Totals
        if Rec.FindSet() then begin

            Rec.CalcSums(Amount, "Amount(RV)", "Commission Amount", "Commission Amount(RV)");
            TotalAmount := Rec.Amount;
            TotalAmountRV := Rec."Amount(RV)";
            TotalCommission := Rec."Commission Amount";
            TotalCommissionRV := rec."Commission Amount(RV)";
        end;
        if Rec.FindFirst() then;
    end;

    local procedure BuildDataSetInvoice(FilterPageBuilder: FilterPageBuilder)
    var
        CampaignLookup: Record Campaign;
        Campaigns: Record Campaign;
        Customers: Record Customer;
        TempDocumentLines: Record "DocumentLines" temporary;
        SalesInvoiceHeader: Record "Sales Invoice Header";
        SalesInvoiceLine: Record "Sales Invoice Line";
        SalesPersonPurchaser: Record "Salesperson/Purchaser";

        ShowLines: Boolean;

        AmountDec: Decimal;
        AmountRV: Decimal;
        Commission: Decimal;
        CommissionRV: Decimal;
        PostingDateFilter: Text[100];
    begin
        Customers.SetView(FilterPageBuilder.GetView('Customers'));
        Campaigns.SetView(FilterPageBuilder.GetView('Campaigns'));
        if Campaigns.HasFilter then CampaignLookup.CopyFilters(Campaigns);
        TempDocumentLines.SetView(FilterPageBuilder.GetView('PageFilter'));
        PostingDateFilter := CopyStr(TempDocumentLines.GetFilter("Posting Date"), 1, 100);

        ShowLines := false;
        case TempDocumentLines.GetFilter("Show Lines") of
            'Ja':
                ShowLines := true;
            'Yes':
                ShowLines := true;
        end;
        //Toggle Fields visibility
        HideLineDetails := ShowLines;

        if Customers.FindSet() then
            repeat
                SalesInvoiceHeader.SetFilter("Bill-to Customer No.", Customers."No.");
                SalesInvoiceHeader.SetFilter("Posting Date", PostingDateFilter);
                if SalesInvoiceHeader.FindSet() then
                    repeat
                        Rec.Init();
                        Rec."Show Lines" := ShowLines;
                        Rec."Customer No." := SalesInvoiceHeader."Bill-to Customer No.";
                        Rec."Customer Name" := SalesInvoiceHeader."Bill-to Name";
                        Rec."Document Type" := Rec."Document Type"::"Posted Sales Invoice";
                        Rec."Document No." := SalesInvoiceHeader."No.";
                        Rec."Posting Date" := SalesInvoiceHeader."Posting Date";
                        Rec."Currency Factor" := SalesInvoiceHeader."Currency Factor";
                        if Rec."Currency Factor" = 0 then Rec."Currency Factor" := 1;
                        Rec."Currency Code" := SalesInvoiceHeader."Currency Code";
                        //if Rec."Currency Code" = '' then Rec."Currency Code" := 'DKR';
                        Rec."Salesperson Code" := SalesInvoiceHeader."Salesperson Code";
                        if SalesPersonPurchaser.Get(SalesInvoiceHeader."Salesperson Code") then begin
                            Rec."Salesperson Name" := SalesPersonPurchaser.Name;
                            Rec."Salesperson Commission %" := SalesPersonPurchaser."Commission %";
                        end;

                        //Document Lines
                        AmountDec := 0;
                        AmountRV := 0;
                        Commission := 0;
                        CommissionRV := 0;

                        SalesInvoiceLine.SetFilter("Document No.", SalesInvoiceHeader."No.");
                        SalesInvoiceLine.SetFilter(Type, '%1', SalesInvoiceLine.Type::Item);
                        SalesInvoiceLine.SetFilter("Quantity (Base)", '<>0');
                        if SalesInvoiceLine.FindSet() then begin

                            repeat
                                if ShowLines then begin
                                    //CAMPAIGNS LOOP

                                    Rec."Item No." := SalesInvoiceLine."No.";
                                    Rec."Item Desription" := SalesInvoiceLine.Description;
                                    Rec.Quantity := SalesInvoiceLine."Quantity (Base)";

                                    Rec."Campaign Code" := SalesInvoiceLine."Used Campaign NOTO";

                                    if CampaignLookup.Get(SalesInvoiceLine."Used Campaign NOTO") then begin
                                        Rec."Campaign Name" := CampaignLookup.Description;
                                        Rec."Starting Date" := CampaignLookup."Starting Date";
                                        Rec."Ending Date" := CampaignLookup."Ending Date";
                                    end;

                                    Rec.Amount := SalesInvoiceLine."Line Amount";
                                    Rec."Amount(RV)" := Rec.Amount / Rec."Currency Factor";

                                    if Rec."Salesperson Commission %" <> 0 then begin
                                        Rec."Commission Amount" := Rec.Amount * (Rec."Salesperson Commission %" / 100);
                                        Rec."Commission Amount(RV)" := Rec."Commission Amount" / Rec."Currency Factor";
                                    end;

                                    LineNo += 1;
                                    Rec."Line No." := LineNo;
                                    if Rec.Insert() then;
                                end else
                                    //Only Headers
                                    if not ShowLines then begin
                                        AmountDec += SalesInvoiceLine."Line Amount";
                                        AmountRV := AmountDec / Rec."Currency Factor";

                                        if Rec."Salesperson Commission %" <> 0 then begin
                                            Commission := AmountDec * (Rec."Salesperson Commission %" / 100);
                                            CommissionRV := Commission / Rec."Currency Factor";
                                        end;
                                    end;
                            until SalesInvoiceLine.Next() = 0;
                            //Only Headers
                            if not ShowLines then begin
                                Rec.Amount := AmountDec;
                                Rec."Amount(RV)" := AmountRV;
                                Rec."Commission Amount" := Commission;
                                Rec."Commission Amount(RV)" := CommissionRV;

                                LineNo += 1;
                                Rec."Line No." := LineNo;
                                if Rec.Insert() then;
                            end;
                        end;
                    until SalesInvoiceHeader.Next() = 0;
            until Customers.Next() = 0;

        //Totals
        if Rec.FindSet() then begin

            Rec.CalcSums(Amount, "Amount(RV)", "Commission Amount", "Commission Amount(RV)");
            TotalAmount := Rec.Amount;
            TotalAmountRV := Rec."Amount(RV)";
            TotalCommission := Rec."Commission Amount";
            TotalCommissionRV := rec."Commission Amount(RV)";
        end;
        if Rec.FindFirst() then;
    end;
} 
/// <summary>
/// Page "SCANPANSalesLine" (ID 50020).
/// </summary>
///
/// <remarks>
///
/// 2023.03             Jesper Harder       005         Added
/// 2023.03.27          Jesper Harder       015         Flowfield Tariff - SalesLine
/// 2024.04             Jesper Harder       065         Filter and output of ItemUnitQuantity added
///
/// </remarks>
///
page 50020 "SalesLine"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite, Service;
    Caption = 'Sales Line';
    Editable = true;
    PageType = List;
    Permissions =
        tabledata Customer = R,
        tabledata Item = R,
        tabledata "Sales Header" = R,
        tabledata SalesLineTMP = RIMD,
        tabledata "Salesperson/Purchaser" = R;
    QueryCategory = 'Sales Order List';
    SourceTable = SalesLineTMP;
    //SourceTableView = sorting("Document Type", "Document No.", "Line No.") where("Document Type" = const("Order"));
    UsageCategory = Lists;

    layout
    {
        area(Content)
        {
            group(detaling)
            {
                ShowCaption = false;

                field(CustomerNoFilter; CustomerNoFilter)
                {
                    Caption = 'Sell-To Customer Filter';
                    Editable = true;
                    TableRelation = Customer;
                    ToolTip = 'Specifies the value of the Sell-To Customer Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(SalesPersonFilter; SalesPersonFilter)
                {
                    Caption = 'Salesperson Filter';
                    Editable = true;
                    TableRelation = "Salesperson/Purchaser";
                    ToolTip = 'Specifies the value of the Salesperson Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(CountryFilter; CountryFilter)
                {
                    Caption = 'Country Filter';
                    Editable = true;
                    TableRelation = "Country/Region";
                    ToolTip = 'Specifies the value of the Country Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(ItemUnitsFilter; ItemUnitsFilter)
                {
                    Caption = 'Units Filter';
                    Editable = true;
                    TableRelation = "Unit of Measure";
                    ToolTip = 'Specifies the value of the Unit of Measure Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(OutstandingQuantityFilter; OutstandingQuantityFilter)
                {
                    Caption = 'Toggle Outstanding Quantity';
                    Enabled = true;
                    ToolTip = 'Toggle Outstanding Quantity filter.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(QtyShippedNotInvoicedFilter; QtyShippedNotInvoicedFilter)
                {
                    Caption = 'Toggle Shipped Not Invoiced';
                    Enabled = true;
                    ToolTip = 'Toggle Shipped Not Invoiced Quantity filter.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(ToggleHeadlines; ToggleHeadlines)
                {
                    Caption = 'Toggle Headlines';
                    Enabled = true;
                    ToolTip = 'Toggle show Headlines.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
            }

            repeater(Control1)
            {
                Editable = false;

                //ShowCaption = false;
                field("Line No."; "Line No.")
                {
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field("Document Status"; Rec."Document Status")
                {
                    ToolTip = 'Specifies the value of the Document Status field.';
                }
                field("Document No."; Rec."Document No.")
                {
                    ToolTip = 'Specifies the value of the Document No. field.';
                    trigger OnDrillDown()
                    var
                        SalesHeader: Record "Sales Header";
                        SalesOrderPage: Page "Sales Order";
                    begin
                        SalesHeader.Get(SalesHeader."Document Type"::Order, Rec."Document No.");
                        SalesOrderPage.SetRecord(SalesHeader);
                        SalesOrderPage.Run();
                    end;
                }
                field("Sell-To Customer No."; Rec."Sell-To Customer No.")
                {
                    ToolTip = 'Specifies the value of the Sell-To Customer No. field.';
                    trigger OnDrillDown()
                    var
                        Customers: Record Customer;
                        CustomerPage: Page "Customer Card";
                    begin
                        Customers.Get(Rec."Sell-To Customer No.");
                        CustomerPage.SetRecord(Customers);
                        CustomerPage.Run();
                    end;
                }
                field("Sell-To Customer Name"; Rec."Sell-To Customer Name")
                {
                    Style = StrongAccent;
                    StyleExpr = ToggleSellToCustomerNameStyle;
                    ToolTip = 'Specifies the value of the Sell-To Customer Name field.';
                }
                field("Ship-To Name"; Rec."Ship-To Name")
                {
                    ToolTip = 'Specifies the value of the Ship-To Name field.';
                }
                field(Type; Rec.Type)
                {
                    ToolTip = 'Specifies the value of the Type field.';
                }
                field("No."; Rec."No.")
                {
                    ToolTip = 'Specifies the value of the No. field.';
                    trigger OnDrillDown()
                    var
                        Items: Record Item;
                        ItemPage: Page "Item Card";
                    begin
                        Items.Get(Rec."No.");
                        ItemPage.SetRecord(Items);
                        ItemPage.Run();
                    end;
                }
                field("Item Cross-Reference No."; Rec."Item Cross-Reference No.")
                {
                    ToolTip = 'Specifies the value of the Item Cross-Reference No. field.';
                }
                field("Tariff No."; Rec."Tariff No.")
                {
                    ToolTip = 'Specifies the value of the Tariff No. field.';
                }
                field(Description; Rec.Description)
                {
                    ToolTip = 'Specifies the value of the Description field.';
                }
                field(ItemUnitCode; ItemUnitCode)
                {
                    ToolTip = 'Specifies the value of the Item Unit Code field.';
                }
                field(ItemUnitQuantity; ItemUnitQuantity)
                {
                    ToolTip = 'Specifies the value of the ItemUnitQuantity field.';
                }
                field("Unit Price"; Rec."Unit Price")
                {
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the value of the Unit Price field.';
                }
                field(Quantity; Rec."Quantity")
                {
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Quantity field.';
                }
                field("Outstanding Quantity"; Rec."Outstanding Quantity")
                {
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Outstanding Quantity field.';
                }
                field("Qty. Shipped Not Invoiced"; Rec."Qty. Shipped Not Invoiced")
                {
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Qty. Shipped Not Invoiced field.';
                }
                field("Line Amount"; Rec."Line Amount")
                {
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Line Amount field.';
                }
                field("Outstanding Amount"; Rec."Outstanding Amount")
                {
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Outstanding Amount field.';
                }
                field("Currency Code"; Rec."Currency Code")
                {
                    ToolTip = 'Specifies the value of the Currency Code field.';
                }
                field("Planned Shipment Date"; Rec."Planned Shipment Date")
                {
                    ToolTip = 'Specifies the value of the Planned Shipment Date field.';
                }
                field("External Ref."; Rec."External Document No.")
                {
                    ToolTip = 'Specifies the value of the External Document No. field.';
                }
                field("Salesperson Code"; Rec."Salesperson Code")
                {
                    ToolTip = 'Specifies the value of the Salesperson Code field.';
                    trigger OnDrillDown()
                    var
                        SalesPerson: Record "Salesperson/Purchaser";
                        SalesPersonPage: Page "Salesperson/Purchaser Card";
                    begin
                        SalesPerson.Get(Rec."Salesperson Code");
                        SalesPersonPage.SetRecord(SalesPerson);
                        SalesPersonPage.Run();
                    end;
                }
                field(Priority; Rec.Priority)
                {
                    ToolTip = 'Specifies the value of the Order Priority field.';
                }
                field("Location Code"; Rec."Location Code")
                {
                    ApplicationArea = Basic, Suite, Service;
                    ToolTip = 'Specifies the value of the Location Code field.';
                }
            }
        }
    }
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        OutstandingQuantityFilter: Boolean;

        QtyShippedNotInvoicedFilter: Boolean;
        ToggleHeadlines: Boolean;

        ToggleSellToCustomerNameStyle: Boolean;
        CountryFilter: code[50];
        CustomerNoFilter: Code[50];
        SalesPersonFilter: code[50];
        ItemUnitsFilter: code[50];

    trigger OnInit()
    var
    begin
        ToggleHeadlines := true;
        ScanpanMiscellaneous.FillSalesLineListPage(Rec, false, '', '', '', false, true, '');
    end;

    trigger OnAfterGetRecord()
    var
    begin
        ToggleSellToCustomerNameStyle := false;
        if Rec."Document No." = '' then ToggleSellToCustomerNameStyle := true;
    end;

    local procedure UpdateFilters()
    var
    begin
        ScanpanMiscellaneous.FillSalesLineListPage(Rec, QtyShippedNotInvoicedFilter, SalesPersonFilter, CountryFilter, CustomerNoFilter, OutstandingQuantityFilter, ToggleHeadlines, ItemUnitsFilter);
    end;
}
 



/// <summary>
/// Page "SCANPANSalesLine" (ID 50020).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03                     Jesper Harder                   005     Added
/// 2023.03.27                  Jesper Harder                   015     Flowfield Tariff - SalesLine   
/// 
/// </remarks>
/// 
/// 


page 50034 "SalesLine1"
{
    ApplicationArea = Basic, Suite, Service;
    AdditionalSearchTerms = 'Scanpan';
    Caption = '(DEV)Sales Line';
    PageType = Document;
    SourceTable = SalesLineTMP;
    //SourceTableView = sorting("Document Type", "Document No.", "Line No.") where("Document Type" = const("Order"));
    UsageCategory = Lists;
    QueryCategory = 'Sales Order List';
    Editable = true;

    layout
    {

        area(Content)
        {
            group(detaling)
            {
                ShowCaption = false;

                field(CustomerNoFilter; CustomerNoFilter)
                {
                    Editable = true;
                    Caption = 'Sell-To Customer Filter';
                    TableRelation = Customer;
                    ToolTip = 'Specifies the value of the Sell-To Customer Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(SalesPersonFilter; SalesPersonFilter)
                {
                    Editable = true;
                    Caption = 'Salesperson Filter';
                    TableRelation = "Salesperson/Purchaser";
                    ToolTip = 'Specifies the value of the Salesperson Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(CountryFilter; CountryFilter)
                {
                    Editable = true;
                    Caption = 'Country Filter';
                    TableRelation = "Country/Region";
                    ToolTip = 'Specifies the value of the Country Filter field.';
                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(OutstandingQuantityFilter; OutstandingQuantityFilter)
                {
                    Enabled = true;
                    Caption = 'Toggle Outstanding Quantity';
                    ToolTip = 'Toggle Outstanding Quantity filter.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(QtyShippedNotInvoicedFilter; QtyShippedNotInvoicedFilter)
                {
                    Enabled = true;
                    Caption = 'Toggle Shipped Not Invoiced';
                    ToolTip = 'Toggle Shipped Not Invoiced Quantity filter.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;
                }
                field(ToggleHeadlines; ToggleHeadlines)
                {
                    Enabled = true;
                    Caption = 'Toggle Headlines';
                    ToolTip = 'Toggle show Headlines.';

                    trigger OnValidate()
                    var
                    begin
                        UpdateFilters();
                    end;

                }
            }

        }
    }

    var
        SCANPANmisc: Codeunit ScanpanMiscellaneous;
        CustomerNoFilter: Code[50];
        SalesPersonFilter: code[50];
        CountryFilter: code[50];

        QtyShippedNotInvoicedFilter: Boolean;
        OutstandingQuantityFilter: Boolean;

        ToggleSellToCustomerNameStyle: Boolean;
        ToggleHeadlines: Boolean;

    trigger OnInit()
    var
    begin
        ToggleHeadlines := true;
        SCANPANmisc.FillSalesLineListPage(Rec, false, '', '', '', false, true, '');
    end;

    trigger OnAfterGetRecord()
    var
    begin
        ToggleSellToCustomerNameStyle := false;
        if Rec."Document No." = '' then ToggleSellToCustomerNameStyle := true;
    end;

    local procedure UpdateFilters()
    var
    begin
        SCANPANmisc.FillSalesLineListPage(Rec, QtyShippedNotInvoicedFilter, SalesPersonFilter, CountryFilter, CustomerNoFilter, OutstandingQuantityFilter, ToggleHeadlines, '');
    end;




}

 
/// <summary>
/// Page SalesLine Subform (ID 50033).
/// </summary>
///
/// <remarks>
///
/// https://ivansingleton.dev/a-simple-way-to-filter-pages-in-business-central-using-filterpagebuilder/
///
/// </remarks>

page 50033 "SalesLine Subform"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = '(DEV)Sales Line Subform';
    Editable = false;
    PageType = List;
    Permissions =
        tabledata SalesLineTMP = R;
    QueryCategory = 'Sales Order List';
    SourceTable = SalesLineTMP;
    UsageCategory = None;

    layout
    {
        area(Content)
        {
            repeater(Control1)
            {
                Editable = false;

                //ShowCaption = false;
                field("Line No."; "Line No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field("Document No."; Rec."Document No.")
                {
                    ApplicationArea = Basic, Suite;
                    DrillDownPageId = "Sales Order";
                    ToolTip = 'Specifies the value of the Document No. field.';
                }
                field("Sell-To Customer No."; "Sell-To Customer No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Sell-To Customer No. field.';
                }
                field("Sell-To Customer Name"; Rec."Sell-To Customer Name")
                {
                    ApplicationArea = Basic, Suite;
                    Style = StrongAccent;
                    StyleExpr = ToggleSellToCustomerNameStyle;
                    ToolTip = 'Specifies the value of the Sell-To Customer Name field.';
                }
                field("Ship-To Name"; "Ship-To Name")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Ship-To Name field.';
                }
                field(Type; Rec.Type)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Type field.';
                }
                field("No."; Rec."No.")
                {
                    ApplicationArea = Basic, Suite;
                    DrillDownPageId = "Item Card";
                    ToolTip = 'Specifies the value of the No. field.';
                }
                field("Item Cross-Reference No."; Rec."Item Cross-Reference No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Item Cross-Reference No. field.';
                }
                field("Tariff No."; Rec."Tariff No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Tariff No. field.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Description field.';
                }
                field("Unit Price"; Rec."Unit Price")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the value of the Unit Price field.';
                }
                field(Quantity; Rec."Quantity")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Quantity field.';
                }
                field("Outstanding Quantity"; Rec."Outstanding Quantity")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Outstanding Quantity field.';
                }
                field("Qty. Shipped Not Invoiced"; Rec."Qty. Shipped Not Invoiced")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Qty. Shipped Not Invoiced field.';
                }
                field("Line Amount"; Rec."Line Amount")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Line Amount field.';
                }
                field("Outstanding Amount"; Rec."Outstanding Amount")
                {
                    ApplicationArea = Basic, Suite;
                    BlankNumbers = BlankZero;
                    DecimalPlaces = 0;
                    ToolTip = 'Specifies the value of the Outstanding Amount field.';
                }
                field("Currency Code"; Rec."Currency Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Currency Code field.';
                }
                field("Planned Shipment Date"; Rec."Planned Shipment Date")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Planned Shipment Date field.';
                }
                field("External Ref."; Rec."External Document No.")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the External Document No. field.';
                }
                field("Salesperson Code"; Rec."Salesperson Code")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Salesperson Code field.';
                }
                field(Priority; Rec.Priority)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Order Priority field.';
                }
            }
        }
    }
    actions
    {
        area(Reporting)
        {
            action(ShowFilterpage)
            {
                ApplicationArea = all;
                Caption = 'Filterpage';
                Image = EditFilter;
                Promoted = true;
                PromotedCategory = Process;
                PromotedIsBig = true;
                PromotedOnly = true;
                ToolTip = 'Executes the Filterpage action.';
                trigger OnAction()
                var
                    FilterPage: FilterPageBuilder;
                    FilterPageCaptionLbl: Label 'Salesline Filter Page';
                begin
                    FilterPage.PageCaption := FilterPageCaptionLbl;
                    FilterPage.AddTable('SalesLine', Database::SalesLineTMP);
                    FilterPage.AddField('SalesLine', Rec."Country Code");
                    FilterPage.AddField('SalesLine', Rec."Salesperson Code");
                    FilterPage.AddField('SalesLine', Rec."Sell-To Customer No.");
                    FilterPage.AddField('SalesLine', Rec."Ship-To Name");
                    FilterPage.AddField('SalesLine', Rec."Outstanding Quantity", '<>0');
                    FilterPage.AddField('SalesLine', Rec."Qty. Shipped Not Invoiced", '<>0');
                    FilterPage.AddField('SalesLine', Rec.Type, 'Vare');

                    if FilterPage.RunModal() then begin
                        Rec.SetView(FilterPage.GetView('SalesLine'));
                        Rec.FindFirst();
                    end;
                end;
            }
        }
    }

    views
    {
        view(Salesperson)
        {
            Caption = 'Filter on Salesperson';
            Filters = where("Salesperson Code" = filter('*'));
        }
        view(Country)
        {
            Caption = 'Filter on Country';
            Filters = where("Country Code" = filter('*'));
        }
        view(ShippedNotInvoiced)
        {
            Caption = 'Show Shipped Not Invoiced';
            Filters = where("Qty. Shipped Not Invoiced" = filter('<>0'));
        }
        view(OutstandingQty)
        {
            Caption = 'Show Outstanding Quantity';
            Filters = where("Outstanding Quantity" = filter('<>0'));
        }
        view(ShowItemLines)
        {
            Caption = 'Disable Headers';
            Filters = where(Type = filter('VARE'));
        }
    }

    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;

        ToggleSellToCustomerNameStyle: Boolean;

    trigger OnInit()
    begin
        ScanpanMiscellaneous.FillSalesLineListPage(Rec, false, '', '', '', false, true, '');
    end;

    trigger OnAfterGetRecord()
    begin
        ToggleSellToCustomerNameStyle := false;
        if Rec."Document No." = '' then ToggleSellToCustomerNameStyle := true;
    end;
} 
/// <summary>
/// Page "SCANPAN_Salespricelist_Card" (ID 50011).
/// </summary>
page 50011 "Salespricelist_Card_SC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'SCANPAN Salespricelist Card';
    PageType = Card;
    Permissions =
        tabledata Customer = R,
        tabledata "Customer Price Group" = R,
        tabledata "Gen. Product Posting Group" = R,
        tabledata "Item Category" = R,
        tabledata Language = R,
        tabledata "NOTO Item Categories" = R;
    RefreshOnActivate = true;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            group(General)
            {
                Caption = 'General';
                group(Selector1)
                {
                    Caption = 'Pricelists';

                    field(LanguageSelected; LanguageSelected)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item translation';
                        Importance = Standard;
                        TableRelation = Language.Code where(Code = filter('DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL'));
                        ToolTip = 'Selcect the translated Item language.';
                        trigger OnValidate()
                        var
                        begin
                            FillTempTable();
                        end;
                    }
                    field(CustomerPriceGroup; CustomerPriceGroup)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Customer Price Group';
                        Importance = Standard;
                        TableRelation = "Customer Price Group";
                        ToolTip = 'Selects the Customer Price Group for the Salesprice List';

                        trigger OnValidate()
                        var
                        begin
                            CustomerPriceGroup := CustomerPriceGroupGet(CustomerPriceGroup);
                            FillTempTable();
                        end;
                    }
                    field(ItemInSortiment; ItemInSortiment)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Show Items In Sortiment';
                        Importance = Standard;
                        ToolTip = 'Shows Items in sortiment.';
                        trigger OnValidate()
                        begin
                            FillTempTable();
                        end;
                    }
                }
                group(Selector2)
                {
                    Caption = 'Filters';

                    field(GenProdPostingGroup; GenProdPostingGroup)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Gen. Product Posting Group';
                        Importance = Standard;
                        TableRelation = "Gen. Product Posting Group".Code where(Code = filter('INTERN|EKSTERN|BRUND'));
                        ToolTip = 'Sets filter on Gen. Product Posting Group.';
                        trigger OnValidate()
                        begin
                            FillTempTable();
                        end;
                    }
                    field(ItemProductLineCode; ItemProductLineCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Product Categories';
                        Importance = Additional;
                        TableRelation = "NOTO Item Categories".Code where("Category Code" = filter('ProductLineCode'));
                        ToolTip = 'Sets filter on Item Product Categories';
                        trigger OnValidate()
                        begin
                            FillTempTable();
                        end;
                    }
                    field(ItemCategoryCode; ItemCategoryCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Category Code';
                        Importance = Additional;
                        TableRelation = "Item Category".Code;
                        ToolTip = 'Sets filter on Item Category Code';
                    }
                }
            }
            group("CustomerItems")
            {
                Caption = 'Customer Items';

                group("CustomerItemNo")
                {
                    Caption = 'Customer Item No.';

                    /*
                     field(oVat; oVat)
                     {
                         Caption = 'Select VAT type';
                         OptionCaption = 'Manually type VAT,Zero VAT,Austria,Finland,Denmark,Norway';
                         ToolTip = 'Choose the VAT percentage to be used in report price calculations';
                         ApplicationArea = Basic, Suite;

                         trigger OnValidate()
                         var
                         begin
                             tVat := '';
                             case oVat of
                                 0: //Selvvalgt
                                     tVat := '0';
                                 1: //Ingen moms
                                     tVat := '0';
                                 2: //Østrig
                                     tVat := '20';
                                 3: //Finland
                                     tVat := '23';
                                 4: //Danmark
                                     tVat := '25';
                                 5: //Norge
                                     tVat := '25';
                             end;
                             Evaluate(dvat, tVat);
                         end;
                     }
                     field(tVat; tVat)
                     {
                         Caption = 'VAT percentage';
                         ToolTip = 'Type VAT or validate the VAT percentage.';

                         trigger OnValidate()
                         var
                         begin
                             Evaluate(dVat, tVat);
                         end;
                     }
                     */
                    field(CustomerNo; CustomerNo)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Customer';
                        Importance = Standard;
                        TableRelation = Customer."No.";
                        ToolTip = 'If selected, show Customer Item number.';

                        trigger OnValidate()
                        var
                        begin
                            CustomerName := CopyStr(CustomerGet(), 1, 20);
                            if CustomerNo <> '' then FillTempTable();
                        end;
                    }
                    field(CustomerName; CustomerName)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Customer Name';
                        Enabled = false;
                        Importance = Additional;
                        ToolTip = 'Shows the selected customer name.';
                    }
                }
            }
            group("PricelistLines")
            {
                Caption = 'Pricelist Lines';

                part(SalespricelistLines; "SalespriceSubPageSC")
                {
                    ApplicationArea = Basic, Suite;
                    UpdatePropagation = Both;
                }
            }
        }
    }

    actions
    {
        area(Processing)
        {
            action("Update Lines")
            {
                ApplicationArea = All;
                Image = Refresh;
                Promoted = true;
                PromotedCategory = Process;
                PromotedOnly = true;
                ToolTip = 'Refreshes the pricelist lines.';
                trigger OnAction()
                begin
                    UpdateSubPage();
                end;
            }
        }
    }

    trigger OnOpenPage()
    begin
        ItemInSortiment := true;
    end;

    var
        //TABLES
        Customers: Record Customer;
        CustomerPriceGroups: Record "Customer Price Group";

        ItemInSortiment: Boolean;

        CustomerNo: code[20];
        CustomerPriceGroup: Code[20];
        GenProdPostingGroup, ItemCategoryCode, ItemProductLineCode : Code[20];
        LanguageSelected: Code[20];

        CustomerName: Text[120];

    local procedure CustomerGet(): Text;
    var
    begin
        Customers.Reset();
        If Customers.Get(CustomerNo) then begin
            CustomerPriceGroup := Customers."Customer Price Group";
            Exit(Customers.Name);
        end;
    end;

    local procedure CustomerPriceGroupGet(MyCustomerPriceGroup: Code[20]): code[20]
    var
    begin
        CustomerPriceGroups.Reset();
        if CustomerPriceGroups.Get(MyCustomerPriceGroup) then
            exit(CustomerPriceGroups.Code);
    end;

    local procedure FillTempTable()
    begin
        if (CustomerPriceGroup <> '') and (LanguageSelected <> '') then
            CurrPage.SalespricelistLines.Page.FillTempTable(
                                                                CustomerPriceGroup,
                                                                GenProdPostingGroup,
                                                                ItemProductLineCode,
                                                                LanguageSelected,
                                                                ItemInSortiment,
                                                                CustomerNo);
    end;

    local procedure UpdateSubPage()
    begin
        FillTempTable();
    end;
}
 



/// <summary>
/// Page "SCANPAN_Salesprice_SubPage" (ID 50012).
/// </summary>
page 50012 "SalespriceSubPageSC"
{
    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = All;
    Caption = 'Salesprice Line SubPage';
    Editable = false;
    PageType = ListPart;
    Permissions =
        tabledata Item = R,

        tabledata "Item Reference" = R,

        tabledata "Item Translation" = R,
        tabledata "Item Unit of Measure" = R,
        tabledata "Price List Line" = R;
    SourceTable = SalespriceListTMP;
    SourceTableTemporary = true;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field(LineNo; Rec.LineNo)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the linenumbers in the list.';
                    Visible = false;
                }
                /*
                field(ItemImage; Rec.ItemImage)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Item Pictura of the product.';
                }
                */
                field(ItemNo; Rec.ItemNo)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Item number of the product that the price applies to.';
                }
                field(CustomerItemNo; Rec.CustomerItemNo)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Customer ItemNo.';
                    Visible = SetCustomerItemFieldVisible;
                }
                field(BarCode; Rec.BarCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Barcode.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Item Description.';
                }
                field(Colli; Rec.Colli)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Colli Quantity.';
                }
                field(ColliCode; Rec.ColliCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Colli Code.';
                    Visible = false;
                }
                field(GrossWeightUnitMeasure; GrossWeightUnitMeasure)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Gross Weight from the Unit of Measure.';
                    Visible = false;
                }
                field(NetPrice; Rec.NetPrice)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Net Price.';
                }
                field(GrossPrice; Rec.GrossPrice)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Gross Price.';
                }
                field(CustomerPriceGroup; Rec.CustomerPriceGroup)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Customer Pricegroup.';
                    Visible = false;
                }
                field(GenProdPostingGroup; Rec.GenProdPostingGroup)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Gen. Prod. Posting group.';
                    Visible = false;
                }
                field(ItemProductLineCode; Rec.ItemProductLineCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Item Product Line Code.';
                    Visible = false;
                }
                field(LanguageCode; Rec.LanguageCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Item Translation Code.';
                    Visible = false;
                }
                field(PricelistCode; Rec.PricelistCode)
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the Pricelist Code.';
                    Visible = false;
                }


            }


        }

    }


    actions
    {
        area(Processing)
        {
            group("Page")
            {
                Caption = 'Page';

                /*
                                action(EditInExcel)
                                {
                                    ApplicationArea = Basic, Suite;
                                    Caption = 'Edit in Excel';
                                    Image = Excel;
                                    Promoted = true;
                                    PromotedCategory = Category8;
                                    PromotedIsBig = true;
                                    PromotedOnly = true;
                                    Visible = true;
                                    ToolTip = 'Send the data in the sub page to an Excel file for analysis or editing';
                                    AccessByPermission = System "Allow Action Export To Excel" = X;

                                    trigger OnAction()
                                    var
                                        ODataUtility: Codeunit ODataUtility;
                                    begin
                                        ODataUtility.EditWorksheetInExcel('Sales_Order_Line', CurrPage.ObjectId(false), StrSubstNo('Document_No eq ''%1'''));
                                    end;

                                }
                  */
            }
        }

    }


    trigger OnOpenPage()
    var
    begin
        Rec.SetCurrentKey(GenProdPostingGroup, ItemProductLineCode, ItemNo);
        Rec.SetAscending(GenProdPostingGroup, true);
        Rec.SetAscending(ItemProductLineCode, true);
        Rec.SetAscending(ItemNo, true);
    end;


    var

        SetCustomerItemFieldVisible: Boolean;


    /// <summary>
    /// FillTempTable.
    /// </summary>
    /// <param name="CustomerPriceGropup">code[20].</param>
    /// <param name="MyGenProdPostingGroup">Code[20].</param>
    /// <param name="MyItemProductLineCode">Code[20].</param>
    /// <param name="MyLanguageCode">code[20].</param>
    /// <param name="ItemInSortiment">Boolean.</param>
    /// <param name="CustomerForItemNumber">code[20].</param>
    procedure FillTempTable(
                                CustomerPriceGropup: code[20];
                                MyGenProdPostingGroup: Code[20];
                                MyItemProductLineCode: Code[20];
                                MyLanguageCode: code[20];
                                ItemInSortiment: Boolean;
                                CustomerForItemNumber: code[20])
    var
        Items: Record Item;
        PricelistLines: Record "Price List Line";
        MyDialog: Dialog;
        CounterPct, MyLineNo, MaxRecords, RecCounter : Integer;
        Text000Lbl: Label 'Working precentage #1', Comment = '#1 = Percentages.';
        EnumItemUnitOfMeasure: Enum EnumItemUnitOfMeasure;
        EnumItemCrossReferenceTypes: Enum "EnumItemReferenceTypes";
    begin
        MyLineNo := 0;
        Rec.DeleteAll(false);
        Commit();

        Items.SetFilter("Gen. Prod. Posting Group", MyGenProdPostingGroup);
        Items.SetFilter("Product Line Code", MyItemProductLineCode);


        PricelistLines.SetRange(Status, PricelistLines.Status::Active);
        PricelistLines.SetFilter("Ending Date", '%1', 0D);
        PricelistLines.SetRange("Source Type", PricelistLines."Source Type"::"Customer Price Group");
        PricelistLines.SetFilter("Source No.", CustomerPriceGropup);
        if ItemInSortiment = true then PricelistLines.SetFilter("Item in Sortiment", '%1', ItemInSortiment);

        if Items.FindSet() then begin
            MyDialog.Open(Text000Lbl, CounterPct);
            MaxRecords := Items.Count;
            repeat
                RecCounter += 1;
                CounterPct := Round((100 / MaxRecords) * RecCounter, 1, '=');
                PricelistLines.SetFilter("Asset No.", Items."No.");
                if PricelistLines.FindSet() then
                    repeat
                        MyDialog.Update();

                        Rec.Init();
                        MyLineNo += 1;
                        Rec.LineNo := MyLineNo;

                        Rec.ItemNo := PricelistLines."Asset No.";
                        if CustomerForItemNumber <> '' then begin
                            Rec.CustomerItemNo := CustomerItemNoGet(CustomerForItemNumber, Items."No.");
                            SetCustomerItemFieldVisible := True;
                        end Else
                            SetCustomerItemFieldVisible := False;

                        Rec.ItemImage := Items.Picture;
                        Rec.Description := CopyStr(ItemDescriptionGet(Items."No.", MyLanguageCode), 1, 200);
                        Rec.BarCode := BarcodeGet(Items."No.", EnumItemCrossReferenceTypes::Barcode);

                        If Evaluate(Rec.Colli, ItemUnitsGetColli(Items."No.", Items."Base Unit of Measure", EnumItemUnitOfMeasure::Colli)) then
                            Evaluate(Rec.Colli, ItemUnitsGetColli(Items."No.", Items."Base Unit of Measure", EnumItemUnitOfMeasure::Colli));

                        Rec.ColliCode := ItemUnitsGetColli(Items."No.", Items."Base Unit of Measure", EnumItemUnitOfMeasure::ColliCode);


                        Rec.NetWeightItemCard := Items."Net Weight";
                        Rec.GrossWeightItemCard := Items."Gross Weight";

                        If Evaluate(Rec.GrossWeightUnitMeasure, ItemUnitsGet(Rec.ItemNo, Items."Base Unit of Measure", EnumItemUnitOfMeasure::Colli)) then
                            Evaluate(Rec.GrossWeightUnitMeasure, ItemUnitsGet(Rec.ItemNo, Items."Base Unit of Measure", EnumItemUnitOfMeasure::Colli));

                        Rec.PricelistCode := PricelistLines."Price List Code";
                        Rec.CustomerPriceGroup := CopyStr(PricelistLines."Source No.", 1, 20);
                        Rec.GenProdPostingGroup := Items."Gen. Prod. Posting Group";
                        Rec.ItemProductLineCode := CopyStr(Items."Product Line Code", 1, 20);
                        Rec.LanguageCode := MyLanguageCode;



                        //Price
                        Rec.NetPrice := PricelistLines."Unit Price";
                        Rec.GrossPrice := PricelistLines."Unit List Price";

                        Rec.Insert();
                    until PricelistLines.Next() <= 0;

            Until Items.Next() <= 0;
            Rec.Reset();
            If Not Rec.IsEmpty then Rec.FindFirst();
            MyDialog.Close();
        end;
    end;

    local procedure BarcodeGet(MyItemNo: Code[20]; GetType: Enum "EnumItemReferenceTypes"): code[50];
    var

        ItemReference: Record "Item Reference";

    begin
        ItemReference.Reset();
        ItemReference.SetFilter("Item No.", MyItemNo);
        ItemReference.SETRANGE("Reference Type", ItemReference."Reference Type"::"Bar Code");
        ItemReference.SETFILTER("Reference Type No.", '<>%1', 'EAN');
        ItemReference.SETFILTER("Unit of Measure", '%1|%2|%3', 'STK', 'SET', 'SÆT');
        if ItemReference.FindFirst() then begin
            if GetType = GetType::Barcode then exit(ItemReference."Reference No.");
            if GetType = GetType::"Item Unit" then exit(ItemReference."Unit of Measure");
        end;
    end;

    local procedure CustomerItemNoGet(CustNo: code[20]; MyItemNo: Code[20]): Code[50]
    var

        ItemReference: Record "Item Reference";

    begin
        ItemReference.Reset();
        ItemReference.SetFilter("Item No.", MyItemNo);
        ItemReference.SETRANGE("Reference Type", ItemReference."Reference Type"::Customer);
        ItemReference.SETFILTER("Reference Type No.", CustNo);

        if ItemReference.FindFirst() then
            exit(ItemReference."Reference No.");
    end;

    local procedure ItemDescriptionGet(MyItemNo: code[20]; MyLanguageCode: Code[20]): Text
    var
        Items: Record Item;
        ItemTranslation: Record "Item Translation";
    begin
        ItemTranslation.SetFilter("Item No.", MyItemNo);
        ItemTranslation.SetFilter("Language Code", MyLanguageCode);
        if ItemTranslation.FindFirst() then exit(ItemTranslation.Description + ItemTranslation."Description 2");
        if Items.Get(MyItemNo) then exit(Items.Description);
    end;

    local procedure ItemUnitsGet(MyItemNo: code[20]; ItemUnit: code[20]; GetType: Enum EnumItemUnitOfMeasure): Code[20];
    var
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        ItemUnitOfMeasure.Reset();
        ItemUnitOfMeasure.SetFilter("Item No.", MyItemNo);
        ItemUnitOfMeasure.SetFilter(Code, ItemUnit);
        if ItemUnitOfMeasure.FindFirst() then
            if GetType = GetType::Weight then exit(Format(ItemUnitOfMeasure.Weight, 0, '<Precision,2:2><Standard Format,2>'));


    end;

    local procedure ItemUnitsGetColli(MyItemNo: code[20]; ItemBaseUnit: code[20]; GetType: Enum EnumItemUnitOfMeasure): code[20];
    var
        Items: Record Item;
        ItemUnitOfMeasure: Record "Item Unit of Measure";
        MyColliCode: code[20];
        ColliQty: Integer;
    begin
        ItemBaseUnit := ''; //Unused from overlay
        ItemUnitOfMeasure.Reset();
        Items.Reset();

        Items.SetFilter("No.", MyItemNo);
        If Items.FindFirst() then begin
            ItemUnitOfMeasure.SetFilter(Code, Items."Base Unit of Measure");
            if (GetType = GetType::Colli) and (ItemUnitOfMeasure.FindFirst()) then ColliQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
            if (GetType = GetType::Colli) and (ItemUnitOfMeasure.FindFirst()) then MyColliCode := ItemUnitOfMeasure.Code;
        end;

        ItemUnitOfMeasure.SetFilter("Item No.", MyItemNo);
        ItemUnitOfMeasure.SetFilter(Code, 'MASTER');
        if (GetType = GetType::Colli) and (ItemUnitOfMeasure.FindFirst()) then ColliQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
        if (GetType = GetType::ColliCode) and (ItemUnitOfMeasure.FindFirst()) then MyColliCode := ItemUnitOfMeasure.Code;

        ItemUnitOfMeasure.SetFilter(Code, 'INNER');
        if (GetType = GetType::Colli) and (ItemUnitOfMeasure.FindFirst()) then ColliQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
        if (GetType = GetType::ColliCode) and (ItemUnitOfMeasure.FindFirst()) then MyColliCode := ItemUnitOfMeasure.Code;

        Items.SetFilter("Gen. Prod. Posting Group", 'INTERN');
        Items.SetFilter("Packing Method", '00');
        Items.SetFilter("No.", MyItemNo);
        If Items.FindFirst() then begin
            ItemUnitOfMeasure.SetFilter(Code, Items."Base Unit of Measure");
            if (GetType = GetType::Colli) and (ItemUnitOfMeasure.FindFirst()) then ColliQty := ItemUnitOfMeasure."Qty. per Unit of Measure";
            if (GetType = GetType::ColliCode) and (ItemUnitOfMeasure.FindFirst()) then MyColliCode := ItemUnitOfMeasure.Code;
        end;

        IF GetType = GetType::Colli then Exit(FORMAT(ColliQty));
        IF GetType = GetType::ColliCode then Exit(MyColliCode);

    end;


}
 




/// <summary>
/// Page Scanpan API Setup (ID 50008).
/// </summary>
///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>
page 50008 "Scanpan API Setup"
{


    AdditionalSearchTerms = 'Scanpan';
    ApplicationArea = Basic, Suite;
    Caption = 'Scanpan API Setup';
    PageType = List;
    SourceTable = "Scanpan API Setup";
    UsageCategory = Lists;
    Permissions =
        tabledata "Scanpan API Setup" = RIMD;

    layout
    {

        area(Content)
        {
            repeater("Control1")
            {

                field(LineNo; Rec.LineNo)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field("Profile Name"; Rec."Profile Name")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Profile Name field.';
                }
                field("Request Type"; Rec."Request Type")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Request Type field.';
                }
                field(URL; Rec.URL)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the URL field.';
                }
                field("User Name"; Rec."User Name")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the User Name field.';
                }
                field(Password; Rec.Password)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Password field.';
                }
                field("Subscription key"; Rec."Subscription key")
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the Subscription key field.';
                }
            }

        }

    }

} 





/// <summary>
/// Page SalesPriceFromPurchase (ID 50040).
/// </summary>
page 50040 "ScanpanSetup"
{

       AdditionalSearchTerms = 'Scanpan, Setup';
       ApplicationArea = All;
       Caption = 'Scanpan Setup';
       PageType = List;
       UsageCategory = Lists;
/*
       SourceTable = "DocumentLines";
       SourceTableView = sorting("Posting Date") order(ascending);
       SourceTableTemporary = true;




       layout
       {


       }

   */
} 




/// <summary>
/// Page SearchAndReplace (ID 50038).
/// </summary>
page 50038 "SearchAndReplace"
{
    AdditionalSearchTerms = 'SCANPAN';
    Caption = 'Search and Replace';
    PageType = List;
    UsageCategory = Lists;
    ApplicationArea = all;

    SourceTable = "Field Selection Table";


    layout
    {
        area(Content)
        {
            repeater(Customers)
            {

                field("Table No."; Rec."Table No.")
                {
                    ToolTip = 'Type the Table Number here.';
                    ApplicationArea = All;
                    TableRelation = field.TableNo;
                    trigger OnValidate()
                    var
                        FieldRec: Record Field;
                    begin
                        FieldRec.SetRange(TableNo, Rec."Table No.");
                        if FieldRec.FindFirst() then
                            Rec."Table Name" := FieldRec.TableName;
                    end;
                }
                field("Table Name"; Rec."Table Name")
                {
                    ToolTip = 'Displays the Table Name from selected Table Number.';
                    ApplicationArea = All;

                }
                field("Field No."; Rec."Field No.")
                {
                    ToolTip = 'Type the Field Number.';
                    ApplicationArea = All;
                    trigger OnLookup(var Text: Text): Boolean
                    var
                        FieldRec: Record Field;
                        FieldSelect: Codeunit "Field Selection";
                    begin
                        FieldRec.SetRange(TableNo, rec."Table No.");
                        FieldRec.FindSet();
                        FieldSelect.Open(FieldRec);
                        Rec."Field No." := FieldRec."No.";
                        rec."Field Name" := FieldRec.FieldName;
                    end;
                }
                field("Field Name"; Rec."Field Name")
                {
                    ToolTip = 'Displays the Fild Name from selected Field Number.';
                    ApplicationArea = All;

                }
            }
        }
    }

    var


    trigger OnInit()
    begin
        //Rec.SetFilter("Table No.",'37');
    end;


} 
//SHIPITREMOVE
/*

page 50051 "ShipITdebug"
{
    /// <summary>
    /// Page ShipITdebug (ID 50029).
    /// </summary>
    ///
    /// <remarks>
    ///
    /// 2023.04.04                  Jesper Harder           021     Shows debuginfo for inconsistent Sales Lines and Transport Order Lines
    ///
    /// </remarks>
    /// 

    AdditionalSearchTerms = 'Scanpan';
    Caption = 'ShipIT Debug';
    Editable = false;
    PageType = List;
    Permissions =
        tabledata "IDYS Transport Order Line" = RM,
        tabledata "Sales Line" = R;
    SourceTable = "Sales Line";
    //SourceTableTemporary = true;
    SourceTableView = where("IDYS Quantity Sent" = filter('>0')
                            , "Quantity Shipped" = filter(0)
                            );
    UsageCategory = Lists;
    ApplicationArea = Basic, Suite;

    layout
    {
        area(Content)
        {
            repeater(SaleLinesShipIT)
            {
                field("Document Type"; Rec."Document Type")
                {
                    ToolTip = 'Specifies the type of document that you are about to create.';
                }
                field("Document No."; Rec."Document No.")
                {
                    ToolTip = 'Specifies the document number.';
                }
                field(Type; Rec.Type)
                {
                    ToolTip = 'Specifies the line type.';
                }
                field("No."; Rec."No.")
                {
                    ToolTip = 'Specifies the number of the record.';
                }
                field(Quantity; Rec.Quantity)
                {
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the quantity of the sales order line.';
                }
                field("IDYS Quantity Sent"; Rec."IDYS Quantity Sent")
                {
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the quantity that has been sent.';
                }
                field("Quantity Shipped"; Rec."Quantity Shipped")
                {
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies how many units of the item on the line have been posted as shipped.';
                }
                field(ShippedDif; ShippedDif)
                {
                    BlankNumbers = BlankZero;
                    Caption = 'ShipIT Qty sent not Shipped';
                    ToolTip = 'Specifies the value of the ShipIT Qty sent not Shipped field.';
                }
                field(TransportOrderNo; TransportOrderNo)
                {
                    Caption = 'Transport Order No.';
                    Style = Unfavorable;
                    StyleExpr = DiffDetected;
                    ToolTip = 'Specifies the value of the Transport Order No. field.';
                }
                field(DiffDetected; DiffDetected)
                {
                    Caption = 'Error detected';
                    Style = Unfavorable;
                    StyleExpr = DiffDetected;
                    ToolTip = 'Specifies the value of the Error detected field.';
                }
            }
        }
    }

    actions
    {
        area(Processing)
        {
            action(ClearErrors)
            {
                Caption = 'Clear ShipIT errors';
                Image = Delete;
                Promoted = true;
                PromotedOnly = true;
                PromotedCategory = Process;
                Scope = Repeater;
                ToolTip = 'Clears ShipIT errors.';
                //PromotedCategory = Category9;

                trigger OnAction()
                begin
                    //Message(TransportOrderNo);
                    FixIDYSTransportOrderLine(TransportOrderNo);
                    CurrPage.Update();
                end;
            }
        }
    }

    var
        IDYSTransportOrderLine: record "IDYS Transport Order Line";

        DiffDetected: Boolean;
        ShippedDif: Decimal;
        TransportOrderNo: Text[30];

    trigger OnAfterGetRecord()
    var
    begin
        ShippedDif := Rec."IDYS Quantity Sent" - Rec."Quantity Shipped";
        if ShippedDif < 0 then ShippedDif := 0;
        DiffDetected := ShippedDif <> 0;
        //IDYSTransportOrderLine.SetFilter("Source Document Type", '%1', IDYSTransportOrderLine."Source Document Type"::"0");
        IDYSTransportOrderLine.SetFilter("Source Document Table No.", '36');
        IDYSTransportOrderLine.SetFilter("Source Document No.", Rec."Document No.");
        IDYSTransportOrderLine.SetFilter("Source Document Line No.", Format(Rec."Line No."));
        IDYSTransportOrderLine.SetFilter("Item No.", Rec."No.");
        TransportOrderNo := '';
        if IDYSTransportOrderLine.FindFirst() then TransportOrderNo := IDYSTransportOrderLine."Transport Order No.";
    end;

    local procedure FixIDYSTransportOrderLine(MyTransportorderNo: Text[30])
    var
        MyIDYSTransportOrderLine: Record "IDYS Transport Order Line";
        ConfirmLbl: Label 'There was found %1 saleslines. Do you want to proceed?', Comment = '%1 = Indicates number of found lines.'; //, Locked = true;
        text000Lbl: Label 'Abort';
    begin
        MyIDYSTransportOrderLine.SetRange("Transport Order No.", MyTransportorderNo);
        if not Confirm(StrSubstNo(ConfirmLbl, MyIDYSTransportOrderLine.Count), false) then
            Error(text000Lbl);
        MyIDYSTransportOrderLine.ModifyAll("Source Document Line No.", 0);
    end;
}
*/ 



/// <summary>
/// Page TestDateTool (ID 50023).
/// </summary>
page 50023 "TestPage"
{

    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Testpage';
    UsageCategory = None;

    trigger OnOpenPage()
    begin
        TestCU.DeleteFullyInvoicedPurchaseOrders();
        //error('stop');

        //testingAscii();
    end;

    var

        TestCU: Codeunit TEST_CU;
        VATVIESDeclarationTaxAuth: Report "VAT- VIES Declaration Tax Auth"; //19;


    local procedure testingAscii()
    var
        StringConversionManagement: Codeunit StringConversionManagement;
        //cc: Codeunit contini
        GetReceiptLines: page "Get Receipt Lines";
        myText: text;
        myNewText: Text;
    begin
        myText := 'Meidän tilinumero   ';
        myNewText := StringConversionManagement.WindowsToASCII(myText);
        Message(myNewText);
    end;




} 
/// <summary>
/// Page WebServiceOrderFormCustomer (ID 50031).
/// </summary>
///
/// <remarks>///
///
/// 2023.04.18                  Jesper Harder                   024     SalesOrderForm WebServices used in Excel Sales Order Forms.
///
/// </remarks>
page 50032 "WebServiceOrderFormCustomer"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'WebServices Sales Orderform Customers';
    Editable = false;
    PageType = List;
    Permissions =
        tabledata Customer = R;
    SourceTable = Customer;
    UsageCategory = None;

    layout
    {
        area(Content)
        {
            repeater(repeater1)
            {
                field("No."; Rec."No.")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the Customer No.';
                }
                field(Name; Rec.Name)
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the Customer Name';
                }
                field("Country/Region Code"; Rec."Country/Region Code")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the country/region of the address.';
                }
                field("Old Customer No."; Rec."Old Customer No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Alternative Customer No. field.';
                }
                field("Salesperson Code"; Rec."Salesperson Code")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies a code for the salesperson who normally handles this customer''s account.';
                }
            }
        }
    }
}

/*

SELECT    	Name
			, No_
			, Name
			, [Country_Region Code]
FROM      	dbo.[SCANPAN A_S$Customer] AS CU
WHERE       ([Salesperson Code] = 'DE4')
ORDER BY CU.Name ASC

*/
 
/// <summary>
/// Page WebServiceOrderFormItems (ID 50031).
/// </summary>
///
/// <remarks>
///
/// 2023.04.18                  Jesper Harder                   024     SalesOrderForm WebServices used in Excel Sales Order Forms.
///
/// </remarks>
page 50031 "WebServiceOrderFormItems"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'WebServices Sales Orderform Items';
    Editable = false;
    PageType = List;
    Permissions =
        tabledata Item = R,
        tabledata "Item Translation" = R,
        tabledata "Price List Line" = R;
    SourceTable = "Price List Line";
    SourceTableView = where("Ending Date" = filter(''),
                             "Asset Type" = const(Item),
                             "Source Group" = const(Customer),
                             "Source Type" = const("Customer Price Group"),
                             "Minimum Quantity" = filter('0|1')
                             //, "Asset No." = filter('28001203')
                             );
    UsageCategory = None;

    layout
    {
        area(Content)
        {
            repeater(repeater1)
            {
                field("Asset No."; Rec."Asset No.")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the number of the product that the price applies to.';
                }
                field("Source No."; Rec."Source No.")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the unique identifier of the source of the price on the price list line.';
                }
                field("Currency Code"; Rec."Currency Code")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the currency code of the price.';
                }
                field(DescriptionItem; DescriptionItem)
                {
                    ApplicationArea = all;
                    Caption = 'Description';
                    ToolTip = 'Specifies the value of the Description field.';
                }
                field(DescriptionDAN; DescriptionDAN)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionDAN';
                    ToolTip = 'Specifies the value of the DescriptionDAN field.';
                }
                field(DescriptionSVE; DescriptionSVE)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionSVE';
                    ToolTip = 'Specifies the value of the DescriptionSVE field.';
                }
                field(DescriptionENU; DescriptionENU)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionENU';
                    ToolTip = 'Specifies the value of the DescriptionENU field.';
                }
                field(DescriptionDEU; DescriptionDEU)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionDEU';
                    ToolTip = 'Specifies the value of the DescriptionDEU field.';
                }
                field(DescriptionFRA; DescriptionFRA)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionFRA';
                    ToolTip = 'Specifies the value of the DescriptionFRA field.';
                }
                field(DescriptionBEL; DescriptionBEL)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionBEL';
                    ToolTip = 'Specifies the value of the DescriptionBEL field.';
                }
                field(DescriptionNLD; DescriptionNLD)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionNLD';
                    ToolTip = 'Specifies the value of the DescriptionNLD field.';
                }
                field(DescriptionNOR; DescriptionNOR)
                {
                    ApplicationArea = all;
                    Caption = 'DescriptionBEL';
                    ToolTip = 'Specifies the value of the DescriptionBEL field.';
                }
                field("Starting Date"; Rec."Starting Date")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the date from which the price or the line discount is valid.';
                }
                field("Ending Date"; Rec."Ending Date")
                {
                    ApplicationArea = all;
                    ToolTip = 'Specifies the date to which the price or the line discount is valid.';
                }
                field(MinimumQuantity1; MinimumQuantity1)
                {
                    ApplicationArea = all;
                    Caption = 'Minimum Quantity';
                    ToolTip = 'Specifies the value of the Minimum Quantity field.';
                }
                field(UnitPrice1; UnitPrice1)
                {
                    ApplicationArea = all;
                    Caption = 'Unitprice Starting Price';
                    ToolTip = 'Specifies the value of the Unitprice Starting Price field.';
                }
                field(MinimumQuantity2; MinimumQuantity2)
                {
                    ApplicationArea = all;
                    Caption = 'Minimum Quantity Master';
                    ToolTip = 'Specifies the value of the Minimum Quantity Master field.';
                }
                field(UnitPrice2; UnitPrice2)
                {
                    ApplicationArea = all;
                    Caption = 'Unitprice Package Price';
                    ToolTip = 'Specifies the value of the Unitprice Package Price field.';
                }
            }
        }
    }
    var
        PriceListLine: Record "Price List Line";
        MinimumQuantity1: Decimal;
        MinimumQuantity2: Decimal;
        UnitPrice1: Decimal;
        UnitPrice2: Decimal;
        DescriptionBEL: Text[100];
        DescriptionDAN: Text[100];
        DescriptionDEU: Text[100];
        DescriptionENU: Text[100];
        DescriptionFRA: Text[100];
        DescriptionItem: text[100];
        DescriptionNLD: Text[100];
        DescriptionNOR: Text[100];
        DescriptionSVE: Text[100];

    trigger OnAfterGetRecord()
    begin
        MinimumQuantity1 := Rec."Minimum Quantity";
        if MinimumQuantity1 = 0 then MinimumQuantity1 := 1;

        DescriptionItem := GetItemTranslation(Rec."Asset No.", '');
        DescriptionDAN := GetItemTranslation(Rec."Asset No.", 'DAN');
        DescriptionSVE := GetItemTranslation(Rec."Asset No.", 'SVE');
        DescriptionENU := GetItemTranslation(Rec."Asset No.", 'ENU');
        DescriptionDEU := GetItemTranslation(Rec."Asset No.", 'DEU');
        DescriptionFRA := GetItemTranslation(Rec."Asset No.", 'FRA');
        DescriptionBEL := GetItemTranslation(Rec."Asset No.", 'BEL');
        DescriptionNLD := GetItemTranslation(Rec."Asset No.", 'NLD');
        DescriptionNOR := GetItemTranslation(Rec."Asset No.", 'NOR');

        UnitPrice1 := Rec."Unit Price";

        PriceListLine.SetFilter("Minimum Quantity", '>%1', 1);
        PriceListLine.SetFilter("Ending Date", '%1', Rec."Ending Date");
        PriceListLine.SetFilter("Asset Type", '%1', Rec."Asset Type");
        PriceListLine.SetFilter("Source Group", '%1', Rec."Source Group");
        PriceListLine.SetFilter("Source Type", '%1', Rec."Source Type");
        PriceListLine.SetFilter("Source No.", '%1', Rec."Source No.");
        PriceListLine.SetFilter("Currency Code", '%1', Rec."Currency Code");
        PriceListLine.SetFilter("Asset No.", Rec."Asset No.");

        MinimumQuantity2 := 0;
        UnitPrice2 := 0;
        if PriceListLine.FindFirst() then begin
            MinimumQuantity2 := PriceListLine."Minimum Quantity";
            UnitPrice2 := PriceListLine."Unit Price";
        end;

        if MinimumQuantity2 < MinimumQuantity1 then begin
            MinimumQuantity2 := MinimumQuantity1;
            UnitPrice2 := UnitPrice1;
        end;
    end;

    local procedure GetItemTranslation(ItemNo: code[20]; LangCode: code[20]): Text[100]
    var
        ItemTranslation: Record "Item Translation";
        Item: Record Item;
    begin
        if ItemTranslation.Get(ItemNo, '', LangCode) then Exit(ItemTranslation.Description);
        if Item.Get(ItemNo) then Exit(Item.Description);
    end;
}

/*
SELECT	SP.[Asset ID]
		, SP.[Source No_]
		, SP.[Currency Code]
		, IT.Description  AS Description
		, IT.[Language Code]
		, SP.[Starting Date]
		, SP.[Ending Date]
		, CASE WHEN MIN(SP.[Minimum Quantity]) = 0 THEN 1 ELSE MIN(SP.[Minimum Quantity]) END as [Minimum Quantity]
		, MAX(SP.[Unit Price]) as [Unit Price]
		, CASE WHEN MAX(SP.[Minimum Quantity]) = 0 THEN 1 ELSE MAX(SP.[Minimum Quantity]) END AS SP2_MinQty
		, MIN(SP.[Unit Price]) AS SP2_UnitPrice

FROM	[SCANPAN Danmark$Price List Line$437dbf0e-84ff-417a-965d-ed2bb9650972] as SP
		INNER JOIN [SCANPAN Danmark$Item Translation$437dbf0e-84ff-417a-965d-ed2bb9650972] AS IT
			ON SP.[Asset ID] = IT.[Item No_]

WHERE	0=0
		AND IT.[Language Code] = 'DEU'
		AND SP.[Source No_] = 'RRP'
		AND SP.[Currency Code] = 'EUR'
		AND SP.[Ending Date] = CONVERT(DATETIME, '1753-01-01 00:00:00', 102)
		--AND [Asset Type] = 10
		--AND [Source Group] = 11
--AND SP.[Item No_] in('65002000','65002003','68002800','68002803','53002000','53002003')
*/
/*
GROUP BY	SP.[Asset ID]
			, SP.[Source No_]
			,SP.[Currency Code]
			, IT.Description
			, IT.[Language Code]
			, SP.[Starting Date]
			, SP.[Ending Date]
*/
 

page 50053 "WebServiceSalesOrderLinesList"
{
    ///<summary>
    /// 2024.09  Jesper Harder  081  API displaying Sales orders for integration with Makes You Local
    ///
    /// Defines a Business Central page that lists sales order lines from two companies.
    /// Combines data from Sales Header and Sales Line tables into a temporary table.
    /// Displays order details, customer information, item data, and shipment status.
    /// Uses ChangeCompany to fetch data from 'SCANPAN Norge' and 'SCANPAN Danmark'.
    /// Facilitates integration with "Makes You Local" by providing consolidated sales data.
    ///</summary>

    Caption = 'Sales Order Lines API';           // Sets the caption of the page
    AdditionalSearchTerms = 'Scanpan, Makes You Local, API, WEB, WebInterface'; // Additional Search Terms
    PageType = List;                              // Specifies that this is a List page
    SourceTable = "SalesOrderLineTemp";           // Sets the source table to our temporary table
    SourceTableTemporary = true;                  // Indicates that the source table is a temporary table
    Editable = false;
    UsageCategory = Lists;                        // Places the page under the "Lists" category in the navigation
    ApplicationArea = All;                        // Makes the page available in all application areas

    layout
    {
        area(content)
        {
            repeater(Group)
            {
                field("Company Name"; Rec."Company Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the name of the company from which the sales order originates.';
                }
                field("Order No."; Rec."Order No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the unique number assigned to the sales order.';
                }
                field("Document Status"; Rec."Document Status")
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates the current status of the sales order document.';
                }
                field("Order Date"; Rec."Order Date")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the date on which the sales order was created.';
                }
                field("Customer No."; Rec."Customer No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates the number of the customer who placed the sales order.';
                }
                field("Customer Name"; Rec."Customer Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the name of the customer who placed the sales order.';
                }
                field("Address"; Rec."Address")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the primary address of the customer.';
                }
                field("Address 2"; Rec."Address 2")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays additional address information for the customer.';
                }
                field("City"; Rec."City")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the city where the customer is located.';
                }
                field("Post Code"; Rec."Post Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates the postal code of the customer''s address.';
                }
                field("Country/Region Code"; Rec."Country/Region Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the country or region code for the customer''s address.';
                }
                field("Contact"; Rec."Contact")
                {
                    ApplicationArea = All;
                    ToolTip = 'Provides the contact person or information for the customer.';
                }
                field("Phone No."; Rec."Phone No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the phone number of the customer.';
                }
                field("Email"; Rec."Email")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the email address of the customer.';
                }
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Identifies the line number within the sales order, representing a specific item or service.';
                }
                field("Item Type"; Rec."Item Type")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the type of item on the sales line, such as Item, Resource, or G/L Account.';
                }
                field("Item No."; Rec."Item No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the unique number of the item or resource on the sales line.';
                }
                field(Description; Rec.Description)
                {
                    ApplicationArea = All;
                    ToolTip = 'Provides a description of the item or service on the sales line.';
                }
                field(Quantity; Rec.Quantity)
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates the total quantity ordered for the item or service on this sales line.';
                }
                field("Quantity to Ship"; Rec."Quantity to Ship")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the quantity remaining to be shipped for this sales line.';
                }
                field("Quantity Shipped"; Rec."Quantity Shipped")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the quantity that has already been shipped for this sales line.';
                }
                field("Line Amount"; Rec."Line Amount")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the total amount for this sales line.';
                }
                // Existing fields...

                field("Shipping Agent Code"; Rec."Shipping Agent Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the code of the shipping agent handling this order.';
                }
                field("Shipping Agent Name"; Rec."Shipping Agent Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Displays the name of the shipping agent handling this order.';
                }
                field("Shipping Agent URL"; Rec."Shipping Agent URL")
                {
                    ApplicationArea = All;
                    ToolTip = 'Shows the website URL of the shipping agent.';
                }
                field("Shipping Agent Service Code"; Rec."Shipping Agent Service Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the code of the shipping service used for this order.';
                }
                field("Shipping Agent Service Name"; Rec."Shipping Agent Service Name")
                {
                    ApplicationArea = All;
                    ToolTip = 'Provides the name of the shipping service used for this order.';
                }
                field("Track & Trace Number"; Rec."Track & Trace Number")
                {
                    ApplicationArea = All;
                    ToolTip = 'Provides the tracking number to trace the shipment of this order.';
                }
                field("Track & Trace URL"; Rec."Track & Trace URL")
                {
                    ApplicationArea = All;
                    ToolTip = 'Provides the full URL for tracking this shipment.';
                }
                // Add other fields as needed with appropriate tooltips
            }
        }
    }

    actions
    {
        // Add actions if necessary
    }

    var
        SalesLine: Record "Sales Line";                   // Record variable for Sales Line table
        SalesHeader: Record "Sales Header";               // Record variable for Sales Header table
        "XTECSCShipmentLog": Record "XTECSC Shipment Log";        // Record variable for Shipment Log table
        ShippingAgent: Record "Shipping Agent";           // Record variable for Shipping Agent
        ShippingAgentServices: Record "Shipping Agent Services"; // Record variable for Shipping Agent Service
        CompanyNames: array[3] of Text[30];               // Array to hold company names
        CurrentCompanyName: Text[30];                     // Variable to hold the current company name

    trigger OnOpenPage()
    var
        i: Integer;                                       // Loop counter
    begin
        // Ensure the temporary table is empty
        Rec.DeleteAll();

        // Define the companies to fetch data from
        CompanyNames[1] := 'SCANPAN Norge';
        CompanyNames[2] := 'SCANPAN Danmark';

        // Loop through each company
        for i := 1 to 2 do begin
            CurrentCompanyName := CompanyNames[i];

            // Set up record variables for the company
            SalesHeader.ChangeCompany(CurrentCompanyName);
            SalesLine.ChangeCompany(CurrentCompanyName);
            "XTECSCShipmentLog".ChangeCompany(CurrentCompanyName);
            ShippingAgent.ChangeCompany(CurrentCompanyName);
            ShippingAgentServices.ChangeCompany(CurrentCompanyName);

            // Filter Sales Header to include only Sales Orders
            SalesHeader.Reset();
            SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);

            // Apply Sell-to Customer No. filters based on the company
            if CurrentCompanyName = 'SCANPAN Norge' then
                SalesHeader.SetRange("Sell-to Customer No.", '8245')    // Filter for Norge
            else
                SalesHeader.SetFilter("Sell-to Customer No.", '1919|1921'); // Filter for Danmark

            // Loop through the filtered Sales Headers
            if SalesHeader.FindSet() then
                repeat
                    // Retrieve Sales Lines for this Sales Header
                    SalesLine.Reset();
                    SalesLine.SetRange("Document Type", SalesLine."Document Type"::Order);
                    SalesLine.SetRange("Document No.", SalesHeader."No.");

                    // Loop through the Sales Lines
                    if SalesLine.FindSet() then
                        repeat
                            // Initialize temporary record
                            Rec.Init();
                            Rec."Company Name" := CurrentCompanyName;
                            Rec."Order No." := SalesHeader."No.";
                            Rec."Document Status" := SalesHeader.Status;
                            Rec."Order Date" := SalesHeader."Order Date";
                            Rec."Customer No." := SalesHeader."Sell-to Customer No.";
                            Rec."Customer Name" := SalesHeader."Sell-to Customer Name";
                            Rec."Address" := SalesHeader."Sell-to Address";
                            Rec."Address 2" := SalesHeader."Sell-to Address 2";
                            Rec."City" := SalesHeader."Sell-to City";
                            Rec."Post Code" := SalesHeader."Sell-to Post Code";
                            Rec."Country/Region Code" := SalesHeader."Sell-to Country/Region Code";
                            Rec."Contact" := SalesHeader."Sell-to Contact";
                            Rec."Phone No." := SalesHeader."Sell-to Phone No.";
                            Rec."Email" := SalesHeader."Sell-to E-Mail";
                            Rec."Line No." := SalesLine."Line No.";
                            Rec."Item Type" := SalesLine.Type;
                            Rec."Item No." := SalesLine."No.";
                            Rec.Description := SalesLine.Description;
                            Rec.Quantity := SalesLine.Quantity;
                            Rec."Quantity to Ship" := SalesLine."Outstanding Quantity";
                            Rec."Quantity Shipped" := SalesLine."Quantity Shipped";
                            Rec."Line Amount" := SalesLine."Line Amount";

                            // Fetch Shipping Information from Shipment Log
                            "XTECSCShipmentLog".Reset();
                            "XTECSCShipmentLog".SetRange("Shipment Type", "XTECSCShipmentLog"."Shipment Type"::"Sales Order");
                            "XTECSCShipmentLog".SetRange("Order No.", SalesHeader."No.");
                            // ShipmentLog.SetRange("Order Line No.", SalesLine."Line No."); // Uncomment if needed
                            if "XTECSCShipmentLog".FindLast() then begin
                                Rec."Shipping Agent Code" := "XTECSCShipmentLog"."Shipping Agent";
                                Rec."Shipping Agent Service Code" := "XTECSCShipmentLog"."Shipping Agent Service";
                                Rec."Track & Trace Number" := "XTECSCShipmentLog"."Track & Trace Number";

                                // Lookup Shipping Agent Name and URL
                                ShippingAgent.Reset();
                                ShippingAgent.SetRange("Code", "XTECSCShipmentLog"."Shipping Agent");
                                if ShippingAgent.FindFirst() then begin
                                    Rec."Shipping Agent Name" := ShippingAgent.Name;
                                    Rec."Shipping Agent URL" := ShippingAgent."Internet Address";
                                end else begin
                                    Rec."Shipping Agent Name" := '';
                                    Rec."Shipping Agent URL" := '';
                                end;

                                // Lookup Shipping Agent Service Name
                                ShippingAgentServices.Reset();
                                ShippingAgentServices.SetRange("Shipping Agent Code", "XTECSCShipmentLog"."Shipping Agent");
                                ShippingAgentServices.SetRange("Code", "XTECSCShipmentLog"."Shipping Agent Service");
                                if ShippingAgentServices.FindFirst() then
                                    Rec."Shipping Agent Service Name" := ShippingAgentServices.Description
                                else
                                    Rec."Shipping Agent Service Name" := '';

                                // Construct the Track & Trace URL
                                if Rec."Shipping Agent URL" <> '' then
                                    Rec."Track & Trace URL" := StrSubstNo(Rec."Shipping Agent URL", Rec."Track & Trace Number")
                                else
                                    Rec."Track & Trace URL" := '';
                            end else begin
                                Rec."Shipping Agent Code" := '';
                                Rec."Shipping Agent Service Code" := '';
                                Rec."Track & Trace Number" := '';
                                Rec."Shipping Agent Name" := '';
                                Rec."Shipping Agent URL" := '';
                                Rec."Shipping Agent Service Name" := '';
                                Rec."Track & Trace URL" := '';
                            end;

                            // Insert into temporary table
                            Rec.Insert();
                        until SalesLine.Next() = 0;    // Move to the next Sales Line
                until SalesHeader.Next() = 0;          // Move to the next Sales Header

            // Reset ChangeCompany for the next iteration
            SalesHeader.ChangeCompany('');
            SalesLine.ChangeCompany('');
            "XTECSCShipmentLog".ChangeCompany('');
            ShippingAgent.ChangeCompany('');
            ShippingAgentServices.ChangeCompany('');
        end;
    end;
}
 
/// <summary>
/// Page PriceListSource (ID 50028).
/// </summary>
///
/// <remarks>
///
/// 2023.03.30                  Jesper Harder               020     PriceList Source Data Code start.
///
/// </remarks>
page 50028 "WebServiceSalesPriceListSource"
{
    AdditionalSearchTerms = 'Scanpan, Webservice';
    Caption = 'WebSevice Sales Pricelist Source Data';
    Editable = false;
    PageType = List;
    SourceTable = Item;
    SourceTableView = where("Inventory Posting Group" = filter('INTERN|EKSTERN|BRUND'));
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    Permissions =
        tabledata Item = R,

        tabledata "Item Reference" = R,

        tabledata "Item Translation" = R,
        tabledata "Item Unit of Measure" = R,
        tabledata "Price List Line" = R;

    layout
    {
        area(Content)
        {
            repeater(pricelistsource)
            {
                field("No."; Rec."No.")
                {
                    ToolTip = 'Specifies the number of the item.';
                }
                field(Description; Rec.Description)
                {
                    ToolTip = 'Specifies what you are selling.';
                }
                field(ItemDescriptionDAN; ItemDescriptionDAN)
                {
                    Caption = 'Item Description (DAN)';
                    ToolTip = 'Item Description translated to Danish.';
                }
                field(ItemDescriptionENU; ItemDescriptionENU)
                {
                    Caption = 'Item Description (ENU)';
                    ToolTip = 'Item Description translated to English US.';
                }
                field(ItemDescriptionNOR; ItemDescriptionNOR)
                {
                    Caption = 'Item Description (NOR)';
                    ToolTip = 'Item Description translated to Norweigan.';
                }

                field(BarCode; BarCode)
                {
                    Caption = 'Barcode';
                    ToolTip = 'Item Barcode No.';
                }
                field(ItemBaseUnitOfMeasure; ItemBaseUnitOfMeasure)
                {
                    Caption = 'Item Base Unit of Measure';
                    ToolTip = 'Item Base Unit of Measure.';
                }
                field(InnerQuantity; InnerQuantity)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    Caption = 'Inner Quantity';
                    ToolTip = 'Inner Quantity.';
                }
                field(MasterQuantity; MasterQuantity)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    Caption = 'Master Quantity';
                    ToolTip = 'Master Quantity.';
                }
                field(ItemUnitCost; ItemUnitCost)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    Caption = 'Item Unit Cost';
                    ToolTip = 'Item Unit Cost from Item Card.';
                }
                field(ItemIndirectCostPct; ItemIndirectCostPct)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    Caption = 'Item Indirect Cost pct';
                    ToolTip = 'Item Indirect Cost pct.';
                }
                field(PurchasePrice; PurchasePrice)
                {
                    BlankNumbers = BlankZero;
                    BlankZero = true;
                    Caption = 'Item Purchase Price';
                    ToolTip = 'Maximum Purchase Price from Open Ending Date.';
                }
                field(PurchasePriceCurency; PurchasePriceCurency)
                {
                    Caption = 'Purchase Price Currency';
                    ToolTip = 'Purchase Pricelist Currency for hte Item.';
                }
            }
        }
    }

    var
        ItemIndirectCostPct: Decimal;
        ItemUnitCost: Decimal;
        MasterQuantity: Decimal;
        InnerQuantity: Decimal;
        PurchasePrice: Decimal;
        EnumGetItem: Enum EnumGetItem;
        EnumGetItemPurchasePrice: Enum EnumGetItemPurchasePrice;
        EnumItemUnitOfMeasureCode: Enum EnumItemUnitOfMeasureCode;
        PurchasePriceCurency: Text[5];
        BarCode: Text[50];
        ItemBaseUnitOfMeasure: text[20];
        ItemDescriptionDAN: Text[100];
        ItemDescriptionENU: Text[100];
        ItemDescriptionNOR: Text[100];

    trigger OnAfterGetRecord()
    var
    begin
        BarCode := GetBarcode(Rec."No.");
        MasterQuantity := GetMeasureQuantity(Rec."No.", EnumItemUnitOfMeasureCode::Master);
        InnerQuantity := GetMeasureQuantity(Rec."No.", EnumItemUnitOfMeasureCode::Inner);
        Evaluate(ItemUnitCost, GetItem(Rec."No.", EnumGetItem::"Unit Cost"));
        Evaluate(ItemIndirectCostPct, GetItem(Rec."No.", EnumGetItem::"Indirect Unit Cost %"));
        ItemBaseUnitOfMeasure := CopyStr(GetItem(Rec."No.", EnumGetItem::"Base Unit of Measure"), 1, 20);
        Evaluate(PurchasePrice, GetItemPurchasePrice(Rec."No.", EnumGetItemPurchasePrice::"Direct Unit Cost"));
        PurchasePriceCurency := CopyStr(GetItemPurchasePrice(Rec."No.", EnumGetItemPurchasePrice::"Currency Code"), 1, 5);
        ItemDescriptionDAN := GetItemDescriptionTranslation(Rec."No.", 'DAN');
        ItemDescriptionENU := GetItemDescriptionTranslation(Rec."No.", 'ENU');
        ItemDescriptionNOR := GetItemDescriptionTranslation(Rec."No.", 'NOR');
    end;

    local procedure GetBarcode(ItemNo: code[20]): code[50]
    var

        ItemReference: Record "Item Reference";

        Items: Record Item;
    begin
        Items.Get(ItemNo);
        ItemReference.SetFilter("Item No.", Items."No.");
        ItemReference.SetFilter("Reference Type", '%1', ItemReference."Reference Type"::"Bar Code");
        ItemReference.SetFilter("Unit of Measure", items."Base Unit of Measure");
        if ItemReference.FindFirst() then exit(ItemReference."Reference No.");
    end;

    local procedure GetItem(ItemNo: code[20]; ReturnType: Enum EnumGetItem): Text
    var
        Items: Record Item;
    begin
        if Items.Get(ItemNo) then begin
            if ReturnType = ReturnType::"Unit Cost" then exit(Format(Items."Unit Cost"));
            if ReturnType = ReturnType::"Indirect Unit Cost %" then exit(Format(Items."Indirect Cost %"));
            if ReturnType = ReturnType::"Base Unit of Measure" then exit(Items."Base Unit of Measure");
        end;
    end;

    local procedure GetItemDescriptionTranslation(ItemNo: Code[20]; LanguageCode: code[20]): text[100]
    var
        ItemTranslation: Record "Item Translation";
        Text000Lbl: Label 'Missing Translation';
    begin
        if ItemTranslation.Get(ItemNo, '', LanguageCode) then exit(ItemTranslation.Description);
        exit(Text000Lbl);
    end;

    local procedure GetItemPurchasePrice(ItemNo: Code[20]; ReturnType: Enum EnumGetItemPurchasePrice): Text
    var
        PriceListLines: Record "Price List Line";
        MyPurchasePrice: Decimal;
        Currency: Text[10];
    begin
        PriceListLines.SetFilter("Assign-to No.", '<>1469'); //Exept WEGROW
        PriceListLines.SetFilter("Price Type", '%1', PriceListLines."Price Type"::Purchase);
        PriceListLines.SetFilter("Asset Type", '%1', PriceListLines."Asset Type"::Item);
        PriceListLines.SetFilter("Asset No.", ItemNo);
        PriceListLines.SetFilter("Ending Date", '%1|>=%2', 0D, Today);
        if PriceListLines.FindSet() then
            repeat
                if PriceListLines."Direct Unit Cost" > MyPurchasePrice then MyPurchasePrice := PriceListLines."Direct Unit Cost";
                Currency := PriceListLines."Currency Code";
            until PriceListLines.Next() = 0;
        if ReturnType = ReturnType::"Direct Unit Cost" then exit(format(MyPurchasePrice));
        if ReturnType = ReturnType::"Currency Code" then exit(Currency);
    end;

    local procedure GetMeasureQuantity(ItemNo: code[20]; CodeType: Enum EnumItemUnitOfMeasureCode): Decimal
    var
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        if CodeType = CodeType::Master then
            if ItemUnitOfMeasure.Get(ItemNo, 'MASTER') then exit(ItemUnitOfMeasure."Qty. per Unit of Measure");
        if CodeType = CodeType::Inner then
            if ItemUnitOfMeasure.Get(ItemNo, 'INNER') then exit(ItemUnitOfMeasure."Qty. per Unit of Measure");
    end;
}
 




page 50019 "WMSPickBinBalance"
{
    /// <summary>
    /// Page "SCANPANWMSPickBinBalance" (ID 50019).
    /// </summary>
    /// 
    /// <remarks>
    /// 
    /// 2023.03             Jesper Harder                       002     Added
    /// 
    /// </remarks>
    /// 

    AdditionalSearchTerms = 'Scanpan, Warehouse, Shipment';
    ApplicationArea = All;
    Caption = 'Warehouse Pick Bin Balance';
    PageType = List;
    Permissions =
        tabledata WMSPickBinBalanceTMP = RIMD;
    SourceTable = WMSPickBinBalanceTMP;
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            field(FilterDate; FilterDate)
            {
                Caption = 'Date Filter';
                ToolTip = 'Specifies the value of the Date Filter field.';
                trigger OnValidate()
                var
                begin
                    ScanpanMiscellaneous.FillPickBalanceDataTable(Rec, FilterDate);
                end;
            }
            repeater(General)
            {
                field("Line No."; Rec."Line No.")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Line No. field.';
                }
                field("Item No"; Rec."Item No")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item No field.';
                }
                field("Item Description"; Rec."Item Description")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Item Description field.';
                }
                field("Bin Code"; Rec."Bin Code")
                {
                    ApplicationArea = All;
                    ToolTip = 'Specifies the value of the Bin Code field.';
                }
                field("Pick Quantity"; Rec."Pick Quantity")
                {
                    ApplicationArea = All;
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the value of the Pick Quantity field.';
                }
                field("Bin Quantity"; Rec."Bin Quantity")
                {
                    ApplicationArea = All;
                    BlankNumbers = BlankZero;
                    ToolTip = 'Specifies the value of the Bin Quantity field.';
                }
                field("Bin Quantity Balance"; Rec."Bin Quantity Balance")
                {
                    ApplicationArea = All;
                    BlankNumbers = BlankZero;
                    Style = Attention;
                    StyleExpr = ToggleBinBalanceColor;
                    ToolTip = 'Specifies the value of the Bin Quantity Balance field.';
                }
            }
        }
    }
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        ToggleBinBalanceColor: Boolean;
        FilterDate: Date;

    trigger OnAfterGetRecord()
    var
    begin
        ToggleBinBalanceColor := false;
        if Rec."Bin Quantity Balance" < 0 then ToggleBinBalanceColor := true;
    end;


}
 
/// <summary>
/// PageExtension "BankAccountLedgerEntriesExtSC" (ID 50042) extends Record Bank Account Ledger Entries.
/// </summary>
///
/// <remarks>
/// 2023.03.07                          Jesper Harder           003                     Field Added - External Document No.
/// </remarks>
pageextension 50049 BankAccountLedgerEntriesExtSC extends "Bank Account Ledger Entries"
{
    layout
    {
        addlast(Control1)
        {
            field("External Document No."; Rec."External Document No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies a document number that refers to the customer''s or vendor''s numbering system.';
                Visible = true;
            }
        }
    }
}
 
/// <summary>
/// PageExtension BinContentsExtSC (ID 50053) extends Record Bin Content.
/// </summary>
///
/// <remarks>///
///
///  2023.03.18                 Jesper Harder               009     Bin Content Added flowfield Inventory Posting Group, Product Line
///
/// </remarks>

pageextension 50053 "BinContentsExtSC" extends "Bin Contents"
{
    layout
    {
        addlast(Control37)
        {
            field("Inventory Posting Group"; Rec."Inventory Posting Group")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Inventory Posting Group field.';
            }
            field("Product Line Code"; Rec."Product Line Code")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Product Line Code field.';
            }
            field("Transfer Order No."; Rec."Transfer Order No.")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Transfer Order No. field.';
            }
        }

        addlast(Options)
        {
            group(scanpanfilter)
            {
                caption = 'Scanpan filter';
                ShowCaption = false;

                field(SetItemFilter; SetItemFilter)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Set AUNING Filters';
                    ToolTip = 'Sets filter to identify Items ready to transfer to AUNING.';
                    trigger OnValidate()
                    var
                    begin
                        SetAuningFilters();
                    end;
                }
                field(SetNotZeroFilter; SetNotZeroFilter)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Show only with Contents';
                    ToolTip = 'Sets filter to show only Bin with Contents.';
                    trigger OnValidate()
                    var
                    begin
                        SetContentsFilters();
                    end;
                }
                field(SetTransferOrdersFilter; SetTransferOrdersFilter)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Show only Transfer Orders';
                    ToolTip = 'Sets filter to show lines with Transfer Orders.';
                    trigger OnValidate()
                    var
                    begin
                        SetTransferOrdersFilters();
                    end;
                }
            }
        }
    }

    trigger OnOpenPage()
    var
    begin
        SetItemFilter := false;
        SetAuningFilters();
    end;

    trigger OnAfterGetCurrRecord()
    var
    begin

        SetItemFilter := true;
        if Rec.GetFilter("Inventory Posting Group") <> 'INTERN|EKSTERN|BRUND' then SetItemFilter := false;
        if Rec.GetFilter("Location Code") <> 'RYOM' then SetItemFilter := false;

        SetNotZeroFilter := true;
        if Rec.GetFilter("Quantity (Base)") <> '<>0' then SetNotZeroFilter := false;

        SetTransferOrdersFilter := true;
        if Rec.GetFilter("Transfer Order No.") = '' then SetTransferOrdersFilter := false;
    end;

    var
        SetItemFilter: Boolean;
        SetNotZeroFilter: Boolean;
        SetTransferOrdersFilter: Boolean;

    local procedure SetAuningFilters()
    var
    begin
        Rec.SetRange("Location Code");
        Rec.SetRange("Inventory Posting Group");
        if SetItemFilter then begin
            Rec.SetFilter("Inventory Posting Group", 'INTERN|EKSTERN|BRUND');
            Rec.SetFilter("Location Code", 'RYOM');
        end;
        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;

    local procedure SetContentsFilters()
    var
    begin
        Rec.SetRange("Quantity (Base)");
        if SetNotZeroFilter then
            Rec.SetFilter("Quantity (Base)", '<>%1', 0);

        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;

    local procedure SetTransferOrdersFilters()
    var
    begin
        Rec.SetRange("Transfer Order No.");
        if SetTransferOrdersFilter then
            Rec.SetFilter("Transfer Order No.", '<>%1', '');

        if Rec.FindFirst() then;
        CurrPage.Update(false);
    end;
}
 


/// <summary>
/// PageExtension CampaignCard (ID 50082) extends Record Campaign Card.
/// </summary>
///
/// <remarks>
/// 2023.06.12                  Jesper Harder               034 Campaign statistics
/// </remarks>
pageextension 50082 "CampaignCard" extends "Campaign Card"
{
    layout
    {
        moveafter(Description; "Campaign Purpose NOTO")
    }
} 

/// <summary>
/// PageExtension CampaignListExtSC (ID 50016) extends Record Campaign List.
/// </summary>
/// 
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50016 "CampaignListExtSC" extends "Campaign List"
{
    layout
    {
        addafter("Status Code")
        {
            field("Salesperson Code56262"; Rec."Salesperson Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the code of the salesperson responsible for the campaign.';
            }
        }
    }
} 





/// <summary>
/// PageExtension CapacityLedgerEntries (ID 50090) extends Record Capacity Ledger Entries.
/// </summary>
pageextension 50090 CapacityLedgerEntries extends "Capacity Ledger Entries"
{
    layout
    {
        addafter("Shortcut Dimension 8 Code")
        {
            field("Stop Time1"; Rec."Stop Time")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the stop time of this entry.';
            }
            field("Stop Code1"; Rec."Stop Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the stop code.';
            }
        }
    }
}
 



/// <summary>
/// PageExtension CDOE-MailRecipientsExtSC (ID 50038) extends Record CDO E-Mail Recipients.
/// </summary>
pageextension 50038 "CDOEMailRecipientsExtSC" extends "CDO E-Mail Recipients"
{
    actions
    {
        addlast(Navigation)
        {
            group(SCANPAN)
            {
                Caption = 'SCANPAN';
                Image = "List";
                ToolTip = 'Shortcuts SCANPAN';
                action("EditE-MailRecipientsList")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Complete E-Mail Recipients List';
                    Image = Campaign;
                    RunObject = Page "CDOE-MailRecipient";
                    ToolTip = 'See and Edit Complete E-Mail Recipients List';
                }
            }
        }
    }
}
 

/// <summary>
/// PageExtension CDOUnhandledPurchaseOrderExtSC (ID 50019) extends Record CDO Unhandled Purchase Order.
/// </summary>
/// s
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50019 "CDOUnhandledPurchaseOrderExtSC" extends "CDO Unhandled Purchase Order"
{
    layout
    {
        addafter("1000000013")
        {
            field("Container ID NOTO02765"; Rec."Container ID NOTO")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Container ID field.';
            }
            field("Bill of Lading No. NOTO11584"; Rec."Bill of Lading No. NOTO")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Bill of Lading No. field.';
            }
        }
    }
}
 




/// <summary>
/// PageExtension ChangeLogEntries (ID 50095) extends Record Change Log Entries.
/// </summary>
pageextension 50095 "ChangeLogEntries" extends "Change Log Entries"
{
    layout
    {
        addafter("Table Caption")
        {
            field("Table No.44238"; Rec."Table No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the number of the table containing the changed field.';
            }
            field("Primary Key16202"; Rec."Primary Key")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the primary key or keys of the changed field.';
            }
        }
    }
}
 




///
/// 2024.05             Jesper Harder       067         Add fields to facilitate Datawarehouse fields
/// 

pageextension 50108 CountryRegions extends "Countries/Regions"
{
    layout
    {
        addlast(Control1)
        {
            //067
            field("SalesMarket"; Rec."SalesMarket")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Sales Market field.';
            }
            field("Market Type"; Rec."Market Types")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Market Type field.';
            }
            field("Channel Type"; Rec."Channel Types")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Channel Type field.';
            }
        }
    }
} 
pageextension 50035 "CustomerCard" extends "Customer Card"
{
    /// <summary>
    /// PageExtension "CustomerCardExtSC" (ID 50035) extends the Customer Card.
    /// </summary>
    /// <remarks>
    /// 2023.11             Jesper Harder       059         Added PO Number City, broke lookup for Web Customers.
    /// 2024.09             Jesper Harder       080         Added self-insured limit check with warning on sales order.
    /// 2024.10             Jesper Harder       090         Field for Claims, allow reporting quantity
    /// </remarks>

    layout
    {
        // Adds a bank field to the Payments group on the Customer Card page
        addlast(Payments)
        {
            field(Bank1; Rec.Bank)
            {
                ApplicationArea = all;
                ToolTip = 'Choose what Bank information to show on certain documents.';
            }
        }

        // Adds a new Scanpan group after the Shipping section
        addafter(Shipping)
        {
            group(ScanpanGroup)
            {
                Caption = 'Scanpan';

                group(Misc)
                {
                    ShowCaption = false;
                    // Additional fields can be added here later if needed
                }

                group(Claims)
                {
                    Caption = 'Claims settings';

                    field(ClaimsUser; Rec.ClaimsUser)
                    {
                        ApplicationArea = Basic, Suite;
                        Importance = Promoted;
                        ToolTip = 'Specifies the Claims Username used in the Claims Web application.';
                    }

                    field(ClaimsCode; Rec.ClaimsCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Importance = Promoted;
                        ToolTip = 'Specifies the Claims Code used in the Claims Web application.';
                    }

                    // 090
                    field("Allow Claims Quantity"; Rec."Allow Claims Quantity")
                    {
                        ApplicationArea = Basic, Suite;
                        Importance = Promoted;
                        ToolTip = 'Specifies is the Claims Customer is allowed to type quantity for each claim on the Claims Web application.';
                    }
                }
            }
        }

        // 080 Adds the Self-Insured Limit field after the "Credit Limit (LCY)" section
        addafter("Credit Limit (LCY)")
        {
            field("Self-Insured Limit (LCY)"; Rec."Self-Insured (LCY)")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the Self-Insured Limit (LCY) for the customer.';
                StyleExpr = SelfInsuredStyleTxt;
            }
        }
    }


    //080
    var
        SelfInsuredStyleTxt: Text;

    trigger OnAfterGetCurrRecord()
    begin

        SetSelfInsuredCreditLimitStyle();
    end;

    local procedure SetSelfInsuredCreditLimitStyle()
    var
        BalanceExhausted: Boolean;
    begin
        SelfInsuredStyleTxt := '';
        BalanceExhausted := false;
        if REc."Self-Insured (LCY)" > 0 then
            BalanceExhausted := Rec."Balance (LCY)" >= Rec."Self-Insured (LCY)";
        if BalanceExhausted then
            SelfInsuredStyleTxt := 'Unfavorable';
    end;
}
 


/// <summary>
/// PageExtension CustomerListExtSC (ID 50010) extends Record Customer List.
/// </summary>
/// 
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2022.12             Jesper Harder       0193        Name Visible True
/// </remarks>
pageextension 50010 "CustomerList" extends "Customer List"
{
    layout
    {
        addafter("No.")
        {
            field("Country/Region Code1"; Rec."Country/Region Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Country/Region Code field.';
            }
        }

        modify("Name") { Visible = true; }
        modify("Name 2") { Visible = false; }
        moveafter(Name; "Old Customer No.")
        addafter("Name") { field("Search Name1"; Rec."Search Name") { ApplicationArea = All; ToolTip = 'Specifies an alternate name that you can use to search for a customer.'; } }

        addlast(Control1) { field(ClaimsUser; Rec.ClaimsUser) { ApplicationArea = All; ToolTip = 'Specifies the Claims Username used in Claims Web application.'; } }
        addlast(Control1) { field(ClaimsCode; Rec.ClaimsCode) { ApplicationArea = All; ToolTip = 'Specifies the Claims Code used in Claims Web application.'; } }
        //moveafter("No."; "Name 239160")
    }
    actions
    {
        addafter(Create)
        {
            action(EUVATXMLPORT)
            {
                Caption = 'EU VAT Export';
                Promoted = true;
                PromotedCategory = Process;
                Image = Export;
                ApplicationArea = All;
                ToolTip = 'Executes the EU VAT Export action.';
                trigger OnAction()
                begin
                    Xmlport.Run(50001, true, false)
                end;
            }
        }
    }
}


 

/// <summary>
/// PageExtension CustomerLookupExtSC (ID 50009) extends Record Customer Lookup.
/// </summary>
/// 
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50009 "CustomerLookupExtSC" extends "Customer Lookup"
{
    layout
    {

        //modify(Name) { Visible = false; }
        //modify("Post Code") { Visible = false; }
        modify("Old Customer No.") { Visible = false; }
        modify("Phone No.") { Visible = false; }
        modify(Contact) { Visible = false; }

        addfirst("Group") { field("AlternativeDebitorNr"; Rec."Old Customer No.") { ApplicationArea = All; ToolTip = 'Specifies the value of the Alternative Customer No. field.'; } }


    }

}
 



/// 2024.05             Jesper Harder       066         Test for Correct Chain Dimension value on Customer
pageextension 50107 DefaultDimensions extends "Default Dimensions"
{
    layout
    {
        addafter("Value Posting")
        {
            //066
            field("Dimension Value Type"; rec."Dimension Value Type")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the purpose of the dimension value.';
            }
        }
    }
} 







pageextension 50083 "EmployeeQualifications" extends "Employee Qualifications"
{


    layout
    {

        addfirst(Control1)
        {
            field("Employee No."; Rec."Employee No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies a number for the employee.';
                Visible = true;
            }
        }
    }


} 





/// <summary>
/// PageExtension FinishedProduction Orders (ID 50098) extends Record Finished Production Orders.
/// </summary>
pageextension 50098 "FinishedProductionOrders" extends "Finished Production Orders"
{
    layout
    {
        addafter("Due Date")
        {
            field("Finished Date91039"; Rec."Finished Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the actual finishing date of a finished production order.';
            }
        }
        addafter("Ending Date-Time")
        {
            field("Prod. Group Code75969"; Rec."Prod. Group Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Product Group Code field.';
            }
        }
        addafter("Ending Date-Time")
        {
            field("Location Code50327"; Rec."Location Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the location code to which you want to post the finished product from this production order.';
            }
        }

    }
}
 





/// <summary>
/// PageExtension FirmPlannedProdOrder (ID 50093) extends Record Firm Planned Prod. Order.
/// </summary>
pageextension 50093 "FirmPlannedProdOrder" extends "Firm Planned Prod. Order"
{
    layout
    {
        addafter("Item Feature")
        {
            field("Location Code27160"; Rec."Location Code")
            {
                ApplicationArea = All;
            }
            field("Bin Code66758"; Rec."Bin Code")
            {
                ApplicationArea = All;
            }
        }
    }
}
 





pageextension 50094 "FirmPlannedProdOrderLines" extends "Firm Planned Prod. Order Lines"
{
    layout
    {
        addafter("Unit Cost")
        {
            field("Location Code99517"; Rec."Location Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the location code, if the produced items should be stored in a specific location.';
            }
            field("Bin Code81857"; Rec."Bin Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the bin that the produced item is posted to as output, and from where it can be taken to storage or cross-docked.';
            }
        }
    }
}
 




/// <summary>
/// PageExtension Firm Planned Prod. Orders (ID 50087) extends Record Firm Planned Prod. Orders.
/// </summary>
pageextension 50088 "Firm Planned Prod. Orders" extends "Firm Planned Prod. Orders"
{
    layout
    {
        addlast(Control1)
        {
            field("Component Lines Count"; Rec."Component Lines Count")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Component Lines Count field.';
            }
        }

    }
} 





/// <summary>
/// PageExtension FixedAssetCard (ID 50104) extends Record Fixed Asset Card.
/// </summary>
pageextension 50104 "FixedAssetCard" extends "Fixed Asset Card"
{
    layout
    {
        addafter(Description)
        {
            field("Description 2"; rec."Description 2")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Description 2 field.';
            }
        }
    }
} 



/// <summary>
/// PageExtension ForNAVReports (ID 50001) extends Record ForNAV Reports.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50001 "ForNAVReports" extends "ForNAV Reports"
{
    layout
    {
        addafter("Current Report Layout") { field(Layout14991; Rec.Layout) { ApplicationArea = All; ToolTip = 'Specifies the value of the Layout field.'; } }
    }
}
 


/// <summary>
/// PageExtension "GeneralJournalExtSC" (ID 50033) extends Record General Journal.
/// </summary>
pageextension 50033 GeneralJournalExtSC extends "General Journal"
{
    layout
    {
        moveafter(Amount; "Shortcut Dimension 1 Code")
        moveafter("Shortcut Dimension 1 Code"; "Shortcut Dimension 2 Code")
        moveafter("Shortcut Dimension 2 Code"; ShortcutDimCode3)
        moveafter(ShortcutDimCode3; ShortcutDimCode4)
        moveafter(ShortcutDimCode4; ShortcutDimCode6)
        moveafter(ShortcutDimCode6; ShortcutDimCode8)
        moveafter("Shortcut Dimension 2 Code"; "Gen. Prod. Posting Group")
        moveafter(ShortcutDimCode3; "Currency Code")
        moveafter(ShortcutDimCode3; "Gen. Bus. Posting Group")

        addafter(Amount)
        {
            field("VAT Posting82193"; Rec."VAT Posting")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the VAT Posting field.';
            }
            field("VAT Amount73753"; Rec."VAT Amount")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the amount of VAT that is included in the total amount.';
            }
        }
        addafter(Description)
        {
            field("Applies-to Doc. Type92013"; Rec."Applies-to Doc. Type")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the type of the posted document that this document or journal line will be applied to when you post, for example to register payment.';
            }
            field("Applies-to Doc. No.34516"; Rec."Applies-to Doc. No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the number of the posted document that this document or journal line will be applied to when you post, for example to register payment.';
            }
        }


    }

}
 



pageextension 50111 GeneralLedgerEntries extends "General Ledger Entries"
{
    layout
    {
        addafter("External Document No.")
        {
            field("User ID90897";Rec."User ID")
            {
                ApplicationArea = All;
            }
        }
    }
}
 





/// <summary>
/// PageExtension GetShipmentLines (ID 50076) extends Record Get Shipment Lines.
/// </summary>
/// 
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// 
/// </remarks>
pageextension 50076 "GetShipmentLines" extends "Get Shipment Lines"
{
    layout
    {

        addafter("Document No.")
        {
            field("Transport Order No2"; Rec."Transport Order No2")
            {
                ApplicationArea = All;
                ToolTip = 'Shows most recent Transport Order Id.';
            }

                                          
                        field("Shipping Agent Code"; Rec."Shipping Agent Code2")
                        {
                            ApplicationArea = All;
                            ToolTip = 'The Shipping agent used for the transport.';
                        }
                        field("Shipping Agent Service Code"; Rec."Shipping Agent Service Code2")
                        {
                            ApplicationArea = All;
                            ToolTip = 'The Service Code used with the Shipping Agent.';
                        }
                        
            
        }

        modify("Whse. Dcoument No.") { Visible = false; }
        modify("License Plate No.") { Visible = false; }
        //removed NOTORA ShipIT modify("Transport Order No.") { Visible = false; }
    }
} 

//SHIPITREMOVE

/// <summary>
/// PageExtension "IDYSTranspOrderLstExtSC" (ID 50039) extends Record IDYS Transport Order List .
/// </summary>

/*
pageextension 50039 IDYSTranspOrderLstExtSC extends "IDYS Transport Order List"
{

    layout
    {
        moveafter("Shipping Agent Service Code"; "Name (Ship-to)")

        addafter("Shipping Agent Code")
        {
            field("Total Count of Packages1"; Rec."Total Count of Packages")
            {
                ApplicationArea = All;
            }
        }

    }

    trigger OnOpenPage()
    begin
        Rec.SetCurrentKey("No.");
        Rec.Ascending(false);
        Rec.FindFirst();
    end;

}
*/ 

//SHIPITREMOVE

/// <summary>
/// PageExtension IDYSTransportOrderCard (ID 50073) extends Record IDYS Transport Order Card.
/// </summary>

/*
pageextension 50073 "IDYSTransportOrderCard" extends "IDYS Transport Order Card"
{


    actions
    {
        addafter(Archive)
        {
            action(UpdateTransportOrderIDs)
            {
                Image = UpdateShipment;
                Caption = 'WriteBack Order No., To Shipment';
                ToolTip = 'Writes back Transport Order No., to Sales Shipment and Warehouse Shipment documents.';
                trigger OnAction()
                var
                    PostedWhseShipmentHeader: Record "Posted Whse. Shipment Header";
                    PostedWhseShipmentLine: Record "Posted Whse. Shipment Line";
                    DocumentNo: text[9];
                begin
                    DocumentNo := CopyStr(Rec.Description, StrLen(Rec.Description) - 7, 8);
                    PostedWhseShipmentLine.Reset();
                    PostedWhseShipmentLine.SetFilter("Whse. Shipment No.", DocumentNo);
                    if PostedWhseShipmentLine.FindSet() then begin
                        PostedWhseShipmentLine.ModifyAll("Transport Order No.", Rec."No.", false);
                        PostedWhseShipmentHeader.Get(PostedWhseShipmentLine."No.");
                        PostedWhseShipmentHeader."Transport Order No." := Rec."No.";
                        PostedWhseShipmentHeader.Modify();
                    end;
                end;
            }
        }
    }


}
*/ 
//SHIPITREMOVE

/// <summary>
/// PageExtension "IDYSTransportOrderLines" (ID 50067) extends Record IDYS Transport Order Lines.
/// </summary>
/// <remarks>
/// 2023.05.01                  Jesper Harder                   027         Add Shipment tracking
/// </remarks>
///

/*
pageextension 50067 "IDYSTransportOrderLines" extends "IDYS Transport Order Lines"
{

    layout
    {
        addafter("Line No.") { field("Document Date"; Rec."Document Date") { ApplicationArea = all; Visible = true; ToolTip = 'Specifies the value of the Transport Order Document Date field.'; } }
    }

}
*/ 
/// <summary>
/// PageExtension InventorySetupExtSC (ID 50024) extends Record Inventory Setup.
/// </summary>
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193    Added modifications
/// 2023.07.23          Jesper Harder       042     Salesprice based on PurchasePrice Markup
/// </remarks>

pageextension 50024 "InventorySetup" extends "Inventory Setup"
{
    layout
    {
        addafter(Numbering)
        {
            group(ScanpanEAN)
            {
                Caption = 'Scanpan EAN Setup';

                field("EAN Country Code"; Rec."EAN Country Code")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'EAN Country Code';
                    ToolTip = 'EAN Country';
                }
                field("EAN Company No."; Rec."EAN Company No.")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'EAN Company No.';
                    ToolTip = 'EAN Country No. Code';
                }
                field("Last EAN Code Used"; Rec."Last EAN Code Used")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Last EAN Code Used';
                    ToolTip = 'Last uset EAN number';
                }
                field("Use Bar Code Type"; Rec."Use Bar Code Type")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Use Bar Code Type';
                    ToolTip = 'Use EAN code type';
                }
                field("UPC Prefix"; Rec."UPC Prefix")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'UPC Prefix';
                    ToolTip = 'UPC prefix';
                }
                field("UPC Company No."; Rec."UPC Company No.")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'UPC Company No.';
                    ToolTip = 'UPC Company No.';
                }
                field("Last UPC Code Used"; Rec."Last UPC Code Used")
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Last UPC Code Used';
                    ToolTip = 'Last used UPC code';
                }
            }
            group(ScanpanPriceMarkup)
            {
                Caption = 'Scanpan Price';
                field(PriceMarkupPct; Rec.PriceMarkupPct)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Salesprice Markup pct';
                    DecimalPlaces = 2 : 2;
                    ToolTip = 'Specifies the value of the Salesprice Purchase Markup pct field.';
                }
            }
        }
    }
}
 





pageextension 50119 "InvtReceipts" extends "Invt. Receipts"
{
    Caption = 'Inventory Reciepts (do not use)';

    trigger OnOpenPage()
    begin
        CurrPage.Close();
    end;
} 
/// <summary>
/// PageExtension ItemCardExtSC (ID 50041) extends Record Item Card.
/// 2024.06             Jesper Harder       069         ItemBodyType, Enum, TableExtension and PageExtension
/// </summary>
pageextension 50041 "ItemCard" extends "Item Card"
{
    layout
    {
        addlast(ItemCategorySales)
        {
            field("ItemBodyType"; Rec."ItemBodyType")
            {
                ApplicationArea = All;
                Caption = 'Item Body Type';
                ToolTip = 'Specifies the body type of the item, such as Steel Brushed, Steel Polished, Aluminium, etc.';
            }
        }
    }

    actions
    {
#pragma warning disable AL0432
        modify("Cross Re&ferences")
#pragma warning restore AL0432
        {
            Visible = false;
        }
    }
}
 







/// <summary>
/// PageExtension ItemCrossReferenceEntries (ID 50096) extends Record Item Cross Reference Entries.
/// </summary>
#pragma warning disable AL0432
pageextension 50096 "ItemCrossReferenceEntries" extends "Item Cross Reference Entries"
#pragma warning restore AL0432
{
    Caption = 'Depreciated Item Cross Reference Entries';

    trigger OnOpenPage()
    var
        MsgLbl: Label 'This page is obsolete and replaced by Item Reference feature.';
    begin
        if GuiAllowed then Message(MsgLbl);
    end;
} 

/// <summary>
/// PageExtension ItemJournalExtSC (ID 50021) extends Record Item Journal.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50021 "ItemJournalExtSC" extends "Item Journal"
{

    layout
    {
        addafter("Location Code")
        {
            field("Bin Code11297"; Rec."Bin Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies a bin code for the item.';
            }
        }

        addlast(Control1)
        {
            field("Line No."; Rec."Line No.")
            {
                ApplicationArea = All;
                Visible = true;
                ToolTip = 'Specifies the number of the journal line.';
            }
        }
    }
}
 
/// <summary>
/// 50005 "ItemListExtSC" extends "Item List"
/// </summary>

/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193    Added modifications
/// 2022.12             Jesper Harder       0193    Fields added and rearrangede
/// 2022.12             Jesper Harder       0193    Added View - ActiveSalesItems
/// 2022.12             Jesper Harder       0193    OnOpenPage - Set page filters according to Selected User Role Center
/// 2023.03             Jesper Harder       007     Added flowfield identifying Warehouse orders from Auning to Ryom Rec."Trans. RYOM-AUNING (Qty.)"
/// 2023.07.23          Jesper Harder       042     Salesprice based on PurchasePrice Markup
/// </remarks>

pageextension 50005 "ItemList" extends "Item List"
{
    layout
    {
        modify("Substitutes Exist") { Visible = false; }
        modify("Assembly BOM") { Visible = false; }
        modify("Unit Cost") { Visible = false; }
        modify("Unit Price") { Visible = false; }
        modify("Search Description") { Visible = true; }
        modify("Default Deferral Template Code") { Visible = false; }
        modify("Cost is Adjusted") { Visible = false; }

        addafter("Vendor No.")
        {
            field("Vendor Item No.1"; Rec."Vendor Item No.")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the number that the vendor uses for this item.';
            }
        }
        addafter("Vendor No.")
        {
            field("Item Vendor Name1"; Rec."Item Vendor Name")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Item Vendor Name field.';
            }
        }
        addafter("Search Description")
        {
            field("ABCD Category1"; Rec."ABCD Category")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the ABCD Category field.';
            }
        }
        addafter("ABCD Category1")
        {
            field("Product Line Code1"; Rec."Product Line Code")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Product Line Code field.';
            }
        }
        addafter("Product Line Code1")
        {
            field("Gen. Prod. Posting Group1"; "Gen. Prod. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the item''s product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.';
            }
        }
        addafter("Gen. Prod. Posting Group1")
        {
            field("Item Category Code1"; Rec."Item Category Code")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the category that the item belongs to. Item categories also contain any assigned item attributes.';
            }
        }
        addafter("Item Category Code1")
        {
            field("Prod. Group Code1"; Rec."Prod. Group Code")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Product Group Code field.';
            }
        }
        addafter("Prod. Group Code1")
        {
            field("GTIN1"; Rec.GTIN)
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the Global Trade Item Number (GTIN) for the item. For example, the GTIN is used with bar codes to track items, and when sending and receiving documents electronically. The GTIN number typically contains a Universal Product Code (UPC), or European Article Number (EAN).';
            }
        }

        addafter(GTIN1)
        {
            field("Qty. on Sales Order"; Rec."Qty. on Sales Order")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies how many units of the item are allocated to sales orders, meaning listed on outstanding sales orders lines.';
            }
        }
        addafter("Qty. on Sales Order")
        {
            field("Qty. in Transit"; Rec."Trans. RYOM-AUNING (Qty.)")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Trans. Outstanding RYOM-AUNING (Qty.) field.';
            }
        }
        addafter("Qty. in Transit")
        {
            field("Qty. on Prod. Order"; Rec."Qty. on Prod. Order")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies how many units of the item are allocated to production orders, meaning listed on outstanding production order lines.';
            }
        }
        addafter("Qty. on Prod. Order")
        {
            field("Qty. on Purch. Order"; Rec."Qty. on Purch. Order")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies how many units of the item are inbound on purchase orders, meaning listed on outstanding purchase order lines.';
            }
        }
        addafter("Qty. on Purch. Order")
        {
            field("Planning Receipt (Qty.)12304"; Rec."Planning Receipt (Qty.)")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Planning Receipt (Qty.) field.';
            }
        }


        //042
        addlast(Control1)
        {
            field(PriVendorPurchPriceLanded; PriVendorPurchPriceLanded)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Primary Vendor Purchase Landed Price';
                DecimalPlaces = 2 : 3;
                ToolTip = 'Calculates the Item Primary Vendor Price added Indirect Cost %.';
            }
        }
    }

    actions
    {
#pragma warning disable AL0432
        modify("Cross Re&ferences")
#pragma warning restore AL0432
        {
            Visible = false;
        }
    }

    views
    {
        addfirst
        {
            view(ActiveSalesItems)
            {
                Caption = 'Active Sales Items';
                Filters = where("Gen. Prod. Posting Group" = filter('BRUND|INTERN|EKSTERN'), Blocked = filter(0));
                OrderBy = ascending("No.");
            }
        }
    }

    trigger OnOpenPage()
    var
        UserPersonalization: Record "User Personalization";
    begin
        ///<remarks>
        /// 0193
        /// Change filter according to User Role Profile
        /// </remarks>

        UserPersonalization.Get(UserSecurityId());

        if UserPersonalization."Profile ID" = '_SALG' then begin
            Rec.SetCurrentKey("No.");
            Rec.SetFilter(Rec."Gen. Prod. Posting Group", 'BRUND|INTERN|EKSTERN');
            Rec.SetFilter(Blocked, '0');
            Rec.Ascending(true);
            Rec.FindFirst();
        end;
        /*
                If UserPersonalization."Profile ID" = '_PRODUKTION' then begin
                    Rec.SetCurrentKey("No.");
                    Rec.SetFilter(Rec."Gen. Prod. Posting Group", 'MELLEM|MELLEM RÅ');
                    Rec.SetFilter(Blocked, '0');
                    Rec.Ascending(true);
                    Rec.FindFirst();
                end;
        */
    end;

    trigger OnAfterGetRecord()
    var
    begin
        PriVendorPurchPriceLanded := ScanpanMiscellaneous.ItemCalculatePurchaseLandedPrice(Rec);
    end;

    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        PriVendorPurchPriceLanded: Decimal;
}
 


/// <summary>
/// pageextension 50006 "ItemLookupExtSC" extends "Item Lookup"
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50006 "ItemLookupExtSC" extends "Item Lookup"
{

    layout
    {
        modify("Unit Price") { Visible = false; }
        modify("Unit Cost") { Visible = false; }
        modify("Vendor No.") { Visible = false; }
        modify("Vendor Item No.") { Visible = false; }
        modify("Routing No.") { Visible = false; }

        addafter("Unit Cost") { field(Inventory1; Rec.Inventory) { ApplicationArea = All; ToolTip = 'Specifies the total quantity of the item that is currently in inventory at all locations.'; } }
        addafter(Inventory1) { field("Calculated Available NOTO1"; "Calculated Available NOTO") { ApplicationArea = all; ToolTip = 'Specifies the value of the Calculated Available field.'; } }

    }

}


 


/// <summary>
/// PageExtension ItemPictureExtSC (ID 50025) extends Record Item Picture.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50025 "ItemPictureExtSC" extends "Item Picture"
{
    //https://yzhums.com/17574/
    actions
    {
        addafter(ImportPicture)
        {
            action(ImportPictureFromURL)
            {
                ApplicationArea = all;
                Caption = 'Import from URL';
                Image = Import;
                ToolTip = 'Import a picture file from URL.';

                trigger OnAction()
                var
                    PictureURLDialog: Page "Picture URL Dialog";
                begin
                    PictureURLDialog.SetItemInfo(Rec."No.", Rec.Description);
                    if PictureURLDialog.RunModal() = Action::OK then
                        PictureURLDialog.GetItemImages();
                end;
            }
        }
    }
}
 

/// <summary>
/// PageExtension ItemReclassJournalExtSC (ID 50023) extends Record Item Reclass. Journal.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50023 "ItemReclassJournalExtSC" extends "Item Reclass. Journal"
{

    layout
    {
        addafter("Location Code") { field("Bin Code1"; Rec."Bin Code") { ApplicationArea = All; ToolTip = 'Specifies a bin code for the item.'; } }
        addafter("New Location Code") { field("New Bin Code1"; Rec."New Bin Code") { ApplicationArea = All; ToolTip = 'Specifies the new bin code to link to the items on this journal line.'; } }
    }
}
 

/// <summary>
/// PageExtension ItemCrossReferenceEntriesExtSC (ID 50003) extends Record Item Reference Entries.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>



pageextension 50003 "ItemReferenceEntries" extends "Item Reference Entries"
{
    layout
    {
        addfirst(Control1) { field("Item No."; Rec."Item No.") { ApplicationArea = All; ToolTip = 'Specifies the number on the item card from which you opened the Item Reference Entries window.'; } }
    }
}
 

/// <summary>
/// PageExtension ITIIICDocumentLogEntriesExtSC (ID 50014) extends Record ITI IIC Document Log Entries.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50014 "ITIIICDocumentLogEntriesExtSC" extends "ITI IIC Document Log Entries"
{
    layout
    {
        addafter("IIC Endpoint No.")
        {
            field("IIC Send To Endpoint No.38060"; Rec."IIC Send To Endpoint No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the IIC Send To Endpoint No. field.';
            }
            field("Document ID18268"; Rec."Document ID")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Document ID field.';
            }
        }
    }
}
 
pageextension 50092 "JobQueueEntry" extends "Job Queue Entries"
{
    /// <summary>
    /// 2023.10 - Jesper Harder - Initial version - Adds functionality to reset failed jobs to "Ready" status.
    /// 2023.10            Jesper Harder        054         JobQueue Set failed to ready
    /// 
    /// PageExtension JobQueueEntry (ID 50092) extends Record "Job Queue Entries".
    /// This page extension adds custom actions and views to manage job queue entries, 
    /// with a focus on handling jobs that have failed and setting them back to a "Ready" state.
    /// Additionally, custom filters are added to create specific views that categorize jobs 
    /// based on their status, scheduling, and other attributes.
    /// </summary>

    actions
    {
        addfirst(processing)
        {
            group(scanpan)
            {
                Caption = 'Scanpan'; // A custom action group named 'Scanpan' added to the "Processing" section
                action(FailedJob)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Set Failed to Ready'; // Action caption shown to the user
                    Image = ChangeStatus; // Icon representing the action
                    Promoted = true;
                    PromotedCategory = Process; // Sets the action to be promoted in the Process group
                    ToolTip = 'Executes the Set Failed to Ready action.'; // Tooltip for the action
                    trigger OnAction()
                    var
                    begin
                        // Calls the procedure that resets failed jobs to 'Ready' status
                        SetFailedToReady();
                    end;
                }

                // This action is commented out for future use
                /*
                action(RestartJob)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Restart all InterCompany'; // Caption for restarting all InterCompany jobs
                    ToolTip = 'Restarts all Inter Company.'; // Tooltip explaining the action
                    Image = ChangeStatus;
                    Promoted = true;
                    PromotedCategory = Process;
                    trigger OnAction()
                    var
                    begin
                        RestartIIC(); // Calls the RestartIIC procedure (currently commented out)
                    end;
                }
                */
            }
        }
    }

    views
    {
        addfirst
        {
            // Adds multiple views to the page, each with its own filter criteria
            view(LTSView)
            {
                Caption = 'LTS'; // A view to filter jobs with a specific Object ID to Run
                //--OrderBy = Descending("No."); // Order by job number (commented out)
                Filters = where("Object ID to Run" = filter('50005'));
            }
            view(IICView)
            {
                Caption = 'IIC'; // Filters jobs with captions containing 'IIC'
                //--OrderBy = Descending("No.");
                Filters = where("Object Caption to Run" = filter('*IIC*'));
            }
            view(IICNotScheduledView)
            {
                Caption = 'IIC not Scheduled'; // Filters unscheduled jobs related to IIC
                //--OrderBy = Descending("No.");
                Filters = where("Object Caption to Run" = filter('*IIC*'),
                                Scheduled = filter(false)
                );
            }
            view(NotScheduledView)
            {
                Caption = 'Not Scheduled'; // Shows jobs that are not scheduled
                //--OrderBy = Descending("No.");
                Filters = where(Scheduled = filter(false));
            }
            view(NotScheduledButRecurringJobView)
            {
                Caption = 'Not Scheduled but Recurring Job'; // Filters jobs that are recurring but not scheduled
                //--OrderBy = Descending("No.");
                Filters = where(Scheduled = filter(false),
                                "Recurring Job" = filter(true));
            }
            view(ErrorAndRunningStatusView)
            {
                Caption = 'Error and Running Job'; // Filters jobs that are either in 'Error' or 'In Process' status
                //--OrderBy = Descending("No.");
                Filters = where(Status = filter('Error|In Process'));
            }
        }
    }

    // Local procedure to set failed jobs to 'Ready' status
    local procedure SetFailedToReady()
    var
        JobQueueEntry: Record "Job Queue Entry"; // Record variable for accessing Job Queue Entries
        JobQueueManagement: Codeunit "Job Queue Management"; // Codeunit variable to manage job queue entries
    begin
#pragma warning disable AA0210
        // Filtering jobs that are either in 'Error' or 'Ready' status, unscheduled, and recurring
        JobQueueEntry.SetFilter(Status, '%1|%2', JobQueueEntry.Status::Error, JobQueueEntry.Status::Ready);
        JobQueueEntry.SetRange(Scheduled, false);
        JobQueueEntry.SetRange("Recurring Job", true);
#pragma warning restore AA0210
        if JobQueueEntry.FindSet() then begin
            // Temporarily sets all found jobs to 'On Hold' and then back to 'Ready'
            JobQueueEntry.ModifyAll(Status, JobQueueEntry.Status::"On Hold");
            JobQueueEntry.ModifyAll(Status, JobQueueEntry.Status::Ready);
            repeat
                // Runs each job once using the JobQueueManagement Codeunit
                JobQueueManagement.RunJobQueueEntryOnce(Rec);
            until JobQueueEntry.Next() = 0;
        end;
    end;

    // This procedure is currently commented out, but would be used to restart jobs related to IIC
    /*
    local procedure RestartIIC()
    var
        JobQueueEntry: Record "Job Queue Entry"; // Record variable for job queue entries
    begin
        JobQueueEntry.SetFilter(Status, '%1', JobQueueEntry.Status::Ready); // Filters jobs that are 'Ready'
        JobQueueEntry.SetFilter("Object Caption to Run", '*IIC*'); // Filters jobs with captions containing 'IIC'
        if JobQueueEntry.FindSet() then
            repeat
                JobQueueEntry.Restart(); // Restarts the job
            until JobQueueEntry.Next() = 0;
    end;
    */

    /*
    // Additional comments for filtering logic:
    // Filters jobs with the following criteria:
    // Scheduled = No
    // Status = Error|Ready
    // Recurring Job = Yes
    */
}
 





pageextension 50106 MachineCenterTaskList extends "Machine Center Task List"
{
    layout
    {
        addafter("Run Time")
        {
            field("Input Quantity59520"; Rec."Input Quantity")
            {
                ApplicationArea = All;
            }
            field("Run Time Unit of Meas. Code39137"; Rec."Run Time Unit of Meas. Code")
            {
                ApplicationArea = All;
            }
            field("Expected Capacity Need05265"; Rec."Expected Capacity Need")
            {
                ApplicationArea = All;
            }
        }
    }
}
 




/// <summary>
/// 2024.06.13JH        Fix from ExtionsionIT, better handling for Shipmondo PackageType on Tasklet
/// </summary>
//Mobil-pakkeopsætning
pageextension 50116 MOBMobileWMSPackageSetup extends "MOB Mobile WMS Package Setup"
{
    layout
    {
        addafter("Shipping Agent")
        {
            //Shipping Agent Service Code (5, Code, PK)
            field("Shipping Agent Service Code"; Rec."Shipping Agent Service Code")
            {
                ApplicationArea = All;
                ToolTip = 'Shipping Agent Service Code';
            }
        }
    }
}
 


/// <summary>
/// pageextension 50008 "MOSLicensePlateContentExtSC" extends "MOS License Plate Content"
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

/*
pageextension 50008 "MOSLicensePlateContentExtSC" extends "MOS License Plate Content"
{
    layout
    {
        addafter(LotNumber)
        {
            field("Source No.67182"; Rec."Source No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the "Source No." field';
            }
            field("Source Line No.96123"; Rec."Source Line No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the "Source Line No." field';
            }
        }
    }
}
*/

 



/// <summary>
/// PageExtension "NOTOTransferOrderLinesExtSC" (ID 50050) extends Record NOTO Transfer Order Lines.
/// </summary>
pageextension 50050 NOTOTransferOrderLinesExtSC extends "NOTO Transfer Order Lines"
{
    layout
    {
        addlast(General)
        {
            field(DynYearWeek; DynYearWeek)
            {
                ApplicationArea = basic;
                ToolTip = 'Specifies the value of the DynYearWeek field.';
            }
        }
    }
    var
        DynYearWeek: Text[8];

    trigger OnAfterGetRecord()
    var
        Padding: Text[10];
    begin
        DynYearWeek := '';
        if Rec."Shipment Date" <> 0D then begin
            Padding := Format(Date2DWY(Rec."Shipment Date", 3));
            DynYearWeek := Padding;
            Padding := Format(Date2DWY(Rec."Shipment Date", 2));
            Padding := PadStr('', 2 - StrLen(Padding), '0') + Padding;
            DynYearWeek += '-' + Padding;
        end;
    end;
}

 


/// <summary>
/// PageExtension "OutputJournalExtSC" (ID 50042) extends Record Output Journal.
/// </summary>
/// 
/// <remarks>
/// 
///  2023.03.08             Jesper Harder               0193        From user design
/// 
/// </remarks>      
pageextension 50042 OutputJournalExtSC extends "Output Journal"
{
    layout
    {
        moveafter(ShortcutDimCode3; "Stop Time")
        moveafter("Cap. Unit of Measure Code"; "Output Quantity")

        moveafter("Shortcut Dimension 1 Code"; "Applies-to Entry")
        moveafter(Description; "Shortcut Dimension 2 Code")
        moveafter("Unit of Measure Code"; "Stop Code")
        moveafter("Stop Code"; "Stop Time")

    }
}
 





/// <summary>
/// PageExtension PhysInventoryJournalSC (ID 50059) extends Record Phys. Inventory Journal.
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.27          Jesper Harder       017         Inventory Journal StockStatus Add Code
/// 2024.01             Jesper Harder       062         Search and replace Inventory Journal
/// </remarks>

pageextension 50059 "PhysInventoryJournal" extends "Phys. Inventory Journal"
{

    actions
    {
        addlast(processing)
        {
            action(InventoryJournalSC)
            {
                Caption = 'Inventory Status';
                ToolTip = 'Invoentory Journal for Shelf status.';
                ApplicationArea = Basic, Suite;
                Image = InventoryJournal;
                RunObject = Page InventoryJournalStatusSC;
            }
            action(ChangeDocumentNo)
            {
                Caption = 'Change Document No.';
                ToolTip = 'Changes Document No.';
                ApplicationArea = Basic, Suite;
                Image = Change;
                trigger OnAction()
                var
                    PhysInventoryJournalReplace: Page PhysInventoryJournalReplace;
                begin
                    PhysInventoryJournalReplace.SetTableView(Rec);
                    PhysInventoryJournalReplace.RunModal();
                    CurrPage.Update(false);
                end;
            }

            action(ScanpanCalculateInventory)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Calculate Inventory';
                Ellipsis = true;
                Image = CalculateInventory;
                Promoted = true;
                PromotedCategory = Category5;
                ToolTip = 'Start the process of counting inventory by filling the journal with known quantities.';

                trigger OnAction()
                begin
                    CalculateInventory.SetItemJnlLine(Rec);
                    CalculateInventory.RunModal;
                    Clear(CalculateInventory);
                end;
            }

        }
    }
    var
        CalculateInventory: Report "CalculateInventory";

    local procedure ChangeDocumentNo()
    var
    begin

    end;
} 


/// <summary>
/// PageExtension PlanningWorksheetExtSC (ID 50036) extends Record Planning Worksheet.
/// </summary>
pageextension 50036 "PlanningWorksheet" extends "Planning Worksheet"
{
    layout
    {
        addafter(Description)
        {
            field("Location Code04449"; Rec."Location Code")
            {
                ApplicationArea = All;
                Width = 6;
                ToolTip = 'Specifies a code for an inventory location where the items that are being ordered will be registered.';
            }
        }
    }
    actions
    {
        addbefore("&Line")
        {
            group(scanpan)
            {
                Caption = 'SCANPAN';
                ToolTip = 'Scanpan tools.';

                action(ToggleActionMessage)
                {
                    ApplicationArea = Planning;
                    Caption = 'Toggle Action Messages';
                    Image = EditLines;
                    Promoted = true;
                    PromotedCategory = Category6;
                    PromotedIsBig = false;
                    ToolTip = 'Toggle Action Messages.';

                    trigger OnAction()
                    var
                    begin
                        ScanpanMiscellaneous.ToggleActionMessage(Rec, false);
                    end;

                }
                group("&Item Availability")
                {
                    Caption = '&Item Availability';

                    action("ItemEvent")
                    {
                        ApplicationArea = Planning;
                        Caption = 'Event (Shift+Ctrl+h)';
                        Image = "Event";
                        Promoted = true;
                        PromotedCategory = Category7;
                        ToolTip = 'View how the actual and the projected available balance of an item will develop over time according to supply and demand events.';
                        ShortcutKey = 'Shift+Ctrl+h';
                        trigger OnAction()
                        begin
                            ItemAvailabilityFormsMgt.ShowItemAvailFromReqLine(Rec, ItemAvailabilityFormsMgt.ByEvent())
                        end;
                    }
                }
            }
        }
    }

    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        ItemAvailabilityFormsMgt: Codeunit "Item Availability Forms Mgt";

}
 




/// <summary>
/// PageExtension Posted Invt. Shipments (ID 50057) extends Record Posted Invt. Shipments.
/// </summary>
pageextension 50057 "Posted Invt. Shipments" extends "Posted Invt. Shipments"
{
    Caption = 'Posted Invt. Shipments NotInUse';
} 


/// <summary>
/// PageExtension PostedPurchaseInvoicesExtSC (ID 50052) extends Record Posted Purchase Invoices.
/// </summary>
pageextension 50052 "PostedPurchaseInvoices" extends "Posted Purchase Invoices"
{
    layout
    {
        addafter("Vendor Invoice No.")
        {
            field("Vendor Invoice No.32929"; Rec."Vendor Invoice No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the vendor''s own invoice number.';
            }
            field("Applies-to Doc. No.25479"; Rec."Applies-to Doc. No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Applies-to Doc. No. field.';
            }
        }
        addafter(Closed)
        {
            field("Drop Shipment"; Rec."Drop Shipment")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Indicates if lines has Drop Shipment.';
                Visible = true;
            }

        }
    }
}
 
/// <summary>
/// PageExtension "PostedSalesInvoiceExtSC" (ID 50056) extends Record Posted Sales Invoice.
/// </summary>
///
/// <remarks>
///
/// 2023.08             Jesper Harder               044     LTS Export Invoice Warehouse
///
/// </remarks>
pageextension 50056 PostedSalesInvoice extends "Posted Sales Invoice"
{
    layout
    {
        addlast(content)
        {
            group(scanpan)
            {
                Caption = 'WEB Orders (SCANPAN)';

                field("Sell-to E-Mail"; Rec."Sell-to E-Mail")
                {
                    ApplicationArea = Basic, Suite;
                    Importance = Additional;
                    ToolTip = 'Specifies the value of the Email field.';
                    Visible = true;
                }
                field("Sell-to Phone No."; Rec."Sell-to Phone No.")
                {
                    ApplicationArea = Basic, Suite;
                    Importance = Additional;
                    ToolTip = 'Specifies the value of the Sell-to Phone No. field.';
                    Visible = true;
                }
            }
        }

        addlast(scanpan)
        {
            field(PaymentID1; Rec.PaymentID)
            {
                ApplicationArea = Basic, Suite;
                Importance = Standard;
                ToolTip = 'Specifies the value of the Payment ID field.';
                Visible = true;
            }
            field("External Document No.1"; Rec."External Document No.")
            {
                ApplicationArea = Basic, Suite;
                Importance = Additional;
                ToolTip = 'Specifies the external document number that is entered on the sales header that this line was posted from.';
                Visible = true;
            }
        }
    }
    actions
    {
        addlast(processing)
        {
            //044     LTS Export Invoice Warehouse
            action(LTSsendNedInvoices)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Send all new Invoices to LTS';
                Image = "Invoicing-Send";
                ToolTip = 'Send all new Invoices to LTS';
                trigger OnAction()
                var
                    SalesInvoiceHeader: Record "Sales Invoice Header";
                    LTSOutboundExport: Report "NOTO LTS Outbound Export";
                    Text000Lbl: Label 'All new Invoices processed and sent to LTS\Check LTS system for status.';
                begin
                    SalesInvoiceHeader.Reset();
                    SalesInvoiceHeader.SetFilter("Toll System Sent NOTO", '%1', false);
                    SalesInvoiceHeader.FindSet();
                    //LTSOutboundExport.SetSkipTollSystemSentCheck();
                    LTSOutboundExport.SetTableView(SalesInvoiceHeader);
                    LTSOutboundExport.Run();
                    CurrPage.Update();
                    Message(Text000Lbl);
                end;
            }
        }
    }
}
 



/// <summary>
/// PageExtension "PostedSalesInvociesExtSC" (ID 50054) extends Record Posted Sales Invoices.
/// </summary>
///
/// <remarks>
/// 
/// 2023.03.22                     Jesper Harder                       011     Posted Sales Invoices Extends Add fields for better search
/// 
/// </remarks>      
pageextension 50054 PostedSalesInvoices extends "Posted Sales Invoices"
{

    layout
    {
        addlast(Control1)
        {
            //011
            field("Order No.1"; Rec."Order No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the number of the sales order that this invoice was posted from.';
                Visible = true;
            }
            field("External Document No.1"; Rec."External Document No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the external document number that is entered on the sales header that this line was posted from.';
                Visible = true;
            }
            field("Drop Shipment"; Rec."Drop Shipment")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Indicates if lines has Drop Shipment.';
                Visible = true;
            }
        }
    }
    views
    {
        addlast
        {
            view("TollSystemShip")
            {
                Caption = 'Ship to Toll System';
                Filters = where("Toll System Sent NOTO" = const(false));
                OrderBy = descending("No.");
                SharedLayout = true;
            }

        }
    }
}

 
/// <summary>
/// PageExtension PostedSalesInvoiceSubform (ID 50070) extends Record Posted Sales Invoice Subform.
/// </summary>
/// <remarks>
/// 2023.05.12                                  Jesper Harder                          031     Added CountryRegion FlowField to Posted Invoices
/// 2024.02                                     Jesper Harder                                  Added Net+Gross weight fields
/// </remarks>
pageextension 50070 "PostedSalesInvoiceSubform" extends "Posted Sales Invoice Subform"
{

    layout
    {
        addafter("Line Amount")
        {
            field("Country/Region Code"; Rec."Country/Region of Origin Code")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Country/Region of Origin Code field.';
                Visible = true;
            }
        }
        addlast(Control1)
        {
            field("Net Weight"; Rec."Net Weight")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Net Weight field.';
                Visible = true;
            }
            field("Gross Weight"; Rec."Gross Weight")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Gross Weight field.';
                Visible = true;
            }

        }
    }

}
 

/// <summary>
/// PageExtension PostedSalesShipmentextSC (ID 50015) extends Record Posted Sales Shipment.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12                     Jesper Harder                   0193        Added modifications
/// 2023.05.01                  Jesper Harder                   027         Add Shipment tracking 
/// 
/// </remarks>

/*
pageextension 50015 "PostedSalesShipment" extends "Posted Sales Shipment"
{
    layout
    {
        //SHIPITREMOVE
        addafter("IDYS Account No.")
        {
            field("IDYS Tracking No.77258"; Rec."IDYS Tracking No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the ShipIT Tracking No. field.';
            }
            field("IDYS Tracking URL95913"; Rec."IDYS Tracking URL")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the ShipIT Tracking URL field.';
            }
        }
    }
    //SHIPITREMOVE
    actions
    {
        addfirst("&Shipment")
        {
            action(LookupTransportOrderLines)
            {
                Image = RefreshLines;
                Promoted = true;
                PromotedCategory = Category5;

                Caption = 'Lookup Transport Order';
                RunObject = page "IDYS Transport Order Lines";
                RunPageLink = "Source Document No." = field("Order No.");
                ToolTip = 'Executes the Lookup Transport Order action.';
            }
        }
    }

}
*/ 



/// <summary>
/// PageExtension ""PostedSalesShipments"ExtSC" (ID 50047) extends Record Posted Sales Shipments.
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.08          Jesper Harder       0193        Added description field
/// 2023.05.01          Jesper Harder       027         Add Shipment tracking 
/// 2024.07             Jesper Harder       072         Pallet Manifest v2 fetch from new tasklet tables and use PostedSalesShipment as base table
/// 
/// </remarks>
/// 


pageextension 50047 PostedSalesShipments extends "Posted Sales Shipments"
{

    layout
    {
        addlast(Control1)
        {
            //072
            field(PostedWhseShipmentNo; PostedWhseShipmentNo)
            {
                ToolTip = 'Specifies the value of the Posted Whse. Shipment No.';
                ApplicationArea = Basic, Suite;
            }

            /* ShipIT remove
            field("Transport Order No."; Rec."Transport Order No.")
            {
                ToolTip = 'Specifies the value of the Transport Order No. field.';
                ApplicationArea = Basic, Suite;
            }
            */
        }
        addafter("No.")
        {
            field("Order No."; Rec."Order No.")
            {
                ToolTip = 'Sales Order No.';
                ApplicationArea = Basic, Suite;
                Visible = true;
                Importance = Additional;
            }
        }
        addafter("No. Printed")
        {
            field("External Document No.1"; Rec."External Document No.")
            {
                ToolTip = 'External Document No. from Sales Order.';
                ApplicationArea = All;
                Visible = true;
            }
            field("Posting Date1"; Rec."Posting Date")
            {
                ToolTip = 'Posting Date.';
                ApplicationArea = All;
                Visible = true;
            }
        }
        addafter("External Document No.1")
        {
            field("Requested Delivery Date1"; Rec."Requested Delivery Date")
            {
                ApplicationArea = All;
            }
        }

    }
    //SHIPITREMOVE
    /*
    actions
    {
        addfirst("&Shipment")
        {
            action(LookupTransportOrderLines)
            {
                Image = Find;
                Caption = 'Lookup Transport Order';
                ToolTip = 'Displays all Transport Orders from this Sales Order.';
                Promoted = true;
                PromotedCategory = Category5;
                RunObject = page "IDYS Transport Order Lines";
                RunPageLink = "Source Document No." = field("Order No.");

            }
        }
    }
    */
}
 






/// <summary>
/// PageExtension PostedSalesShptSubform (ID 50075) extends Record Posted Sales Shpt. Subform.
/// </summary>
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// </remarks>
pageextension 50075 "PostedSalesShptSubform" extends "Posted Sales Shpt. Subform"
{
    layout
    {
        addbefore("No.")
        {
            field("Transport Order Id"; Rec."Transport Order No2")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Transport Order No.';
                ToolTip = 'Scanpan Transport Order No.';
                Visible = true;
            }
        }
    }
}
 





/// <summary>
/// PageExtension PostedWhseShipment (ID 50072) extends Record Posted Whse. Shipment.
/// </summary>
/// <remarks>
/// 
/// 2023.7.19                   Jesper Harder           035 Post TransportOrderID posted to Posted Whse. ShipmentLines through 14.7.2023 Added Code
/// 
/// </remarks>      

pageextension 50072 "PostedWhseShipment" extends "Posted Whse. Shipment"
{

    layout
    {
        addafter("Whse. Shipment No.")
        {
            field("Transport Order No."; Rec."Transport Order No.")
            {
                ToolTip = 'Specifies the value of the Transport Order No. field.';
                ApplicationArea = Warehouse;
                Editable = false;
                Visible = true;
            }
        }
    }
} 




/// <summary>
/// PageExtension PostedWhseShipmentList (ID 50079) extends Record Posted Whse. Shipment List.
/// </summary>
/// <remarks>
/// 
/// 2023.7.19                   Jesper Harder           035 Post TransportOrderID posted to Posted Whse. ShipmentLines through 14.7.2023 Added Code
/// 
/// </remarks>      
pageextension 50079 "PostedWhseShipmentList" extends "Posted Whse. Shipment List"
{

    layout
    {
        addafter("Whse. Shipment No.")
        {
            field("Transport Order No."; Rec."Transport Order No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Transport Order No. field.';
            }
        }
        addafter("Whse. Shipment No.")
        {
            field("Assignment Date1"; Rec."Assignment Date")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Specifies the value of the Assignment Date field.';
            }
        }

    }
} 






/// <summary>
/// PageExtension PostedWhseShipmentSubform (ID 50074) extends Record Posted Whse. Shipment Subform.
/// </summary>
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// </remarks>
pageextension 50074 "PostedWhseShipmentSubform" extends "Posted Whse. Shipment Subform"
{

    layout
    {
        modify("Source No.") { visible = true; }

        addafter("Source No.")
        {
            field("Transport Order No."; Rec."Transport Order No.")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Scanpan added Transport Order No.';
                Visible = true;
            }
        }
    }

} 




/// <summary>
/// PageExtension PriceListLineReview (ID 50061) extends Record Price List Line Review.
/// </summary>
/// 
/// <remarks>
/// 
/// Version List
/// 
/// 2022.04             Jesper Harder                   Added PageExt added "Unit List Price"
/// 
/// </remarks>
pageextension 50061 "PriceListLineReview" extends "Price List Line Review"
{
    layout
    {
        addafter("Line Discount %") { field("Unit List Price1"; Rec."Unit List Price") { ApplicationArea = All; ToolTip = 'Specifies the value of the Unit List Price field.'; } }
    }
} 


/// <summary>
/// pageextension 50007 "PriceListLinesExtSC" extends "Price List Lines"
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50007 "PriceListLinesExtSC" extends "Price List Lines"
{
    layout
    {
        addafter("Allow Line Disc.")
        {
            field("Source No.34177"; Rec."Source No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the unique identifier of the source of the price on the price list line.';
            }
            field("Parent Source No.97763"; Rec."Parent Source No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the job to which the prices are assigned. If you choose an entity, the price list will be used only for that entity.';
            }
        }
        addafter("Work Type Code") { field("Source Type50933"; Rec."Source Type") { ApplicationArea = All; ToolTip = 'Specifies the type of the entity that offers the price or the line discount on the product.'; } }
        addafter("Unit Price") { field("Direct Unit Cost1"; Rec."Direct Unit Cost") { ApplicationArea = All; ToolTip = 'Specifies the cost of one unit of the selected product.'; } }
    }
}


 
pageextension 50080 ProdBOMWhereUsed extends "Prod. BOM Where-Used"
{
    /// <summary>
    /// PageExtension ProdBOMWhereUsed (ID 50080) extends Record Prod. BOM Where-Used.
    /// Adds functionality to delete selected BOM items from the page and adjust BOM lines.
    /// </summary>
    ///
    /// <remarks>
    /// 2023.08             Jesper Harder       043         Batch Delete BOM item.
    /// 2024.10             Jesper Harder       087         Adjust Multiple BoM lines
    /// </remarks>

    layout
    {
        // No additional layout changes are required in this extension
    }

    actions
    {
        addfirst(Processing) // Add the action under the 'Processing' group
        {
            action(DeletePage)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Delete Item from Selected'; // Caption for the action button
                Image = DeleteExpiredComponents; // Icon associated with the action
                ToolTip = 'Delete BOM Item from Selected.'; // Tooltip to describe the action

                trigger OnAction()
                begin
                    DeleteSelectedFromBom(); // Call procedure to delete selected BOM items
                end;
            }

            // 087 Action to adjust multiple BOM lines
            action(AdjustBoMLines)
            {
                Caption = 'Adjust BoM Lines';
                ToolTip = 'Adjust the selected Bill of Material lines with new values.';
                ApplicationArea = All;
                Image = Action;

                trigger OnAction()
                var
                    UserInputPage: Page AdjustBoMlines;
                    BoMQuantityPer: Decimal;
                    Text000Lbl: Label 'Input Canceled'; // Label for status messages
                begin
                    // Run the page modally
                    if UserInputPage.RunModal() = Action::OK then begin
                        BoMQuantityPer := UserInputPage.ReturnQuantityPerFactor();
                        AdjustQuantityPerFromBom(BoMQuantityPer);
                    end else
                        Message(Text000Lbl);
                end;
            }
        }
    }

    // Declare a temporary record for storing "Where-Used Line" entries
    var
        TempWhereUsedLine: Record "Where-Used Line" temporary;

    // Trigger executed after each record is retrieved
    trigger OnAfterGetRecord()
    begin
        CopyRecToTempRec(); // Copy the current record to a temporary record
    end;

    // Local procedure to copy the current record to the temporary record
    local procedure CopyRecToTempRec()
    begin
        if not TempWhereUsedLine.Get(Rec."Entry No.") then begin
            TempWhereUsedLine.Init(); // Initialize the temporary record
            TempWhereUsedLine.TransferFields(Rec); // Copy fields from the current record to the temporary record
            TempWhereUsedLine."Production BOM No." := CopyStr(SetCaption(), 1, StrPos(SetCaption(), ' ')); // Extract BOM number
            TempWhereUsedLine.Insert(); // Insert the temporary record
        end;
    end;

    // 087 Local procedure to adjust selected BOM lines
    local procedure AdjustQuantityPerFromBom(ToFactorQuantityPer: Decimal)
    var
        Item: Record Item;
        ProductionBOMHeader: Record "Production BOM Header";
        ProductionBOMLine: Record "Production BOM Line";
        Text000Lbl: Label 'BOM Item:'; // Label for status messages
        Text001Lbl: Label 'is adjusted from the following Production BOM:';
        Text002Lbl: Label 'Warning - You are about to adjust BOM Lines. Are you sure?';
        Text003Lbl: Label 'Please recalculate cost on the above Items.';
        StatusText: Text; // Used to build the status message
        OriginalStatus: Enum "BOM Status"; // Variable to store the original status
        FromQuantityPer: Decimal;
        NewQuantityPer: Decimal;
    begin
        if Dialog.Confirm(Text002Lbl, false) then begin
            // Set the filter to the currently selected lines in the page
            CurrPage.SetSelectionFilter(TempWhereUsedLine);
            if TempWhereUsedLine.FindSet() then begin
                // Initial Status Message
                Item.Get(TempWhereUsedLine."Production BOM No."); // Get the related Item
                StatusText := Text000Lbl + ' "' + Item."No." + ' ' + Item.Description + '", ' + Text001Lbl; // Build initial status message

                // Loop through the selected records
                repeat
                    if ProductionBOMHeader.Get(TempWhereUsedLine."Item No.") then
                        if ProductionBOMHeader.Status = ProductionBOMHeader.Status::Certified then begin
                            // Save current status
                            OriginalStatus := ProductionBOMHeader.Status;

                            // Set BOM status to "Under Development" to allow modification
                            ProductionBOMHeader.Status := ProductionBOMHeader.Status::"Under Development";
                            ProductionBOMHeader.Modify(true); // Modify the header and save changes

                            // Filter the Production BOM Lines by BOM No. and Item No.
                            ProductionBOMLine.SetRange("Production BOM No.", ProductionBOMHeader."No.");
                            ProductionBOMLine.SetRange("No.", Item."No.");
                            if ProductionBOMLine.FindSet() then
                                repeat

                                    FromQuantityPer := ProductionBOMLine."Quantity per";
                                    if ToFactorQuantityPer < 0 then
                                        // Ved negativ faktor, subtraher en procentdel af den oprindelige værdi
                                        NewQuantityPer := FromQuantityPer / Abs(ToFactorQuantityPer)
                                    else
                                        // Ved positiv faktor, gang mængden med faktoren
                                        NewQuantityPer := FromQuantityPer * ToFactorQuantityPer;

                                    // Round value to 4 digits
                                    NewQuantityPer := Round(NewQuantityPer, 0.0001, '>');
                                    // Valider og sæt den nye værdi
                                    ProductionBOMLine.Validate("Quantity per", NewQuantityPer);

                                    StatusText += '\' + ProductionBOMHeader."No." +
                                                    ' From Quantity Per value ' + Format(FromQuantityPer, 0, '<Precision,2:4><Standard Format,0>') +
                                                    ' Factor ' + Format(ToFactorQuantityPer, 0, '<Precision,2:4><Standard Format,0>') +
                                                    ' To ' + Format(NewQuantityPer, 0, '<Precision,2:4><Standard Format,0>');

                                    ProductionBOMLine.Modify(true);

                                until ProductionBOMLine.Next() = 0;

                            // Reset the BOM Status
                            ProductionBOMHeader.Status := OriginalStatus;
                            ProductionBOMHeader.Modify(true);
                        end;
                until TempWhereUsedLine.Next() = 0; // Repeat for all selected records

                // Add a final message to recalculate costs
                StatusText += '\\' + Text003Lbl;
                Message(StatusText); // Display the final status message
            end;
        end;
    end;

    // Local procedure to delete selected BOM lines
    local procedure DeleteSelectedFromBom()
    var
        Item: Record Item;
        ProductionBOMHeader: Record "Production BOM Header";
        ProductionBOMLine: Record "Production BOM Line";
        Text000Lbl: Label 'BOM Item:'; // Label for status messages
        Text001Lbl: Label 'is removed from the following Production BOM:';
        Text002Lbl: Label 'Warning - You are about to delete BOM Lines. Are you sure?';
        Text003Lbl: Label 'Please recalculate cost on the above Items.';
        StatusText: Text; // Used to build the status message
    begin
        if Dialog.Confirm(Text002Lbl, false) then begin
            // Set the filter to the currently selected lines in the page
            CurrPage.SetSelectionFilter(TempWhereUsedLine);
            if TempWhereUsedLine.FindSet() then begin
                // Loop through the selected records
                repeat
                    Item.Get(TempWhereUsedLine."Production BOM No."); // Get the related Item
                    StatusText := Text000Lbl + ' "' + Item."No." + ' ' + Item.Description + '", ' + Text001Lbl; // Build initial status message

                    // Fetch and update the Production BOM Header
                    if ProductionBOMHeader.Get(TempWhereUsedLine."Item No.") then begin
                        ProductionBOMHeader.Status := ProductionBOMHeader.Status::"Under Development"; // Set status to "Under Development"
                        ProductionBOMHeader.Modify(true); // Modify the header and save changes

                        // Filter the Production BOM Lines by BOM No. and Item No.
                        ProductionBOMLine.SetRange("Production BOM No.", ProductionBOMHeader."No.");
                        ProductionBOMLine.SetRange("No.", Item."No.");
                        ProductionBOMLine.DeleteAll(true); // Delete all matching BOM lines

                        // Append the status text with details of the deleted lines
                        StatusText += '\' + ProductionBOMHeader."No." + '-' + ProductionBOMHeader.Description;

                        // Reset the BOM Status to "Certified"
                        ProductionBOMHeader.Status := ProductionBOMHeader.Status::Certified;
                        ProductionBOMHeader.Modify(true);
                    end;
                until TempWhereUsedLine.Next() = 0;

                // Add a final message to recalculate costs
                StatusText += '\\' + Text003Lbl;
                Message(StatusText); // Display the final status message
            end;
        end;
    end;
} 



pageextension 50110 ProdOrderCommentSheet extends "Prod. Order Comment Sheet"
{
    layout
    {
        addafter(Date)
        {
            field("Prod. Order No.1"; Rec."Prod. Order No.")
            {
                ApplicationArea = All;
            }
        }
    }
}
 






/// <summary>
/// PageExtension ProdOrderComponentsExt (ID 50058) extends Record Prod. Order Components.
/// </summary>
pageextension 50058 "ProdOrderComponents" extends "Prod. Order Components"
{
    layout
    {
        addafter("Remaining Quantity")
        {
            field("Routing Link Code28792"; Rec."Routing Link Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the routing link code when you calculate the production order.';
            }
        }
        addafter("Item No.")
        {
            field("Prod. Order No.1"; Rec."Prod. Order No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the number of the related production order.';
            }
        }
        addafter("Bin Code")
        {
            field("Location Code21264"; Rec."Location Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the location where the component is stored. It is copied from the corresponding field on the production order line.';
            }
        }


    }
}
 
pageextension 50114 ProdOrderLineList extends "Prod. Order Line List"
{
    layout
    {
        addafter("Due Date")
        {
            field("Inventory Posting Group1";Rec."Inventory Posting Group")
            {
                ApplicationArea = All;
            }
        }
    }
}
 



///<summary>
/// 50037 "ProdOrderRoutingExtSC" extends "Prod. Order Routing"
/// </summary>
pageextension 50037 ProdOrderRouting extends "Prod. Order Routing"
{
    layout
    {
        addafter("Run Time")
        {
            field("Expected Capacity Need1"; Rec."Expected Capacity Need")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Expected Capacity Need field.';
            }
        }
        modify("Expected Capacity Need")
        {
            Visible = true;
        }
        moveafter("Move Time"; "Expected Capacity Need")

        addafter("Run Time")
        {
            field("Setup Time Unit of Meas."; Rec."Setup Time Unit of Meas. Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the setup time unit of measure.';
            }
            field("Run Time Unit of Meas."; Rec."Run Time Unit of Meas. Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the run time unit of measure.';
            }
            field("Wait Time Unit of Meas."; Rec."Wait Time Unit of Meas. Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the wait time unit of measure.';
            }
            field("Move Time Unit of Meas."; Rec."Move Time Unit of Meas. Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the move time unit of measure.';
            }
        }
        addafter("Wait Time Unit of Meas.")
        {
            field("Maximum Process Time75344"; Rec."Maximum Process Time")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Maximum Process Time field.';
            }
            field("Concurrent Capacities06516"; Rec."Concurrent Capacities")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the con capacity of the operation.';
            }
        }
        addafter("Move Time Unit of Meas.")
        {
            field("Send-Ahead Quantity75969"; Rec."Send-Ahead Quantity")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the send-ahead quantity of the operation.';
            }
        }

    }
}
 




pageextension 50109 ProductionBOMLines extends "Production BOM Lines"
{
    layout
    {
        addafter("Routing Link Code")
        {
            field("Starting Date1"; Rec."Starting Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Starting Date field.';
            }
            field("Ending Date1"; Rec."Ending Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Ending Date field.';
            }
        }
    }
}
 

/// <summary>
/// 2024.07             Jesper Harder       073         Added Creation date and last date modified to Production BOM List and Routing List
/// </summary>
pageextension 50117 "ProductionBOMList" extends "Production BOM List"
{
    layout
    {
        addlast(Control1)
        {
            field("Creation Date"; Rec."Creation Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Creation Date field.';
            }

            field("Last Date Modified1"; Rec."Last Date Modified")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Last Date Modified field.';
            }
        }
    }
}
 



/// <summary>
/// PageExtension "ProductionJournalExtSC" (ID 50040) extends Record Production Journal.
/// </summary>
pageextension 50040 ProductionJournalExtSC extends "Production Journal"
{

    layout
    {
        addafter("Shortcut Dimension 2 Code")
        {
            field("Location Code69956"; Rec."Location Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the code for the inventory location where the item on the journal line will be registered.';
            }
            field("Bin Code09877"; Rec."Bin Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies a bin code for the item.';
            }
        }

        addlast(General)
        {
            field("Output Quantity1"; Rec."Output Quantity")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the quantity of the produced item that can be posted as output on the journal line.';
            }
        }
    }





}
 



/// <summary>
/// PageExtension PuhCrMemoSubform (ID 50071) extends Record Purch. Cr. Memo Subform.
/// </summary>
pageextension 50071 "PuhCrMemoSubform" extends "Purch. Cr. Memo Subform"
{
    layout
    {
        addafter("Item Reference No.")
        {
            field("VAT Prod. Posting Group1"; Rec."VAT Prod. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the VAT specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.';
            }
        }
        addafter("Shortcut Dimension 1 Code")
        {
            field("VAT Prod. Posting Group2"; Rec."VAT Prod. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the VAT specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.';
            }
        }
        addafter("Location Code")
        {
            field("Bin Code1"; Rec."Bin Code")
            {
                ApplicationArea = All;
            }
        }

    }
}
 
/// <summary>
/// PageExtension DSV Purchase Order (ID 50087) extends Record Purchase Order.
/// </summary>
/// ///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>

pageextension 50087 "PurchaseOrder" extends "Purchase Order"
{
    layout
    {
        addlast(content)
        {
            group(DSV)
            {
                Caption = 'DSV';

                field(TransportMode; rec.TransportMode)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the TransportMode field.';
                }
            }
        }
    }

    actions
    {
        addfirst(processing)
        {
            action("DSVCreateOrder")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'DSV Create Order (Ctrl+Shift+D)';
                Image = ExportShipment;
                ShortcutKey = 'Ctrl+Shift+D';
                ToolTip = 'Send and create the current Purchase Order in DSV API.';
                trigger OnAction()
                var
                begin
                    DSVAPI.DSVCreateOrder(0, Rec."No.", false);
                end;
            }
            action("DSVCancelOrder")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'DSV Cancel Order';
                Image = ExportShipment;
                ToolTip = 'Cancel the current Purchase Order in DSV API.';
                trigger OnAction()
                var
                begin
                    DSVAPI.DSVCreateOrder(0, Rec."No.", true);
                end;
            }

            action("DSVGetOrderStatus")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'DSV Get Status';
                Image = GetOrder;
                ToolTip = 'Get Current orderstatus from DSV.';
                trigger OnAction()
                var
                begin
                    DSVAPI.DSVGetOrder(1, Rec."No.");
                end;
            }

        }
    }
    var
        DSVAPI: Codeunit DSVAPI;
} 






/// <summary>
/// PageExtension PurchaseOrderListExtSC (ID 50048) extends Record Purchase Order List.
/// </summary>
pageextension 50048 "PurchaseOrderListExtSC" extends "Purchase Order List"
{
    layout
    {
        moveafter("Location Code"; "Shortcut Dimension 1 Code")
        moveafter("Shortcut Dimension 1 Code"; "ITI IIC Created By")
        moveafter("Amount Including VAT"; "Vendor Authorization No.")

        addafter("Job Queue Status")
        {
            field("Container ID NOTO36816"; Rec."Container ID NOTO")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Container ID field.';
            }
        }
        addafter("Buy-from Vendor No.")
        {
            field("Promised Receipt Date1"; Rec."Promised Receipt Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the date that the vendor has promised to deliver the order.';
            }
        }


    }
}
 





/// <summary>
/// PageExtension "PurchaseOrderSubformExtSC" (ID 50055) extends Record Purchase Order Subform.
/// </summary>
pageextension 50055 PurchaseOrderSubform extends "Purchase Order Subform"
{
    layout
    {
        //moveafter(ShortcutDimCode6; "Bin Code")
        moveafter("Line Amount"; "Bin Code")
        moveafter("ITI IIC Package Tracking No."; "Container ID NOTO")
        moveafter("ITI IIC Package Tracking No."; "Bill of Lading No. NOTO")
        moveafter("Expected Receipt Date"; "Reserved Quantity")
        moveafter("Line Amount"; "Indirect Cost %")
        modify("No.") { Width = 5; }
        modify("Transfer Order No. NOTO") { Width = 5; }
        modify("Direct Unit Cost") { Width = 10; }
        modify("Qty. to Invoice") { Width = 6; }
        modify("Quantity Invoiced") { Width = 7; }
        modify("Line Amount") { Width = 9; }
        modify("Shortcut Dimension 1 Code") { Width = 7; }
        modify("Bill of Lading No. NOTO") { Width = 4; }

        moveafter("ITI IIC Production Started"; "Qty. to Assign")
        moveafter("Qty. to Assign"; "Qty. Assigned")
        moveafter(ShortcutDimCode6; "Tax Area Code")
        moveafter(TRCUDF5; "Tax Group Code")
        moveafter("Expected Receipt Date"; "Container ID NOTO")
        moveafter("Qty. to Invoice"; "Transfer Order No. NOTO")

        moveafter("Qty. to Invoice"; "Unit of Measure Code")
        moveafter("Qty. to Invoice"; "Bin Code")
        modify("Qty. to Receive")
        {
            Width = 9;
        }
        modify("Quantity Received")
        {
            Width = 9;
        }
        moveafter("Qty. to Invoice"; "Qty. to Receive")
        modify(Type)
        {
            Width = 11;
        }
        modify("Location Code")
        {
            Width = 6;
        }
        modify(Quantity)
        {
            Width = 5;
        }
        modify("Unit of Measure Code")
        {
            Width = 6;
        }
        moveafter("Line Amount"; ShortcutDimCode6)
        moveafter("Qty. to Receive"; "Planned Receipt Date")
        moveafter("Planned Receipt Date"; "Expected Receipt Date")

        moveafter("Qty. to Invoice"; "Promised Receipt Date")
        moveafter(ShortcutDimCode6; "Qty. to Receive")
        moveafter("Expected Receipt Date"; "Container ID NOTO")


    }
}
 




/// <summary>
/// PageExtension "PurchasePriceListLines" (ID 50032) extends Record Purchase Price List Lines.
/// </summary>
pageextension 50032 PurchasePriceListLines extends "Purchase Price List Lines"
{

    layout
    {
        modify("Work Type Code") { Visible = false; }
        modify("Variant Code") { Visible = false; }
        modify(Description) { Visible = false; }
        modify("Allow Line Disc.") { Visible = false; }
        modify("Allow Invoice Disc.") { Visible = false; }
    }

}
 



/// <summary>
/// PageExtension "PurchasePriceListsExtSC" (ID 50031) extends Record Purchase pric.
/// </summary>
pageextension 50031 PurchasePriceListsExtSC extends "Purchase Price Lists"
{
    layout
    {
        addfirst(Control1)
        {
            field(Code1; Rec.Code)
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the unique identifier of the price list.';
            }
        }

    }

}
 



/// <summary>
/// PageExtension PurchInvoiceSubform (ID 50102) extends Record Purch. Invoice Subform.
/// </summary>
pageextension 50102 "PurchInvoiceSubform" extends "Purch. Invoice Subform"
{
    layout
    {
        addafter("Shortcut Dimension 1 Code")
        {
            field("VAT Bus. Posting Group68701"; Rec."VAT Bus. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the vendor''s VAT specification to link transactions made for this vendor with the appropriate general ledger account according to the VAT posting setup.';
            }
            field("Gen. Bus. Posting Group42916"; Rec."Gen. Bus. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the vendor''s or customer''s trade type to link transactions made for this business partner with the appropriate general ledger account according to the general posting setup.';
            }
            field("Gen. Prod. Posting Group09345"; Rec."Gen. Prod. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the item''s product type to link transactions made for this item with the appropriate general ledger account according to the general posting setup.';
            }
            field("Posting Group87451"; Rec."Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Posting Group field.';
            }
        }
        addafter("Line Discount %")
        {
            field("VAT %95732"; Rec."VAT %")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the VAT % field.';
            }
            field("VAT Prod. Posting Group43851"; Rec."VAT Prod. Posting Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the VAT specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the VAT posting setup.';
            }
            field("VAT Calculation Type30350"; Rec."VAT Calculation Type")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the VAT Calculation Type field.';
            }
            field("Amount Including VAT66699"; Rec."Amount Including VAT")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Amount Including VAT field.';
            }
        }
    }
}
 





/// <summary>
/// PageExtension ReleasedProdOrderLines (ID 50066) extends Record Released Prod. Order Lines.
/// </summary>
/// <remarks>
/// 
/// 2023.04.27          Jesper Harder       026         Add Location Code from ProdOrdHeader to Lines 27.4.2023
/// 
/// </remarks>
pageextension 50066 "ReleasedProdOrderLines" extends "Released Prod. Order Lines"
{
    layout
    {
        modify("Location Code") { Visible = true; }
        modify("Bin Code") { Visible = true; }
        movelast(Control1; "Location Code")
        movelast(Control1; "Bin Code")

        addafter("Remaining Quantity")
        {
            field("Planning Flexibility07146"; Rec."Planning Flexibility")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies whether the supply represented by this line is considered by the planning system when calculating action messages.';
            }
        }

    }

    trigger OnQueryClosePage(CloseAction: Action): Boolean
    var
    begin

        Rec.TestField("Location Code");

    end;
} 




/// <summary>
/// PageExtension ReleasedProductionOrder (ID 50065) extends Record Released Production Order.
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.04.27          Jesper Harder       026         Add Location Code from ProdOrdHeader to Lines 27.4.2023
/// 
/// </remarks>
pageextension 50065 "ReleasedProductionOrder" extends "Released Production Order"
{

    layout
    {

        addlast(General)
        {
            group(scanpan)
            {
                ShowCaption = false;
                field("Location Code1"; Rec."Location Code")
                {
                    ApplicationArea = all;
                    Visible = true;
                    ToolTip = 'Specifies the location code to which you want to post the finished product from this production order.';
                }
                field("Bin Code1"; Rec."Bin Code")
                {
                    ApplicationArea = all;
                    Visible = true;
                    ToolTip = 'Specifies a bin to which you want to post the finished items.';
                }
            }
        }

    }


    trigger OnQueryClosePage(CloseAction: Action): Boolean
    var
    //text000: Label 'Location Code is mandatory.';
    begin
        Rec.TestField("Location Code");
        //if Rec."Location Code" = '' then error('Husk lokationskode');
    end;
} 



/// <summary>
/// PageExtension ""ReleasedProductionOrders"ExtSC" (ID 50051) extends Record Released Production Orders.
/// </summary>
/// <remarks>
/// 
/// 2023.03.17                          Jesper Harder                               008     Released Production Added flowfield for Finished+Remaining Quantity
/// 2023.03.21                          Jesper Harder                               010     List Production Routing Lines 
/// 
/// 
/// </remarks>  

pageextension 50051 ReleasedProductionOrders extends "Released Production Orders"
{
    layout
    {
        addlast(Control1)
        {
            field("Location Code1"; Rec."Location Code")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the location code to which you want to post the finished product from this production order.';
            }
            field("Component Lines Count"; Rec."Component Lines Count")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Component Lines Count field.';
            }
        }

        //008
        addafter(Quantity) { field("Finished Quantity"; Rec."Finished Quantity") { ApplicationArea = all; ToolTip = 'Specifies the value of the Finished Quantity field.'; } }
        addafter("Finished Quantity") { field("Remaining Quantity"; Rec."Remaining Quantity") { ApplicationArea = all; ToolTip = 'Specifies the value of the Remaining Quantity field.'; } }
    }


    actions
    {
        addlast(processing)
        {
            group(scanpan)
            {
                Caption = 'SCANPAN';
                //010
                action(Action1)
                {
                    Caption = 'Production Controlling Routing List';
                    ToolTip = 'Controlling list containing Routing Lines with additional information.';
                    Image = ExplodeRouting;
                    RunObject = page "ProdControllingRoutingLine";
                    ApplicationArea = Basic, Suite;
                }
            }
        }
    }
}
 




/// <summary>
/// PageExtension "ReqWorksheetExtSC" (ID 50043) extends Record Req. Worksheet.
/// </summary>
/// 
/// <remarks>
/// 
///  2023.03.08             Jesper Harder               0193        Toggle Action Selection
/// 
/// </remarks>      

pageextension 50043 ReqWorksheetExtSC extends "Req. Worksheet"
{
    layout
    {
        modify("Price Calculation Method") { Visible = false; }

        moveafter("Unit of Measure Code"; "Due Date")
        moveafter("Unit of Measure Code"; "Vendor No.")
        modify("Unit of Measure Code")
        {
            Width = 2;
        }
        modify("Original Quantity")
        {
            Width = 9;
        }
        modify("Vendor No.")
        {
            Width = 4;
        }
        moveafter("Due Date"; "Replenishment System")


    }


    actions
    {
        addbefore("&Line")
        {
            group(scanpan)
            {
                Caption = 'SCANPAN';
                ToolTip = 'Scanpan tools.';

                action(ToggleActionMessage)
                {
                    ApplicationArea = Planning;
                    Caption = 'Toggle Action Messages';
                    Image = EditLines;
                    Promoted = true;
                    PromotedCategory = Category6;
                    PromotedIsBig = false;
                    ToolTip = 'Toggle Action Messages.';

                    trigger OnAction()
                    var
                    begin
                        ScanpanMiscellaneous.ToggleActionMessage(Rec, false);
                    end;
                }
            }
        }
    }

    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
}
 




/// <summary>
/// PageExtension Routing List (ID 50063) extends Record Routing List.
/// 2024.07             Jesper Harder       073         Added Creation date and last date modified to Production BOM List and Routing List
/// </summary>
pageextension 50063 "Routing List" extends "Routing List"
{
    layout
    {
        addafter(Description)
        {
            field(Status99786; Rec.Status)
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the status of this routing.';
            }
        }
        addlast(Control1)
        {
            field("Last Date Modified1"; Rec."Last Date Modified")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Last Date Modified field.';
            }
        }

    }
}
 
/// <summary>
/// PageExtension RoutingToolsExtSC (ID 50002) extends Record Routing Tools.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>
pageextension 50002 "RoutingToolsExtSC" extends "Routing Tools"
{
    layout
    {
        addfirst(Control1) { field("Operation No.63937"; Rec."Operation No.") { ApplicationArea = All; Width = 2; ToolTip = 'Specifies the value of the Operation No. field.'; } }
    }
}

 



/// <summary>
/// PageExtension SalesCrMemoSubformExt (ID 50027) extends Record Sales Cr. Memo Subform.
/// </summary>
/// 
/// <remarks>
/// Version list
/// 2022.12             Jesper Harder       0193        Collected from user designs
/// </remarks>

pageextension 50027 "SalesCrMemoSubformExt" extends "Sales Cr. Memo Subform"
{
    layout
    {
        addafter("Unit Price") { field("Return Reason Code95710"; Rec."Return Reason Code") { ApplicationArea = All; } }


        addafter("Location Code")
        {
            field("Bin Code2"; Rec."Bin Code") { ApplicationArea = All; }
        }
    }
}
 

/// <summary>
/// PageExtension SalesInvoiceSubformExtSC (ID 50017) extends Record Sales Invoice Subform.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50017 "SalesInvoiceSubformExtSC" extends "Sales Invoice Subform"
{
    layout
    {
        modify("Type") { Visible = true; QuickEntry = false; }
        modify("No.") { Visible = true; QuickEntry = true; }
        modify(Description) { Visible = true; QuickEntry = false; }
        modify(Quantity) { Visible = true; QuickEntry = true; }

        modify("Next Amount Per Unit") { Visible = true; QuickEntry = false; }
        modify("Unit Price") { Visible = true; QuickEntry = false; }
        modify("Unit Price minus discount") { Visible = true; QuickEntry = false; }
        modify("Location Code") { Visible = true; QuickEntry = false; }
        modify("Bin Code") { Visible = true; QuickEntry = false; }
        modify("Unit of Measure Code") { Visible = true; QuickEntry = false; }
        modify("Line Discount %") { QuickEntry = false; }
        modify("Line Amount") { QuickEntry = false; }

        modify("Tax Area Code") { Visible = false; }
        modify("Tax Group Code") { Visible = false; }
        modify("Qty. to Assign") { Visible = false; }
        modify("Qty. Assigned") { Visible = false; }

        modify("Shortcut Dimension 1 Code") { Visible = false; }
        modify("Shortcut Dimension 2 Code") { Visible = false; }
        modify(ShortcutDimCode3) { Visible = false; }
        modify(ShortcutDimCode4) { Visible = false; }
        modify(ShortcutDimCode5) { Visible = false; }
        modify(ShortcutDimCode6) { Visible = false; }
        modify(ShortcutDimCode7) { Visible = false; }
        modify(ShortcutDimCode8) { Visible = false; }

        modify("TRCUDF1") { Visible = false; }
        modify("TRCUDF2") { Visible = false; }
        modify("TRCUDF3") { Visible = false; }
        modify("TRCUDF4") { Visible = false; }
        modify("TRCUDF5") { Visible = false; }

        moveafter(Type; "No.")
        moveafter("No."; Description)
        moveafter(Description; Quantity)
        moveafter(Quantity; "Unit of Measure Code")
        moveafter("Unit of Measure Code"; "Unit Price")
        moveafter("Unit Price"; "Unit Price minus discount")
        moveafter("Unit Price minus discount"; "Line Amount")
        moveafter("Line Amount"; "Location Code")
        moveafter("Location Code"; "Bin Code")

        addafter(ShortcutDimCode5)
        {
            field("Gross Weight68964"; Rec."Gross Weight")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Gross Weight field.';
            }
            field("Net Weight92763"; Rec."Net Weight")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Net Weight field.';
            }
            field("Tariff No."; Rec."Tariff No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Tariff No. field.';
            }
        }

        addafter("Line Discount %")
        {
            field("Transport Order No.48137"; Rec."Transport Order No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Transport Order No. field.';
            }
        }
    }
} 



/// <summary>
/// PageExtension Sales Lines (ID 50064) extends Record Sales Lines.
/// </summary>
pageextension 50064 "Sales Lines" extends "Sales Lines"
{
    layout
    {
        addafter("No.")
        {
            field("Customer Price Group73588"; Rec."Customer Price Group")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Customer Price Group field.';
            }
        }
    }
}
 

/// <summary>
/// PageExtension SalesOrderExtSC (ID 50012) extends Record Sales Order.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2022.12             Jesper Harder       0193        Added Scanpan Group, added SystemUser created, modified
/// 2023.06             Jesper Harder       032         Warning Imerco DropShip 
/// 2024.10             Jesper Harder       083         Delete BackOrders Norway
/// 
/// </remarks>

pageextension 50012 "SalesOrder" extends "Sales Order"
{
    layout
    {
        modify("No.") { Visible = false; }
        modify("Sell-to Customer No.") { Visible = true; }
        modify("Sell-to Customer Name") { QuickEntry = false; }
        modify("Sell-to Address") { QuickEntry = false; }
        modify("Sell-to Address 2") { QuickEntry = false; }
        modify("Sell-to Contact No.") { QuickEntry = false; }
        modify("OIOUBL-Sell-to Contact Role") { QuickEntry = false; }
        modify("Sell-to Phone No.") { QuickEntry = false; }
        modify("Sell-to E-Mail") { QuickEntry = false; }
        modify("Sell-to Contact")
        {
            QuickEntry = false;
            Visible = true;
        }
        modify("Document Date") { QuickEntry = false; }
        modify("Posting Date") { QuickEntry = false; }
        modify("Due Date") { QuickEntry = false; }
        modify("Campaign No.") { QuickEntry = false; }
        modify("Opportunity No.") { QuickEntry = false; }
        modify("Responsibility Center") { QuickEntry = false; }
        modify("Assigned User ID") { QuickEntry = false; }
        modify(WorkDescription) { QuickEntry = false; }
        modify(CDCDocuments) { QuickEntry = false; }
        modify("ITI IIC Document") { QuickEntry = false; }
        modify("ITI IIC Status Code") { QuickEntry = false; }
        modify("ITI IIC Created By") { QuickEntry = false; }
        modify("ITI IIC Buffer Document Exists") { QuickEntry = false; }
        modify("Del. SO's With Rem. Qty. NOTO") { QuickEntry = false; }
        modify("Calculate Freight") { QuickEntry = false; }
        modify("Freight Calculated") { QuickEntry = false; }
        modify("Use Barcode") { QuickEntry = false; }
        modify("Old Customer No.") { QuickEntry = false; }
        modify("Priority NOTO") { QuickEntry = false; }
        modify("External Document No.") { QuickEntry = true; }
        modify("Your Reference")
        {
            Importance = Promoted;
            QuickEntry = false;
        }
        modify("PaymentID")
        {
            Importance = Promoted;
            QuickEntry = false;
        }

        //Importance = Standard
        //Importance = Promoted
        //Importance = Additional 

        modify("Promised Delivery Date") { Visible = false; }
        modify("OIOUBL-Sell-to Contact E-Mail") { QuickEntry = false; }
        modify("OIOUBL-Sell-to Contact Phone No.") { QuickEntry = false; }
        modify("OIOUBL-Sell-to Contact Fax No.") { QuickEntry = false; }

        addafter(TRCTrueCommerce)
        {
            group(ScanpanGroup)
            {
                Caption = 'Scanpan';

                field(SystemCreatedAt1; SystemCreatedAt)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the SystemCreatedAt field.';
                }
                field(SystemCreatedBy1; Createdby)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'SystemCreatedBy';
                    ToolTip = 'Specifies the value of the SystemCreatedBy field.';
                }
                field(SystemModifiedAt; SystemModifiedAt)
                {
                    ApplicationArea = Basic, Suite;
                    ToolTip = 'Specifies the value of the SystemModifiedAt field.';
                }
                field(SystemModifiedBy1; ModifiedBy)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'SystemModifiedBy';
                    ToolTip = 'Specifies the value of the SystemModifiedBy field.';
                }
            }
        }


        //FACCTBOXES
        movefirst(factboxes; Control1906127307) //Salgslinjedetaljer
        moveafter(Control1906127307; Control1903720907) //Kundesalgsoversigt
        moveafter(Control1903720907; NOTOCommentLineFactbox) //Debitorbemærkning
        moveafter(NOTOCommentLineFactbox; Control1900316107) //Debitoroplysning
        moveafter(Control1900316107; CDOActions) //Doc. Output
        moveafter(CDOActions; CDOLog) //Doc. Output Log

        modify(CDOWarehouse) { Visible = false; }

        //SHIPITREMOVE
        /*
        modify("IDYS Tpt. Ord. Details Factbox") { Visible = false; }
        modify("IDYS Packages") { Visible = false; }
        */

        modify(Control1901314507) { Visible = false; }

    }

    actions
    {
        addlast(processing)
        {
            // 083
            action(HandleSalesOrderDeletionAction)
            {
                Caption = 'Delete BackOrders (Norway)';
                ToolTip = 'Deletes Sales Orders with atleast 1 delivery and marked for Backorder deletion.';
                ApplicationArea = All;
                Image = Delete;


                trigger OnAction()
                var
                    SalesHeader: Record "Sales Header";
                    ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
                begin
                    SalesHeader.Get(Rec."Document Type", Rec."No.");
                    ScanpanMiscellaneous.HandleSalesOrderDeletion(SalesHeader);
                end;
            }
        }
    }

    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;
        CreatedBy: Text[100];
        ModifiedBy: Text[100];

    trigger OnAfterGetRecord()
    var
        User: Record User;
    begin
        //032
        ScanpanMiscellaneous.WarningCheckImercoDropShip(Rec);

        CreatedBy := '';
        ModifiedBy := '';
        if User.Get(Rec.SystemCreatedBy) then CreatedBy := User."User Name";
        if User.Get(Rec.SystemModifiedBy) then ModifiedBy := User."User Name";
    end;
}
 

/// <summary>
/// PageExtension SalesOrderList (ID 50011) extends Record Sales Order List.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12                         Jesper Harder                               0193    Added modifications
/// 2023.03.23                      Jesper Harder                               013     Display DropShip Purchase Order No. On Sales Order List
/// 2023.05.11                      Jesper Harder                               013     Display DropShip changed to customer 1916
/// 2023.06.12                      Jesper Harder                               033     Warning ITI IIC Status Code
/// 
/// </remarks>

pageextension 50011 "SalesOrderList" extends "Sales Order List"
{
    layout
    {
        //013
        addlast(Control1) { field("Drop Shipment Order No."; Rec."Drop Shipment Order No.") { Visible = true; ApplicationArea = All; ToolTip = 'Specifies the value of the Drop Shipment Order No. field.'; } }

        addafter("Sell-to Customer Name") { field("Old Customer No.1"; Rec."Old Customer No.") { ApplicationArea = All; ToolTip = 'Specifies the value of the Alternative Customer No. field.'; } }
        addafter("External Document No.") { field("Your Reference1"; Rec."Your Reference") { ApplicationArea = All; ToolTip = 'Specifies the customer''s reference. The content will be printed on sales documents.'; } }

        modify("Bill-to Name") { Visible = false; }
        modify("Assigned User ID") { Visible = false; }
        modify("Document Date") { Visible = false; }
        modify("Amt. Ship. Not Inv. (LCY)") { Visible = false; }
        modify("Amt. Ship. Not Inv. (LCY) Base") { Visible = false; }
        modify("Amount Including VAT") { Visible = false; }
        modify(Amount) { Visible = false; }
        modify("ITI IIC Created By") { Visible = false; }
        modify("Completely Shipped") { Visible = false; }


        modify("Requested Delivery Date") { Visible = true; }
        moveafter("Your Reference1"; "Requested Delivery Date")






    }

    views
    {
        addfirst
        {
            view(WebOrders)
            {
                Caption = 'Show Web orders';
                OrderBy = Descending("No.");
                Filters = where("No." = filter('W*'));
            }
            view(HideWebOrders)
            {
                Caption = 'Hide Web orders';
                OrderBy = Descending("No.");
                Filters = where("No." = filter('<>W*'));
            }
            view(EDIorders)
            {
                Caption = 'Show EDI orders';
                OrderBy = Descending("No.");
                Filters = where(TRCUDF10 = filter('EDI'));
            }
            view(DropShip)
            {
                Caption = 'Show DropShip orders';
                OrderBy = Descending("No.");
                Filters = where("Sell-to Customer No." = filter('2112'));
            }
            view(ScanpanNorge)
            {
                Caption = 'Show Scanpan Norge orders';
                OrderBy = descending("No.");
                Filters = where("Sell-to Customer No." = filter('1010|8245'));
            }

        }
    }



    trigger OnOpenPage()
    begin
        Rec.SetCurrentKey("No.");
        Rec.Ascending(false);
        Rec.FindFirst();
    end;

    //033
    //too much nagging

}



 


/// <remarks>
/// 
/// Version list
/// 2024.01             Jesper Harder       064         Added the Sell-To CustomerName
/// 2024.09             Jesper Harder       079         Show Alternative Delivery Address on Sales Orders page, item,reference,sales orders
/// </remarks>

pageextension 50115 SalesOrders extends "Sales Orders"
{

    layout
    {
        addafter("Sell-to Customer No.")
        {
            field("Sell-To Customer Name"; rec."Sell-To Customer Name")
            {
                ApplicationArea = all;
                ToolTip = 'Specifies the value of the Sell-To Customer Name field.';
            }
            field("Ship-to Code"; Rec."Ship-to Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Ship-to Code field.', Comment = '%';
            }
            field("Ship-to Name"; Rec."Ship-to Name")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Ship-to Name field.', Comment = '%';
            }

        }
    }
} 

/// <summary>
/// PageExtension SalesOrderSubformExtSC (ID 50013) extends Record Sales Order Subform.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2022.12             Jesper Harder       0193        Added Scanpan Group, added SystemUser created, modified
/// 2023.01             Jesper Harder       0193        Added field for Barcode on sales order line ref. FLowField in TableExt 50002 SCANPAN_SalesLine
/// 
/// </remarks>

pageextension 50013 "SalesOrderSubform" extends "Sales Order Subform"
{
    layout
    {
        addlast(Control1)
        {
            field(SystemCreatedAt1; Rec.SystemCreatedAt)
            {
                ApplicationArea = All;
                Visible = true;
                QuickEntry = false;
                ToolTip = 'Specifies the value of the SystemCreatedAt field.';
            }
            field(CreatedBy2; CreatedBy)
            {
                ApplicationArea = All;
                Visible = true;
                Caption = 'SystemCreatedBy';
                QuickEntry = false;
                ToolTip = 'Specifies the value of the SystemCreatedBy field.';
            }
            field(SystemModifiedAt1; Rec.SystemModifiedAt)
            {
                ApplicationArea = All;
                Visible = true;
                QuickEntry = false;
                ToolTip = 'Specifies the value of the SystemModifiedAt field.';
            }
            field(ModifiedBy2; ModifiedBy)
            {
                ApplicationArea = All;
                Visible = true;
                Caption = 'SystemModifiedBy';
                QuickEntry = false;
                ToolTip = 'Specifies the value of the SystemModifiedBy field.';
            }
        }

        addafter("No.") { field("Item Cross-Reference No.1"; "Item Cross-Reference No.") { ApplicationArea = All; ToolTip = 'Specifies the value of the Item Cross-Reference No. field.'; } }


        //Quick Entry
        modify("Type") { Visible = true; QuickEntry = false; }
        modify("No.") { Visible = true; QuickEntry = true; }
        modify(Description) { Visible = true; QuickEntry = false; }
        modify(Quantity) { Visible = true; QuickEntry = true; }
        modify("Drop Shipment") { Visible = true; QuickEntry = false; }

        modify("Item Reference No.") { Visible = true; QuickEntry = false; }
        modify("Next Amount Per Unit") { Visible = true; QuickEntry = false; }
        modify("Unit Price") { Visible = true; QuickEntry = false; }
        modify("Unit Price minus discount") { Visible = true; QuickEntry = false; }
        modify("Location Code") { Visible = true; QuickEntry = false; }
        modify("Bin Code") { Visible = true; QuickEntry = false; }
        modify("Unit of Measure Code") { Visible = true; QuickEntry = false; }
        modify("Used Campaign NOTO") { Visible = true; QuickEntry = false; }
        modify("Yearcode Text") { QuickEntry = false; }
        modify("Line Discount %") { QuickEntry = false; }
        
        //SHIPITREMOVE
        /*
        modify("IDYS Quantity To Send") { QuickEntry = false; }
        modify("IDYS Quantity Sent") { QuickEntry = false; }
        modify("IDYS Tracking No.") { QuickEntry = false; }
        modify("IDYS Tracking URL") { QuickEntry = false; }
        */
        
        modify("Line Amount") { QuickEntry = false; }
        modify("Qty. to Ship") { QuickEntry = false; }
        modify("Qty. to Invoice") { QuickEntry = false; }
        modify("Planned Shipment Date") { QuickEntry = false; }
        modify("Requested Delivery Date") { Visible = true; QuickEntry = false; }
        modify("Purchasing Code") { QuickEntry = false; Visible = true; }
        modify("IC Partner Code") { QuickEntry = false; Visible = true; }
        modify("Priority NOTO") { QuickEntry = false; }

        modify("Return Reason Code") { QuickEntry = false; Visible = true; }

        modify("Qty. to Assemble to Order") { Visible = false; }
        modify("Reserved Quantity") { Visible = false; }
        modify("Tax Area Code") { Visible = false; }
        modify("Tax Group Code") { Visible = false; }
        modify("Qty. to Assign") { Visible = false; }
        modify("Qty. Assigned") { Visible = false; }

        modify("Shortcut Dimension 1 Code") { Visible = false; }
        modify("Shortcut Dimension 2 Code") { Visible = false; }
        modify(ShortcutDimCode3) { Visible = false; }
        modify(ShortcutDimCode4) { Visible = false; }
        modify(ShortcutDimCode5) { Visible = false; }
        modify(ShortcutDimCode6) { Visible = false; }
        modify(ShortcutDimCode7) { Visible = false; }
        modify(ShortcutDimCode8) { Visible = false; }

        modify("TRCUDF1") { Visible = false; }
        modify("TRCUDF2") { Visible = false; }
        modify("TRCUDF3") { Visible = false; }
        modify("TRCUDF4") { Visible = false; }
        modify("TRCUDF5") { Visible = false; }
        modify(TRCPriceException) { Visible = false; }

        modify("ITI IIC Package Tracking No.") { Visible = false; }




        addlast(Control28) { field("Shipping Agent Service Code1"; Rec."Shipping Agent Service Code") { ApplicationArea = All; ToolTip = 'Specifies the code for the service, such as a one-day delivery, that is offered by the shipping agent.'; } }
        addlast(Control1) { field("ABCD Category"; Rec."ABCD Category") { ApplicationArea = All; Visible = true; QuickEntry = false; Editable = false; ToolTip = 'Specifies the value of the ABCD Category field.'; } }

        moveafter(Type; "No.")
        moveafter("No."; Description)
        moveafter(Description; Quantity)
        moveafter(Quantity; "Unit of Measure Code")
        moveafter("Unit of Measure Code"; "Drop Shipment")
        moveafter("Drop Shipment"; "Next Amount Per Unit")
        moveafter("Next Amount Per Unit"; "Unit Price")
        moveafter("Unit Price"; "Unit Price minus discount")
        moveafter("Unit Price minus discount"; "Line Amount")
        moveafter("Line Amount"; "Location Code")
        moveafter("Location Code"; "Bin Code")

        moveafter("ITI IIC Drop Shipment"; "Purchasing Code")

        movebefore("Quantity Shipped"; "Qty. to Ship")
        moveafter("Line Amount"; "Line Discount %")
        addafter("Quantity Invoiced")
        {
            field("Requested Delivery Date1"; Rec."Requested Delivery Date")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the date that the customer has asked for the order to be delivered.';
                QuickEntry = false;
            }
        }


        /*
        addlast(Control1)
        {
            field("Prepayment %71433"; Rec."Prepayment %")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the prepayment percentage to use to calculate the prepayment for sales.';
            }
            field("Prepmt. Line Amount19178"; Rec."Prepmt. Line Amount")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the prepayment amount of the line in the currency of the sales document if a prepayment percentage is specified for the sales line.';
            }
            field("Prepmt. Amt. Inv.36387"; Rec."Prepmt. Amt. Inv.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the prepayment amount that has already been invoiced to the customer for this sales line.';
            }
            field("Prepmt. Amt. Incl. VAT11403"; Rec."Prepmt. Amt. Incl. VAT")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. Amt. Incl. VAT field.';
            }
            field("Prepayment Amount12589"; Rec."Prepayment Amount")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepayment Amount field.';
            }
            field("Prepmt. VAT Base Amt.83457"; Rec."Prepmt. VAT Base Amt.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. VAT Base Amt. field.';
            }
            field("Prepayment VAT %27715"; Rec."Prepayment VAT %")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepayment VAT % field.';
            }
            field("Prepmt. VAT Calc. Type11122"; Rec."Prepmt. VAT Calc. Type")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. VAT Calc. Type field.';
            }
            field("Prepayment VAT Identifier23757"; Rec."Prepayment VAT Identifier")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepayment VAT Identifier field.';
            }
            field("Prepmt Amt to Deduct69522"; Rec."Prepmt Amt to Deduct")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the prepayment amount that has already been deducted from ordinary invoices posted for this sales order line.';
            }
            field("Prepmt Amt Deducted89994"; Rec."Prepmt Amt Deducted")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the prepayment amount that has already been deducted from ordinary invoices posted for this sales order line.';
            }
            field("Prepayment Line40251"; Rec."Prepayment Line")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepayment Line field.';
            }
            field("Prepmt. Amount Inv. Incl. VAT35760"; Rec."Prepmt. Amount Inv. Incl. VAT")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. Amount Inv. Incl. VAT field.';
            }
            field("Prepmt. Amount Inv. (LCY)59516"; Rec."Prepmt. Amount Inv. (LCY)")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. Amount Inv. (LCY) field.';
            }
            field("Prepmt. VAT Amount Inv. (LCY)75527"; Rec."Prepmt. VAT Amount Inv. (LCY)")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Prepmt. VAT Amount Inv. (LCY) field.';
            }
        }
        */


    }
    var
        CreatedBy: Text[100];
        ModifiedBy: Text[100];

    trigger OnAfterGetRecord()
    var
        User: Record User;
    begin
        CreatedBy := '';
        ModifiedBy := '';
        if User.Get(Rec.SystemCreatedBy) then CreatedBy := User."User Name";
        if User.Get(Rec.SystemModifiedBy) then ModifiedBy := User."User Name";
    end;

    trigger OnNewRecord(BelowxRec: Boolean)
    begin
        Rec.Type := Rec.Type::Item;
    end;

}
 



/// <summary>
/// PageExtension "SalesPriceListsExtSC" (ID 50030) extends Record Sales Price Lists.
/// </summary>
/// 
/// <remarks>
/// 2023.1              Jesper Harder               0193                      Extends page - Adds saved filter 'ActiveSalesPriceLists'
/// </remarks>

pageextension 50030 SalesPriceListsExtSC extends "Sales Price Lists"
{
    layout
    {
        addfirst(Control1)
        {
            field(Code1; Rec.Code)
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the unique identifier of the price list.';
            }
        }


    }
    actions
    {
        addlast(Processing)
        {
            group("SCANPAN")
            {
                Caption = 'Scanpan';
                ToolTip = 'Added Scanpan functions.';
                action("Salespricelist output")
                {
                    Caption = 'Salespricelist Output';
                    ToolTip = 'Create Salespricelist output based on filters.';
                    ApplicationArea = Basic, Suite;
                    Image = "Report";
                    RunObject = page Salespricelist_Card_SC;
                }
                action("Pricelist Item Source Data")
                {
                    Caption = 'WebService Pricelist Source Data';
                    ToolTip = 'Base for extracting Item Data to external calculation.';
                    ApplicationArea = Basic, Suite;
                    Image = PriceAdjustment;
                    RunObject = page "WebServiceSalesPriceListSource";
                }

            }
        }
    }
    views
    {
        addfirst
        {
            view(ActiveSalesPriceLists)
            {
                Caption = 'Active Sales Price Lists';
                OrderBy = ascending("Starting Date");
                Filters = where("Ending Date" = filter('>d|'''''), "Starting Date" = filter('<d'), "Amount Type" = filter('Pris'));
                Visible = true;
            }
        }

    }

    /*
        trigger OnOpenPage()
        var
            UserPersonalization: Record "User Personalization";
        begin
            UserPersonalization.Get(UserSecurityId());

            If UserPersonalization."Profile ID" = '_SALG' then begin
                //Rec.SetCurrentKey("Ending Date");
                Rec.SetFilter("Starting Date", '<%1', Today);
                Rec.SetFilter(Rec."Ending Date", '>%1|%2', Today, 0D);
                Rec.SetRange(Rec."Amount Type", Rec."Amount Type"::Price);

                Rec.FindFirst();
            end;
        end;
    */
}
 
/// <summary>
/// PageExtension Sales Return Order (ID 50068) extends Record Sales Return Order.
/// </summary>
/// 
/// <remarks>
/// 2023.05.10              Jesper Harder                           029 SalesReturnOrder - Added Sales Lines factbox
/// </remarks>   
pageextension 50069 "Sales Return Order" extends "Sales Return Order"
{
    layout
    {
        addfirst(factboxes)
        {
            part(SalesLineFactBox; "Sales Line FactBox")
            {
                ApplicationArea = Suite;
                Provider = SalesLines;
                SubPageLink = "Document Type" = FIELD("Document Type"),
                              "Document No." = FIELD("Document No."),
                              "Line No." = FIELD("Line No.");
            }
        }
    }
} 






/// <summary>
/// pageextension 50022 "SCANPAN Routing Lines" extends "Routing Lines"
/// </summary>
pageextension 50022 "SCANPANRoutingLines" extends "Routing Lines"
{
    layout
    {
        addafter("Run Time") { field("Run Time Unit of Meas. Code1"; Rec."Run Time Unit of Meas. Code") { ApplicationArea = All; ToolTip = 'Specifies the unit of measure code that applies to the run time of the operation.'; } }
        addafter(Description) { field("Routing Link Code74149"; Rec."Routing Link Code") { ApplicationArea = All; ToolTip = 'Specifies the routing link code.'; } }

    }
}
 
pageextension 50120 ScanpanSetup extends "SCANPAN Setup"
{
    ///<summary>
    ///
    /// 2024.09             Jesper Harder       080         Self-insured limit check with warning on sales order.
    /// This page extension adds warning settings fields to the SCANPAN Setup page to provide configuration options for displaying warnings related to self-insured and credit maximum situations.
    ///</summary>
    layout
    {
        addlast(Content)
        {
            group(WarningSettings)
            {
                Caption = 'Warning Settings';

                // Field to indicate whether to show a warning for self-insured situations
                field("Show SelfInsured Warning"; "Show SelfInsured Warning")
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates whether a warning should be displayed for self-insured situations.';
                }
                
                // Field to indicate whether to show a warning when the credit maximum is reached
                field("Show CreditMax Warning"; "Show CreditMax Warning")
                {
                    ApplicationArea = All;
                    ToolTip = 'Indicates whether a warning should be displayed when the credit maximum is reached.';
                }
            }
        }
    }
} 


/*

/// <summary>
/// 2024.08             Jesper Harder       075         Added XtensionIT fields for Transporter/Shipmondon reference
/// </summary>
pageextension 50118 "ShippingAgentServices" extends "Shipping Agent Services"
{
    layout
    {
        addafter(Description)
        {
            field("XTECSC Shipment ID1"; rec."XTECSC Shipment ID")
            {
                ApplicationArea = All;
            }
            field("XTECSC Shipment Code1"; rec."XTECSC Shipment Code")
            {
                ApplicationArea = All;
            }
            field("XTECSC Country Code1"; rec."XTECSC Country Code")
            {
                ApplicationArea = All;
            }
        }
    }
}

*/ 





/// <summary>
/// PageExtension ShopCalendarHolidays (ID 50060) extends Record Shop Calendar Holidays //(99000753, List).
/// </summary>
pageextension 50060 "ShopCalendarHolidays" extends "Shop Calendar Holidays" //(99000753, List)
{

    layout
    {
        addfirst(Control1)
        {
            field("Shop Calendar Code"; Rec."Shop Calendar Code")
            {
                ApplicationArea = Basic, Suite;
                Visible = true;
                ToolTip = 'Specifies the value of the Shop Calendar Code field.';
            }
        }
    }

} 



/// <summary>
/// PageExtension "StockkeepingUnitListExtSC" (ID 50034) extends Record Stockkeeping Unit List.
/// </summary>
pageextension 50034 StockkeepingUnitListExtSC extends "Stockkeeping Unit List"
{
    layout
    {
        addafter(Description)
        {
            field("Vendor No."; Rec."Vendor No.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies for the SKU, the same as the field does on the item card.';
            }
        }
        addafter("Vendor No.")
        {
            field("Reorder Point1"; Rec."Reorder Point")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies for the SKU, the same as the field does on the item card.';
            }
            field("Safety Stock Quantity52170"; Rec."Safety Stock Quantity")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies for the SKU, the same as the field does on the item card.';
            }
        }

        addafter(Inventory)
        {
            field("Reordering Policy"; Rec."Reordering Policy")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies for the SKU, the same as the field does on the item card.';
            }
        }
    }
}
 



/// <summary>
/// PageExtension Tariff Numbers (ID 50086) extends Record Tariff Numbers.
/// </summary>
/// <remarks>
/// 2023.09            Jesper Harder        050         Duty Percentage to Tariff page 
/// </remarks>
pageextension 50086 "Tariff Numbers" extends "Tariff Numbers"
{
    layout
    {
        addlast(Control1)
        {
            field("Duty Percentage"; Rec."Duty Percentage")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Indicates Duty Percentage.';
            }
        }
    }
}
 




/// <summary>
/// PageExtension Transfer Orders (ID 50062) extends Record Transfer Orders.
/// </summary>
pageextension 50062 "Transfer Orders" extends "Transfer Orders"
{
    layout
    {
        addafter(Status)
        {
            field("Container ID NOTO16537"; Rec."Container ID NOTO")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the Container ID field.';
            }
        }
    }
}
 





/// <summary>
/// PageExtension TransferOrderSubformExtSC (ID 50044) extends Record Transfer Order Subform.
/// </summary>
pageextension 50044 "TransferOrderSubformExtSC" extends "Transfer Order Subform"
{
    layout
    {
        moveafter(Quantity; "Unit of Measure Code")
        moveafter("Unit of Measure Code"; "Qty. to Ship")
        moveafter("Qty. to Ship"; "Quantity Shipped")
        moveafter("Quantity Shipped"; "Container ID NOTO")
        moveafter("Container ID NOTO"; "Qty. to Receive")
        moveafter("Qty. to Receive"; "Quantity Received")
        moveafter("Quantity Received"; "Shipment Date")
        moveafter("Shipment Date"; "Receipt Date")
        moveafter("Receipt Date"; "Container No.")
        moveafter("Container No."; "Bill of Lading No. NOTO")


    }
} 
//SHIPITREMOVE




/// <summary>
/// PageExtension TransportOrderLineSub (ID 50077) extends Record IDYS Transport Order Line Sub..
/// </summary>
/// 
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// 
/// </remarks>

/*
pageextension 50077 "TransportOrderLineSub" extends "IDYS Transport Order Line Sub."
{
    layout
    {
        addlast(Group)
        {
            field("Tracking No."; Rec."Tracking No.")
            {
                ApplicationArea = all;
                Visible = true;
                ToolTip = 'Displays the Tracking No. from Transport Header.';
            }
        }
    }


}
*/ 





/// <summary>
/// PageExtension User Setup (ID 50084) extends Record User Setup.
/// </summary>
/// 
/// <remarks>
/// 2023.09             Jesper Harder       047         Restrict changes to user setup and General ledger posting dates
/// </remarks>
/// 
pageextension 50085 "User Setup" extends "User Setup"
{

    layout
    {
        addlast(Control1)
        {
            field("Allow Edit Posting Dates"; Rec."Allow Edit Posting Dates")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Checking this field enables the user permission to edit the allowed posting dates in User Setup and in General ledger setup.';
            }
        }
    }
} 




/// <summary>
/// PageExtension ValueEntries (ID 50103) extends Record Value Entries.
/// </summary>
pageextension 50103 "ValueEntries" extends "Value Entries"
{
    layout
    {
        addafter(Adjustment)
        {
            field("Salespers./Purch. Code80122"; Rec."Salespers./Purch. Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies which salesperson or purchaser is linked to the entry.';
            }
        }
    }
}
 



/// <summary>
/// PageExtension VendorCardExtSC (ID 50018) extends Record Vendor Card.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50018 "VendorCardExtSC" extends "Vendor Card"
{
    layout
    {
        addfirst(General) { field("Name 254161"; Rec."Name 2") { ApplicationArea = All; ToolTip = 'Specifies an additional part of the name.'; } }
        addafter("Old Vendor No.") { field("Shipping Agent Code20076"; Rec."Shipping Agent Code") { ApplicationArea = All; ToolTip = 'Specifies the value of the Shipping Agent Code field.'; } }
        addafter("Primary Contact No.") { field("Primary Contact No.06811"; Rec."Primary Contact No.") { ApplicationArea = All; ToolTip = 'Specifies the primary contact number for the vendor.'; } }

    }
}
 



//From user adaptation
/// <summary>
/// PageExtension Vendor List (ID 50068) extends Record Vendor List.
/// </summary>
pageextension 50068 "Vendor List" extends "Vendor List"
{
    layout
    {
        addafter("Responsibility Center")
        {
            field("Country/Region Code1"; Rec."Country/Region Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the country/region of the address.';
            }
            field("Preferred Bank Account Code1"; Rec."Preferred Bank Account Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the vendor bank account that will be used by default on payment journal lines for export to a payment bank file.';
            }
            field("Payment Method Code1"; Rec."Payment Method Code")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies how to make payment, such as with bank transfer, cash, or check.';
            }
        }

    }
}
 






pageextension 50084 "Warehouse Employee" extends "Warehouse Employees"
{

    layout
    {
        addlast(Control1)
        {
            field("Permit Change Warehouse Filter"; Rec."Permit Change Warehouse Filter")
            {
                ApplicationArea = Basic, Suite;
                ToolTip = 'Enabled permits Changes to Warehouse Source Filter field.';
            }
        }
    }

} 




/// <summary>
/// PageExtension WarehousePicks (ID 50078) extends Record Warehouse Picks.
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.07.18              Jesper Harder               038     WarehousePicks - Delete selected Lines  
/// 
/// </remarks>
pageextension 50078 "WarehousePicks" extends "Warehouse Picks"
{

    actions
    {
        addfirst(Processing)
        {
            action("DeleteSelectedLines")
            {
                Image = DeleteRow;
                Caption = 'Delete Selected Lines';
                ToolTip = 'Executes the DElete Selected Lines action.';
                Promoted = true;
                PromotedOnly = true;
                PromotedCategory = Process;
                ApplicationArea = All;

                trigger OnAction()
                var
                    WarehouseActivityHeader: Record "Warehouse Activity Header";
                    SelectionFilterManagement: Codeunit SelectionFilterManagement;
                    RecRef: RecordRef;
                    SelectionFilter: text[200];
                    ConfirmLbl: Label 'Delete Selected Lines?';
                begin
                    WarehouseActivityHeader.Reset();
                    CurrPage.SetSelectionFilter(WarehouseActivityHeader);
                    RecRef.GetTable(WarehouseActivityHeader);
                    SelectionFilter := (SelectionFilterManagement.GetSelectionFilter(RecRef, WarehouseActivityHeader.FieldNo("No.")));
                    if Confirm(ConfirmLbl) then
                        DeleteActivityLines(WarehouseActivityHeader, SelectionFilter)
                    else
                        CurrPage.Update();
                end;
            }
        }
    }

    local procedure DeleteActivityLines(var WarehouseActivityHeader: Record "Warehouse Activity Header"; FilterStr: Text[200])
    var
        RecCount: Integer;
        Lbl: Label 'Lines deleted %1', Comment = '%1 = Number of lines deleted.';
    begin
        RecCount := WarehouseActivityHeader.Count;
        WarehouseActivityHeader.SetRange(Type, WarehouseActivityHeader.Type::Pick);
        WarehouseActivityHeader.SetFilter("No.", FilterStr);
        if WarehouseActivityHeader.FindSet() then
            WarehouseActivityHeader.DeleteAll(true);
        Message(Lbl, Format(RecCount - WarehouseActivityHeader.Count));
    end;
} 


pageextension 50045 WarehouseShipment extends "Warehouse Shipment"
{
    /// <summary>
    /// PageExtension "WarehouseShipmentExtSC" (ID 50045) extends Record Warehouse Shipment.
    /// </summary>
    /// 
    /// <remarks>
    /// 
    /// 2023.03.08         Jesper Harder       0193        Added description field
    /// 2023.07.14         Jesper Harder        035        Post TransportOrderID through
    /// 2024.10             Jesper Harder       088        CountryCode Editable in WarehouseShipment
    /// </remarks>
    /// 

    layout
    {
        addlast(General)
        {
            field(Description; Rec.Description)
            {
                ToolTip = 'Short description here.';
                ApplicationArea = Basic, Suite;
                Visible = true;
            }
            /*field("Transport Order No."; Rec."Transport Order No.")
            {
                ToolTip = 'Transport Order No.';
                ApplicationArea = Basic, Suite;
                Visible = true;
                Editable = false;
                TableRelation = "IDYS Transport Order Header"."No.";
            }*/
        }

        // 088  
        modify(CountryCodeNOTO)
        {
            Editable = true;
        }
    }

}
 
pageextension 50046 "WarehouseShipmentList" extends "Warehouse Shipment List"
{
    /// <summary>
    /// 
    /// This page extension adds additional fields and actions to the Warehouse Shipment List page.
    /// It also modifies the sorting order to display the highest number first.
    /// 
    /// Version History:
    /// 2023.03.08          Jesper Harder   0193            Added Description field.
    /// 2024.10             Jesper Harder   082             Modified list to show highest number first in reverse order.
    /// 2024.10                                             Added to show Shipper information
    /// </summary>

    layout
    {
        // Add additional fields at the end of the existing controls.
        addafter("Location Code")
        {
            // Adds the Description field to the list.
            field(Description; Rec.Description)
            {
                ApplicationArea = All;
                Importance = Additional;
                ToolTip = 'Specifies a short description.';
            }
            // Adds the Warehouse Pick No. field to the list.
            field("Warehouse Pick No."; Rec."Warehouse Pick No.")
            {
                ApplicationArea = All;
                Importance = Additional;
                ToolTip = 'Specifies the warehouse pick number.';
            }
            field("Shipping Agent Code1"; Rec."Shipping Agent Code")
            {
                ApplicationArea = All;
                Importance = Additional;
                ToolTip = 'Specifies the Shipping Agent Code';
            }
            field("Shipping Agent Service Code1"; Rec."Shipping Agent Service Code")
            {
                ApplicationArea = All;
                Importance = Additional;
                ToolTip = 'Specifies the Shipping Agent Service Code';
            }
            field("Shipment Method Code1"; Rec."Shipment Method Code")
            {
                ApplicationArea = All;
                Importance = Additional;
                ToolTip = 'Specifies the Shipment Method Code';
            }
        }
    }
    actions
    {
        // Add a new action to the Navigation menu.
        addlast(Navigation)
        {
            action(WHSEPickBalance)
            {
                Caption = 'Warehouse Pick Balance List';
                ToolTip = 'Shows bin and shipment balance.';
                Image = Warehouse;
                ApplicationArea = All;
                // Runs the specified page when the action is triggered.
                RunObject = page "WMSPickBinBalance";
            }
        }
    }
    // Trigger to sort the list in descending order by "No." when the page opens.
    trigger OnOpenPage()
    begin
        Rec.SetCurrentKey("No.");
        Rec.Ascending(false);
        CurrPage.Update();
    end;
}




 



/// <summary>
/// PageExtension "WhseShipmentLineExtSC" (ID 50029) extends Record Whse. Shipment Lines.
/// </summary>
/// 
/// <remarks>
/// 3.1.2023            Jesper Harder                      Extends page
/// </remarks>
pageextension 50029 WhseShipmentLineExtSC extends "Whse. Shipment Lines"
{
    layout
    {
        addafter("Item No.") { field("Completely Picked1"; "Completely Picked") { ApplicationArea = All; ToolTip = 'Specifies the value of the Completely Picked field.'; } }
    }
}
 
/// <summary>
/// 50004 "WhseShipmentSubformExtSC" extends "Whse. Shipment Subform"
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50004 "WhseShipmentSubformExtSC" extends "Whse. Shipment Subform"
{
    layout
    {
        addafter(Quantity)
        {
            field("Pick Qty.58694"; Rec."Pick Qty.")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the quantity in pick instructions assigned to be picked for the warehouse shipment line.';
            }
            field("Qty. Picked10389"; Rec."Qty. Picked")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies how many of the total shipment quantity have been registered as picked.';
            }
        }
    }
}
 



pageextension 50122 XTECSCTrackAndTraceList extends "XTECSC Track And Trace List"
{

    ///<summary>
    ///
    /// 2024.10             Jesper Harder       086         XtensionIT Shipmondo Add Customer Information on PageExt XTECSC Track And Trace List
    ///</summary>

    layout
    {
        /*
        addafter("Track & Trace Number")
        {
            field(ReceiverNo; ReceiverNo)
            {
                ApplicationArea = all;
                Caption = 'Receiver No.';
                ToolTip = 'Shows the Receiver No.';
            }
            field(ReceiverName; ReceiverName)
            {
                ApplicationArea = all;
                Caption = 'Receiver Name';
                ToolTip = 'Shows the Receiver Name';
            }
        }
        */
    }

    var
        SalesShipmentHeader: Record "Sales Shipment Header";
        ReceiverNo: text;
        ReceiverName: text;

    trigger OnOpenPage()
    begin
        // Remove filter page
        Rec.SetRange("Local Timestamp");

        Rec.SetCurrentKey("Local Timestamp");
        Rec.Ascending(false);
        Rec.FindFirst();

    end;

    trigger OnAfterGetRecord()
    begin
        SalesShipmentHeader.Reset();
        ReceiverNo := '';
        ReceiverName := '';

        if Rec."Receiver No." = '' then begin
            if Rec."Shipment Type" = Rec."Shipment Type"::"Warehouse Shipment" then begin
                SalesShipmentHeader.CalcFields(PostedWhseShipmentNo);
                SalesShipmentHeader.SetRange(PostedWhseShipmentNo, Rec."Document No.");
            end;

            if Rec."Shipment Type" = Rec."Shipment Type"::"Sales Order" then
                SalesShipmentHeader.SetRange("Order No.", Rec."Document No.");

            if SalesShipmentHeader.FindFirst() then begin
                ReceiverNo := SalesShipmentHeader."Sell-to Customer No.";
                ReceiverName := SalesShipmentHeader."Ship-to Name";
            end;

            Rec."Receiver No." := SalesShipmentHeader."Sell-to Customer No.";
            Rec."Receiver Name" := SalesShipmentHeader."Ship-to Name";
            Rec.Modify();
        end;
    end;
}
 




/// <summary>
/// PageExtension ItemPlanningFactBox (ID 50101) extends Record Item Planning FactBox.
/// </summary>
pageextension 50097 ItemPlanningFactBox extends "Item Planning FactBox"
{
    layout
    {
        addafter("No.")
        {
            field("ABCD Category31662"; Rec."ABCD Category")
            {
                ApplicationArea = All;
                ToolTip = 'Specifies the value of the ABCD Category field.';
            }
        }
    }
}
 
/// <summary>
/// PageExtension SalesLineFactBox (ID 50081) extends Record Sales Line FactBox.
/// </summary>
///
/// <remarks>
///
/// 2023.07.24              Jesper Harder                   039     Factbox Item Availability FUTURE
///
/// </remarks>
pageextension 50081 "SalesLineFactBox" extends "Sales Line FactBox"
{
    layout
    {
        addafter("Item Availability")
        {
            field(ItemAvailabilityTotal; SalesInfoPaneManagement.CalcAvailability(SalesLine2))
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Item Availability future';
                DecimalPlaces = 0 : 5;
                DrillDown = true;
                ToolTip = 'Specifies how may units of the item on the sales line are available, in inventory or incoming.';

                trigger OnDrillDown()
                begin
                    ItemAvailabilityFormsMgt.ShowItemAvailFromSalesLine(SalesLine2, ItemAvailabilityFormsMgt.ByEvent());
                    CurrPage.Update(true);
                end;
            }
            field(ItemCalculatedAvailable; Item."Calculated Available NOTO")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Item Calculated Available';
                DecimalPlaces = 0 : 5;
                ToolTip = 'Specifies the value of the Item Calculated Available field.';
            }
            field(ItemCalculatedAvailableDate; Item."Calculated Available Date NOTO")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Item Calculated Available date';
                ToolTip = 'Specifies the value of the Item Calculated Available date field.';
            }

        }
    }
    var
        Item: Record Item;
        SalesLine2: Record "Sales Line";
        ItemAvailabilityFormsMgt: Codeunit "Item Availability Forms Mgt";
        SalesInfoPaneManagement: Codeunit "Sales Info-Pane Management";


    trigger OnAfterGetCurrRecord()
    var
    begin
        SalesLine2.Get(Rec."Document Type", Rec."Document No.", Rec."Line No.");
        if SalesLine2."Planned Shipment Date" <> 0D then SalesLine2."Planned Shipment Date" := CALCDATE('<+5Y>', SalesLine2."Shipment Date");
        if SalesLine2."Shipment Date" <> 0D then SalesLine2."Shipment Date" := CalcDate('<+5Y>', SalesLine2."Shipment Date");
        if SalesLine2."Planned Delivery Date" <> 0D then SalesLine2."Planned Delivery Date" := CalcDate('<+5Y>', SalesLine2."Planned Delivery Date");
        //Rec2."Requested Delivery Date" := CalcDate('<+1Y>',Rec2."Requested Delivery Date");


        Item."Calculated Available NOTO" := 0;
        Item."Calculated Available Date NOTO" := 0D;
        if Item.Get(Rec."No.") then;

    end;

} 
page 50047 "CustomersOverCreditLimit"
{
    /// <summary>
    /// 2024.06 Jesper Harder 070 Customers Over Credit Limit TILE
    /// 2024.09 Jesper Harder 080 Self-insured limit check with warning on sales order.
    ///
    /// This page lists customers whose balance exceeds their assigned credit limit or self-insured limit.
    /// The page uses a temporary source table and calculates the total amount exceeding these limits.
    /// This is useful for monitoring and managing customer credit risk.
    /// </summary>

    PageType = CardPart;
    SourceTableTemporary = true;
    SourceTable = Customer;

    layout
    {
        area(content)
        {
            group(KeepTogether)
            {
                ShowCaption = false;

                group(CustomerListGroup)
                {
                    Caption = 'Customer List (Use Toggle View to show Totals)';
                    ShowCaption = true;
                    Visible = not ShowTotal;

                    repeater(Group)
                    {
                        field("Customer No."; Rec."No.")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Customer No.';
                            ToolTip = 'Unique ID for the customer.';
                            DrillDown = true;
                            DrillDownPageId = "Customer Card";

                            trigger OnDrillDown()
                            begin
                                PAGE.Run(PAGE::"Customer Card", Rec);
                            end;
                        }

                        field("Balance (LCY)"; Rec."Balance (LCY)")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Balance (LCY)';
                            ToolTip = 'Current balance of the customer in LCY.';
                            DecimalPlaces = 0;
                        }

                        field("Credit Limit (LCY)"; Rec."Credit Limit (LCY)")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Credit Limit (LCY)';
                            ToolTip = 'Assigned credit limit for the customer in LCY.';
                            DecimalPlaces = 0;
                            StyleExpr = StyleExprCreditLimit;
                        }

                        field("Self-Insured (LCY)"; Rec."Self-Insured (LCY)")
                        {
                            ApplicationArea = Basic, Suite;
                            Caption = 'Self-Insured Limit (LCY)';
                            ToolTip = 'Self-insured credit limit for the customer in LCY.';
                            DecimalPlaces = 0;
                            StyleExpr = StyleExprSelfInsured;
                        }
                    }
                }

                group(TotalGroup)
                {
                    Caption = 'Totals Exceeding Limits (Use Toggle View to show details)';
                    ShowCaption = true;
                    Visible = ShowTotal;

                    field(TotalOverCreditLimit; TotalOverCreditLimit)
                    {
                        ApplicationArea = All;
                        Editable = false;
                        Caption = 'Over Credit Limit (LCY)';
                        ToolTip = 'Total exceeding credit limits (balances minus credit limits).';
                        DecimalPlaces = 0;
                    }

                    field(TotalOverSelfInsured; TotalOverSelfInsured)
                    {
                        ApplicationArea = All;
                        Editable = false;
                        Caption = 'Over Self-Insured Limit (LCY)';
                        ToolTip = 'Total exceeding self-insured limits (balances minus self-insured limits).';
                        DecimalPlaces = 0;
                    }
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            action(ToggleView)
            {
                Caption = 'Toggle View';
                ToolTip = 'Switch between showing the customer list and totals.';
                Image = Change;

                trigger OnAction()
                begin
                    ShowTotal := not ShowTotal;
                    CurrPage.Update();
                end;
            }
        }
    }

    var
        ShowTotal: Boolean;
        TotalOverCreditLimit: Decimal;
        TotalOverSelfInsured: Decimal;
        StyleExprSelfInsured: Text;
        StyleExprCreditLimit: Text;

    trigger OnOpenPage()
    var
        Customer: Record Customer;
    begin
        ShowTotal := true;

        InitializeTotals();

        if Customer.FindSet() then
            repeat
                Customer.CalcFields("Balance (LCY)");
                if ShouldInsertCustomer(Customer) then begin
                    Rec := Customer;
                    Rec.Insert();
                end;
            until Customer.Next() = 0;

        CalculateTotals();

        if Rec.FindFirst() then;
    end;

    trigger OnAfterGetRecord()
    begin
        SetStyleExpressions(Rec);
    end;

    local procedure InitializeTotals()
    begin
        TotalOverCreditLimit := 0;
        TotalOverSelfInsured := 0;
    end;

    local procedure ShouldInsertCustomer(Customer: Record Customer): Boolean
    var
        CreditLimitTriggered: Boolean;
    begin
        CreditLimitTriggered := false;

        if (Customer."Balance (LCY)" > Customer."Credit Limit (LCY)") and
           (Customer."Credit Limit (LCY)" >= Customer."Self-Insured (LCY)") then begin
            CreditLimitTriggered := true;
            TotalOverCreditLimit += Customer."Balance (LCY)" - Customer."Credit Limit (LCY)";
            exit(true);
        end;

        if (not CreditLimitTriggered) and
           (Customer."Balance (LCY)" > Customer."Self-Insured (LCY)") and
           (Customer."Self-Insured (LCY)" >= Customer."Credit Limit (LCY)") then begin
            TotalOverSelfInsured += Customer."Balance (LCY)" - Customer."Self-Insured (LCY)";
            exit(true);
        end;

        exit(false);
    end;

    local procedure CalculateTotals()
    begin
        TotalOverCreditLimit := TotalOverCreditLimit;
        TotalOverSelfInsured := TotalOverSelfInsured;
    end;

    local procedure SetStyleExpressions(Customer: Record Customer)
    begin
        StyleExprCreditLimit := '';
        StyleExprSelfInsured := '';

        // Set style for Credit Limit based on the percentage the balance exceeds the limit
        if (Customer."Credit Limit (LCY)" > 0) then
            if (Customer."Balance (LCY)" > Customer."Credit Limit (LCY)") then
                if (Customer."Balance (LCY)" > Customer."Credit Limit (LCY)" * 1.25) then
                    StyleExprCreditLimit := 'Unfavorable'
                else
                    if (Customer."Balance (LCY)" > Customer."Credit Limit (LCY)" * 1.15) then
                        StyleExprCreditLimit := 'Attention'
                    else
                        if (Customer."Balance (LCY)" > Customer."Credit Limit (LCY)" * 1.10) then
                            StyleExprCreditLimit := 'Strong'
                        else
                            StyleExprCreditLimit := 'Favorable';



        // Set style for Self-Insured based on the percentage the balance exceeds the limit
        if (Customer."Self-Insured (LCY)" > 0) then
            if (Customer."Balance (LCY)" > Customer."Self-Insured (LCY)") then
                if (Customer."Balance (LCY)" > Customer."Self-Insured (LCY)" * 1.25) then
                    StyleExprSelfInsured := 'Unfavorable'
                else
                    if (Customer."Balance (LCY)" > Customer."Self-Insured (LCY)" * 1.15) then
                        StyleExprSelfInsured := 'Attention'
                    else
                        if (Customer."Balance (LCY)" > Customer."Self-Insured (LCY)" * 1.10) then
                            StyleExprSelfInsured := 'Strong'
                        else
                            StyleExprSelfInsured := 'Favorable';

    end;
}
 
page 50060 "SalesCompareAndRealized"
{
    // Page Caption for the page 'Sales Comparison & Realized Sales'
    Caption = 'Sales Comparison & Realized Sales';

    /// <summary>
    /// 2024.08             Jesper Harder       076         Sales Comparison and Realized Sales
    /// 
    /// This page provides an overview of sales data in Business Central.
    /// It allows switching between two views:
    /// 1. **Sales Comparison View**: Compares realized sales across multiple dimensions.
    /// 2. **Realized Sales View**: Displays detailed breakdown of realized sales.
    /// 
    /// Key Features:
    /// - **Charts and Cues**: Allows toggling between visual charts and cue groups for summary statistics.
    /// - **Drill-Down Capability**: Allows navigation to related pages like Sales Order List, Sales Budget Overview, etc.
    /// - **Custom Actions**: Switch between views, toggle group visibility, and refresh data.
    /// </summary>

    PageType = CardPart;

    layout
    {
        area(content)
        {
            // Group that shows the Sales comparison view using a chart (visible when ChartOption = 1)
            group(ComparisonViewGroup)
            {
                Caption = 'Sales Realized View';
                Visible = ChartOption = 1;

                // Chart control for visualizing sales data
                usercontrol(Chart; "Microsoft.Dynamics.Nav.Client.BusinessChart")
                {
                    ApplicationArea = All;

                    // Trigger to build the chart when the Add-in is ready
                    trigger AddInReady()
                    begin
                        BuildChart(); // Populate the chart with sales data
                    end;
                }
            }

            // Group that shows the Cue view for sales data (visible when ChartOption = 2)
            cuegroup(RealizedSalesViewGroup)
            {
                Caption = 'Realized Sales Cue View';
                CuegroupLayout = Wide;
                Visible = ChartOption = 2;

                // Total Sales Order Amount Cue (always visible)
                cuegroup(TotalSalesOrderGroup)
                {
                    Caption = 'Total Sales Orders';

                    cuegroup(TotalSalesOrdersSubCue)
                    {
                        ShowCaption = false;

                        // Field to display the total sales order amount
                        field(TotalSalesOrderAmountField; SalesCompData."Sales Order Amount")
                        {
                            ApplicationArea = All;
                            Caption = 'Total Orders (K)';
                            DecimalPlaces = 0;
                            DrillDownPageId = "Sales Order List"; // Links to Sales Order List
                            ToolTip = 'The total amount of all sales orders in thousands (K).';

                            /*
                                                        // Action to open the filtered page
                                                        trigger OnDrillDown()
                                                        begin
                                                            // Opening a filtered Sales Order List page
                                                            PAGE.Run(PAGE::"Sales Order List");
                                                        end;
                            */
                        }
                    }
                }

                // Group showing sales details (visible when ShowSalesGroup is true)
                cuegroup(SalesDetailsGroup)
                {
                    Caption = 'Sales Details';
                    Visible = ShowSalesGroup;

                    cuegroup(SalesDetailsGroupSubCue)
                    {
                        ShowCaption = false;

                        // Field displaying internal sales orders amount
                        field(SalesOrderAmountInternField; SalesCompData."Sales Amount INTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'INTERN Orders (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Sales order amount for items with the "INTERN" inventory posting group in thousands (K).';
                        }

                        // Field displaying external sales orders amount
                        field(SalesOrderAmountEksternField; SalesCompData."Sales Amount EKSTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'EKSTERN Orders (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Sales order amount for items with the "EKSTERN" inventory posting group in thousands (K).';
                        }
                    }
                }

                // Group showing realized sales metrics (visible when ShowRealizedSalesGroup is true)
                cuegroup(RealizedSalesGroup)
                {
                    Caption = 'Realized Sales';
                    ShowCaption = false;
                    Visible = ShowRealizedSalesGroup;

                    // Subgroup for Year-to-Date (YTD) realized sales metrics
                    cuegroup(RealisedSalesYTD)
                    {
                        Caption = 'Realised Sale YTD';

                        // Field displaying total YTD realized sales amount
                        field(TotalRealizedSalesYTDField; SalesCompData."Total YTD Sales Amount")
                        {
                            ApplicationArea = All;
                            Caption = 'YTD Realized (K)';
                            DecimalPlaces = 0;
                            DrillDownPageId = "Posted Sales Invoices"; // Link to Posted Sales Invoices
                            ToolTip = 'The total realized sales amount year-to-date in thousands (K).';
                        }

                        // Field displaying internal YTD realized sales
                        field(RealizedSalesYTDInternField; SalesCompData."YTD Sales Amount INTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'INTERN YTD Realized (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Year-to-date realized sales amount for "INTERN" items in thousands (K).';
                        }

                        // Field displaying external YTD realized sales
                        field(RealizedSalesYTDEksternField; SalesCompData."YTD Sales Amount EKSTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'EKSTERN YTD Realized (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Year-to-date realized sales amount for "EKSTERN" items in thousands (K).';
                        }
                    }

                    // Subgroup for Last Year YTD realized sales metrics
                    cuegroup(RealisedSalesYTDLY)
                    {
                        Caption = 'Realised Sale Last YTD';

                        // Field displaying total Last Year YTD realized sales amount
                        field(TotalRealizedSalesLastYTDField; SalesCompData."Total Last YTD Sales")
                        {
                            ApplicationArea = All;
                            Caption = 'Last YTD Realized (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'The total realized sales amount for the same period last year in thousands (K).';
                        }

                        // Field displaying internal Last Year YTD realized sales
                        field(RealizedSalesLastYTDInternField; SalesCompData."Last YTD Sales INTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'INTERN Last YTD Realized (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Last years YTD realized sales for "INTERN" items in thousands (K).';
                        }

                        // Field displaying external Last Year YTD realized sales
                        field(RealizedSalesLastYTDEksternField; SalesCompData."Last YTD Sales EKSTERN")
                        {
                            ApplicationArea = All;
                            Caption = 'EKSTERN Last YTD Realized (K)';
                            DecimalPlaces = 0;
                            ToolTip = 'Last years YTD realized sales for "EKSTERN" items in thousands (K).';
                        }
                    }
                }

                // Group showing budget details (visible when ShowBudgetGroup is true)
                cuegroup(BudgetGroup)
                {
                    Caption = 'Budget Details';
                    Visible = ShowBudgetGroup;

                    // Field displaying total YTD budgeted amount
                    field(TotalBudgetAmountField; SalesCompData."Total Budget Amount")
                    {
                        ApplicationArea = All;
                        Caption = 'YTD Budget Total (K)';
                        DecimalPlaces = 0;
                        DrillDownPageId = "Sales Budget Overview"; // Link to Sales Budget Overview
                        ToolTip = 'The total budgeted sales amount year-to-date in thousands (K).';
                    }

                    // Field displaying internal YTD budget amount
                    field(BudgetAmountInternField; SalesCompData."Budget Amount INTERN")
                    {
                        ApplicationArea = All;
                        Caption = 'INTERN YTD Budget (K)';
                        DecimalPlaces = 0;
                        ToolTip = 'Year-to-date budgeted amount for "INTERN" items in thousands (K).';
                    }

                    // Field displaying external YTD budget amount
                    field(BudgetAmountEksternField; SalesCompData."Budget Amount EKSTERN")
                    {
                        ApplicationArea = All;
                        Caption = 'EKSTERN YTD Budget (K)';
                        DecimalPlaces = 0;
                        ToolTip = 'Year-to-date budgeted amount for "EKSTERN" items in thousands (K).';
                    }
                }

                // Group displaying additional metrics (always visible)
                cuegroup(AdditionalMetricsGroup)
                {
                    Caption = 'Additional Metrics';

                    cuegroup(AdditionalMetrics)
                    {
                        ShowCaption = false;

                        // Field displaying the number of distinct campaigns
                        field(DistinctCampaignsField; SalesCompData."Distinct Campaigns")
                        {
                            ApplicationArea = All;
                            Caption = 'Distinct Campaigns';
                            DrillDownPageId = "Campaign List"; // Link to Campaign List
                            ToolTip = 'The number of distinct campaigns used across sales orders.';
                        }
                    }

                    // Subgroup for sales growth and sales vs budget comparison metrics
                    cuegroup(AdditionalMetricsGrowth)
                    {
                        ShowCaption = false;

                        // Field displaying sales growth percentage YTD
                        field(SalesIndexField; SalesCompData."Sales Index")
                        {
                            ApplicationArea = All;
                            Caption = 'Sales Growth (%) YTD YoY';
                            StyleExpr = SalesIndexStyle; // Style based on sales growth value
                            ToolTip = 'The percentage growth of year-to-date sales compared to the same period last year.';
                        }

                        // Field displaying sales vs budget percentage YTD
                        field(BudgetVsActualField; SalesCompData."Budget Vs Actual")
                        {
                            ApplicationArea = All;
                            Caption = 'Sales vs. Budget (%) YTD';
                            StyleExpr = BudgetVsActualStyle; // Style based on sales vs budget value
                            ToolTip = 'The percentage comparison of YTD actual sales against the YTD budgeted sales.';
                        }
                    }
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            // Action to switch between chart and cue views
            action(SwitchViewAction)
            {
                Caption = 'Switch View';
                Image = View;
                ToolTip = 'Switch between the available charts and cues.';

                // Toggles between ChartOption 1 (chart view) and 2 (cue view)
                trigger OnAction()
                begin
                    if ChartOption = 1 then
                        ChartOption := 2
                    else
                        ChartOption := 1;

                    CurrPage.Update(); // Update the page to reflect changes
                end;
            }

            group(ToggleGroups)
            {
                Caption = 'Toggle Groups';

                // Action to switch between available charts
                action(SwitchChartsAction)
                {
                    Caption = 'Chart Switch';
                    Image = BarChart;
                    ToolTip = 'Switch between the available charts.';

                    // Toggles between two chart options
                    trigger OnAction()
                    begin
                        if ChartSwitchOption = 1 then
                            ChartSwitchOption := 2
                        else
                            ChartSwitchOption := 1;
                        ChartOption := 1;
                        BuildChart(); // Rebuild the chart with the selected option
                        CurrPage.Update();
                    end;
                }

                // Group for toggling cue views
                group(CuesGroup)
                {
                    Caption = 'Cue View';

                    // Toggle sales details group visibility
                    action(ToggleSalesGroupAction)
                    {
                        Caption = 'Show/Hide Sales';
                        Image = ShowList;
                        ToolTip = 'Click to show or hide the sales details.';

                        // Toggle visibility of Sales Details group
                        trigger OnAction()
                        begin
                            ShowSalesGroup := not ShowSalesGroup;
                            CurrPage.Update(); // Update the page to reflect changes
                        end;
                    }

                    // Toggle realized sales group visibility
                    action(ToggleRealizedGroupAction)
                    {
                        Caption = 'Show/Hide Realized Sales';
                        Image = ShowList;
                        ToolTip = 'Click to show or hide the realized sales information.';

                        // Toggle visibility of Realized Sales group
                        trigger OnAction()
                        begin
                            ShowRealizedSalesGroup := not ShowRealizedSalesGroup;
                            CurrPage.Update(); // Update the page to reflect changes
                        end;
                    }

                    // Toggle budget details group visibility
                    action(ToggleBudgetGroupAction)
                    {
                        Caption = 'Show/Hide Budget';
                        Image = ShowList;
                        ToolTip = 'Click to show or hide the budget details.';

                        // Toggle visibility of Budget group
                        trigger OnAction()
                        begin
                            ShowBudgetGroup := not ShowBudgetGroup;
                            CurrPage.Update(); // Update the page to reflect changes
                        end;
                    }

                    // New action to reset the view to default settings
                    action(ResetViewAction)
                    {
                        Caption = 'Reset View';
                        Image = Undo;
                        ToolTip = 'Reset all view settings to their default values.';

                        trigger OnAction()
                        begin
                            // Reset variables to their default values
                            ChartOption := 2;               // Default to Cue view
                            ChartSwitchOption := 1;         // Default to first chart
                            ShowBudgetGroup := false;       // Default to hide Budget group
                            ShowRealizedSalesGroup := false; // Default to hide Realized Sales group
                            ShowSalesGroup := false;        // Default to hide Sales Details group
                            CurrPage.Update();            // Update the page to reflect changes
                        end;
                    }

                }

                // Action to refresh sales comparison data
                action(UpdateSalesComparisonDataAction)
                {
                    Caption = 'Update Data';
                    Image = Refresh;
                    ToolTip = 'Run the update to refresh sales comparison data.';

                    // Trigger to run the codeunit and update data
                    trigger OnAction()
                    begin
                        Codeunit.Run(50014); // Run codeunit to update sales comparison data
                        CurrPage.Update(); // Update the page with the new data
                    end;
                }
            }
        }
    }

    // Trigger to execute when the page is opened
    trigger OnOpenPage()
    begin
        ChartOption := 2; // Set default view to Cue view
        FetchData(); // Fetch initial data
        CurrPage.Update(); // Update the page to display fetched data
    end;

    var
        SalesCompData: Record "SalesComparisonData"; // Record to store sales comparison data
        ShowBudgetGroup: Boolean;                   // Boolean controlling visibility of budget group
        ShowRealizedSalesGroup: Boolean;            // Boolean controlling visibility of realized sales group
        ShowSalesGroup: Boolean;                    // Boolean controlling visibility of sales details group
        ChartSwitchOption: Decimal;                 // Option to toggle between chart types
        ChartOption: Integer;                       // Option to toggle between chart and cue views
        ChartLabelExternalSalesLbl: Label 'EKSTERN Sale';
        ChartLabelInternalSalesLbl: Label 'INTERN Sale';
        ChartLabelLastYTDRealizedLbl: Label 'Last YTD Sales';

        // Translation-ready variables for chart labels
        ChartLabelTotalOrdersLbl: Label 'Total Orders';
        ChartLabelTotalSalesLbl: Label 'Total Sale';
        ChartLabelYTDBudgetLbl: Label 'YTD Budget';
        ChartLabelYTDRealizedLbl: Label 'YTD Sales';
        BudgetVsActualStyle: Text[30];              // Style for the Sales vs Budget metric
        SalesIndexStyle: Text[30];                  // Style for the Sales Growth metric

    // Procedure to build the chart with the required data
    local procedure BuildChart()
    var
        TempBuffer: Record "Business Chart Buffer" temporary; // Temporary buffer to hold chart data
        i: Integer;
    begin
        TempBuffer.Initialize(); // Initialize the temporary buffer

        // Suppress warnings for using obsolete methods
#pragma warning disable AL0603
        TempBuffer.AddMeasure('Amount', 1, TempBuffer."Data Type"::Decimal, TempBuffer."Chart Type"::Column);
#pragma warning restore AL0603

        // Set the X-Axis to 'Metric'
        TempBuffer.SetXAxis('Metric', TempBuffer."Data Type"::String);

        i := 0;

        // Populate chart data based on ChartSwitchOption
        if SalesCompData.FindFirst() then
            if ChartSwitchOption = 1 then begin
                // First chart: Sales comparison metrics
                TempBuffer.AddColumn(ChartLabelTotalOrdersLbl); // Use label for 'Total Orders'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Sales Order Amount");
                i += 1;

                TempBuffer.AddColumn(ChartLabelYTDRealizedLbl); // Use label for 'YTD Sales'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total YTD Sales Amount");
                i += 1;

                TempBuffer.AddColumn(ChartLabelLastYTDRealizedLbl); // Use label for 'Last YTD Sales'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total Last YTD Sales");
                i += 1;

                TempBuffer.AddColumn(ChartLabelYTDBudgetLbl); // Use label for 'YTD Budget'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total Budget Amount");
                i += 1;
            end else begin
                // Second chart: Sales breakdown
                TempBuffer.AddColumn(ChartLabelTotalSalesLbl); // Use label for 'Total Sale'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total YTD Sales Amount");
                i += 1;

                TempBuffer.AddColumn(ChartLabelInternalSalesLbl); // Use label for 'INTERN Sale'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."YTD Sales Amount INTERN");
                i += 1;

                TempBuffer.AddColumn(ChartLabelExternalSalesLbl); // Use label for 'EKSTERN Sale'
                TempBuffer.SetValueByIndex(0, i, SalesCompData."YTD Sales Amount EKSTERN");
                i += 1;
            end;

        // Update the chart with the populated data
        TempBuffer.Update(CurrPage.Chart);
    end;

    // Procedure to fetch initial data and set styles for Sales Growth and Budget vs Actual comparison
    local procedure FetchData()
    begin
        if SalesCompData.FindFirst() then begin
            // Set style for Sales Growth (Sales Index) based on its value
            if SalesCompData."Sales Index" <= 100 then
                SalesIndexStyle := 'Unfavorable'
            else
                if (SalesCompData."Sales Index" > 100) and (SalesCompData."Sales Index" <= 104) then
                    SalesIndexStyle := 'Ambiguous'
                else
                    SalesIndexStyle := 'Favorable';

            // Set style for Budget vs Actual comparison based on its value
            if SalesCompData."Budget Vs Actual" <= 102 then
                BudgetVsActualStyle := 'Unfavorable'
            else
                BudgetVsActualStyle := 'Favorable';
        end;
    end;
}
 
page 50041 ScanpanCardPart
{
    /// <summary>
    /// Page object 50041 ScanpanCardPart.
    /// This page serves as a CardPart that contains job queue information and intercompany document status for
    /// Scanpan's companies in different regions (e.g., Denmark, Norway, and a master company).
    /// The page displays job queue failures, intercompany purchase/sales document buffers, and pending synchronization entries.
    /// </summary>


    // Additional search terms used for finding the page.
    AdditionalSearchTerms = 'Scanpan Pagepart';

    // Caption displayed for the page part.
    Caption = 'Scanpan CardPart';

    // Define the type of page as a CardPart.
    PageType = CardPart;

    // Refresh the page when it is activated.
    RefreshOnActivate = true;

    layout
    {
        // The content area layout for displaying different groups of data.
        area(Content)
        {
            // Cue group for displaying job queue data.
            cuegroup(jobque)
            {
                Caption = 'Job Queue';

                // Field for displaying failed job queue count in Denmark.
                field(JobqueFailedCountDK; JobqueueFailedCountDK)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Failed JobQueue DK';
                    StyleExpr = JobqueueStyleDK;
                    ToolTip = 'Shows the number of failed jobs in JobQueue.';

                    // Trigger to handle the drill-down action on the field.
                    trigger OnDrillDown()
                    var
                        JobQueueEntry: Record "Job Queue Entry";
                    begin
                        // Check if the company is "SCANPAN DANMARK" before proceeding.
                        if CompanyName.ToUpper() <> 'SCANPAN DANMARK' then error(ChangeCompanyErrorLbl);

                        // Set filters on job queue entries to only include non-recurring and unscheduled jobs with specific statuses.
                        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
                        JobQueueEntry.SetFilter(Scheduled, '%1', false);
                        JobQueueEntry.SetFilter(Status, '%1|%2|%3', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error, JobQueueEntry.Status::"On Hold");

                        // Open the page to display the job queue entries.
                        Page.Run(Page::"Job Queue Entries", JobQueueEntry);
                    end;
                }

                // Field for displaying failed job queue count in Norway.
                field(JobqueFailedCountNO; JobqueueFailedCountNO)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Failed JobQueue NO';
                    StyleExpr = JobqueueStyleNO;
                    ToolTip = 'Shows the number of failed jobs in JobQueue.';

                    // Trigger to handle the drill-down action on the field.
                    trigger OnDrillDown()
                    var
                        JobQueueEntry: Record "Job Queue Entry";
                    begin
                        // Check if the company is "SCANPAN NORGE" before proceeding.
                        if CompanyName.ToUpper() <> 'SCANPAN NORGE' then error(ChangeCompanyErrorLbl);

                        // Set filters on job queue entries to only include non-recurring and unscheduled jobs with specific statuses.
                        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
                        JobQueueEntry.SetFilter(Scheduled, '%1', false);
                        JobQueueEntry.SetFilter(Status, '%1|%2|%3', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error, JobQueueEntry.Status::"On Hold");

                        // Open the page to display the job queue entries.
                        Page.Run(Page::"Job Queue Entries", JobQueueEntry);
                    end;
                }

                // Field for displaying failed job queue count in the master company.
                field(JobqueFailedCountMA; JobqueueFailedCountMA)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Failed JobQueue Master';
                    StyleExpr = JobqueueStyleMA;
                    ToolTip = 'Shows the number of failed jobs in JobQueue.';

                    // Trigger to handle the drill-down action on the field.
                    trigger OnDrillDown()
                    var
                        JobQueueEntry: Record "Job Queue Entry";
                    begin
                        // Check if the company is "_MASTER" before proceeding.
                        if CompanyName.ToUpper() <> '_MASTER' then error(ChangeCompanyErrorLbl);

                        // Set filters on job queue entries to only include non-recurring and unscheduled jobs with specific statuses.
                        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
                        JobQueueEntry.SetFilter(Scheduled, '%1', false);
                        JobQueueEntry.SetFilter(Status, '%1|%2|%3', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error, JobQueueEntry.Status::"On Hold");

                        // Open the page to display the job queue entries.
                        Page.Run(Page::"Job Queue Entries", JobQueueEntry);
                    end;
                }
            }

            // Cue group for displaying intercompany document buffer information.
            cuegroup(intercompany)
            {
                Caption = 'InterCompany';

                // Field for displaying Danish purchase buffer document count.
                field(PurchaseCountDK; PurchaseDocCountDK)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'DK IIC Purchase Buffer';
                    StyleExpr = PurchaseStyleDK;
                    ToolTip = 'Shows the number of Danish Purchase Buffer documents, not processed.';

                    // Trigger to handle the drill-down action on the field.
                    trigger OnDrillDown()
                    var
                        IICBuffer: Page "ITI IIC Purch. Buf. Doc. List";
                    begin
                        if CompanyName.ToUpper() <> 'SCANPAN DANMARK' then error(ChangeCompanyErrorLbl);
                        IICBuffer.Run();
                    end;
                }

                // Field for displaying Danish sales buffer document count.
                field(SalesCountDK; SalesDocCountDK)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'DK IIC Sales Buffer';
                    StyleExpr = SalesStyleDK;
                    ToolTip = 'Shows the number of Danish Sales Buffer documents, not processed.';

                    trigger OnDrillDown()
                    var
                        IICBuffer: Page "ITI IIC S. Buffer Doc. List";
                    begin
                        if CompanyName.ToUpper() <> 'SCANPAN DANMARK' then error(ChangeCompanyErrorLbl);
                        IICBuffer.Run();
                    end;
                }

                // Field for displaying Norwegian purchase buffer document count.
                field(PurchaseCountNO; PurchaseDocCountNO)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'NO IIC Purchase Buffer';
                    StyleExpr = PurchaseStyleNO;
                    ToolTip = 'Shows the number of Norwegian Purchase Buffer documents, not processed.';

                    trigger OnDrillDown()
                    var
                        IICBuffer: Page "ITI IIC Purch. Buf. Doc. List";
                    begin
                        if CompanyName.ToUpper() <> 'SCANPAN NORGE' then error(ChangeCompanyErrorLbl);
                        IICBuffer.Run();
                    end;
                }

                // Field for displaying Norwegian sales buffer document count.
                field(SalesCountNO; SalesDocCountNO)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'NO IIC Sales Buffer';
                    StyleExpr = SalesStyleNO;
                    ToolTip = 'Shows the number of Norwegian Sales Buffer documents, not processed.';

                    trigger OnDrillDown()
                    var
                        IICBuffer: Page "ITI IIC S. Buffer Doc. List";
                    begin
                        if CompanyName.ToUpper() <> 'SCANPAN NORGE' then error(ChangeCompanyErrorLbl);
                        IICBuffer.Run();
                    end;
                }
            }

            // Cue group for displaying master data synchronization status.
            cuegroup(MasterData)
            {
                Caption = 'MasterData';

                // Field for displaying pending synchronization entries count.
                field(ITINumberOfPendingSyncEntries; ITINumberOfPendingSyncEntries)
                {
                    ApplicationArea = Basic, Suite;
                    Caption = 'Sync. entries';
                    ToolTip = 'Displays the number of pending sync. entries.';
                    StyleExpr = ITIStylePendingSyncEntries;

                    trigger OnDrillDown()
                    var
                        ITIReplicationHeader: Record "ITI Replication Header";
                    begin
                        if CompanyName.ToUpper() <> '_MASTER' then error(ChangeCompanyErrorLbl);
                        ITIReplicationHeader.SetFilter("No. of Pending Sync. Entries", '<>0');
                        Page.Run(Page::"ITI Replication List", ITIReplicationHeader);
                    end;
                }
            }
        }
    }

    // Variable definitions for handling job queue failures, document buffer counts, and styles.
    var
        JobqueueFailedCountDK: Integer;
        JobqueueStyleDK: Text;
        JobqueueFailedCountNO: Integer;
        JobqueueStyleNO: Text;
        JobqueueFailedCountMA: Integer;
        JobqueueStyleMA: Text;
        PurchaseDocCountDK: Integer;
        PurchaseDocCountNO: Integer;
        SalesDocCountDK: Integer;
        SalesDocCountNO: Integer;
        ChangeCompanyErrorLbl: Label 'Please change company first.';
        PurchaseStyleDK: Text;
        PurchaseStyleNO: Text;
        SalesStyleDK: Text;
        SalesStyleNO: Text;
        ITINumberOfPendingSyncEntries: Integer;
        ITIStylePendingSyncEntries: Text;

    // Trigger to execute when the current record is retrieved.
    trigger OnAfterGetCurrRecord()
    begin
        // Initialize styles to empty strings.
        SalesStyleDK := '';
        SalesStyleNo := '';
        PurchaseStyleDK := '';
        PurchaseStyleNO := '';
        JobqueueStyleDK := '';
        JobqueueStyleNO := '';
        JobqueueStyleMA := '';
        ITIStylePendingSyncEntries := '';

        // Refresh buffers and job queue data.
        PurchaseHeaderBuffer();
        SalesHeaderBuffer();
        JobQueueDK();
        JobQueueNO();
        JobQueueMA();
        ITINumberOfSyncEntries();
    end;

    // Local procedure to calculate job queue data for Denmark.
    local procedure JobQueueDK()
    var
        JobQueueEntry: Record "Job Queue Entry";
    begin
        JobQueueEntry.Reset();
        JobQueueEntry.ChangeCompany('SCANPAN Danmark');
        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
        JobQueueEntry.SetFilter(Scheduled, '%1', false);
        JobQueueEntry.SetFilter(Status, '%1|%2', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error);
        JobqueueFailedCountDK := JobQueueEntry.Count;

        if JobqueueFailedCountDK <> 0 then
            JobqueueStyleDK := 'Unfavorable';

        // Filter further for IIC related entries.
        JobQueueEntry.SetFilter(Status, '%1|%2|%3', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error, JobQueueEntry.Status::"On Hold");
        JobQueueEntry.SetFilter("Object Caption to Run", '*IIC*');
        JobqueueFailedCountDK += JobQueueEntry.Count;

        if JobqueueFailedCountDK <> 0 then
            JobqueueStyleDK := 'Unfavorable';
    end;

    // Local procedure to calculate job queue data for Norway.
    local procedure JobQueueNO()
    var
        JobQueueEntry: Record "Job Queue Entry";
    begin
        JobQueueEntry.Reset();
        JobQueueEntry.ChangeCompany('SCANPAN Norge');
        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
        JobQueueEntry.SetFilter(Scheduled, '%1', false);
        JobQueueEntry.SetFilter(Status, '%1|%2', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error);
        JobqueueFailedCountNO := JobQueueEntry.Count;

        if JobqueueFailedCountNO <> 0 then
            JobqueueStyleNO := 'Unfavorable';

        // Filter further for IIC related entries.
        JobQueueEntry.SetFilter(Status, '%1|%2|%3', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error, JobQueueEntry.Status::"On Hold");
        JobQueueEntry.SetFilter("Object Caption to Run", '*IIC*');
        JobqueueFailedCountNO += JobQueueEntry.Count;

        if JobqueueFailedCountNO <> 0 then
            JobqueueStyleNO := 'Unfavorable';
    end;

    // Local procedure to calculate job queue data for the master company.
    local procedure JobQueueMA()
    var
        JobQueueEntry: Record "Job Queue Entry";
    begin
        JobQueueEntry.ChangeCompany('_Master');
        JobQueueEntry.SetFilter("Recurring Job", '%1', true);
        JobQueueEntry.SetFilter(Scheduled, '%1', false);
        JobQueueEntry.SetFilter(Status, '%1|%2', JobQueueEntry.Status::Ready, JobQueueEntry.Status::Error);
        JobqueueFailedCountDK := JobQueueEntry.Count;

        if JobqueueFailedCountDK <> 0 then
            JobqueueStyleMA := 'Unfavorable';
    end;

    // Local procedure to calculate purchase header buffer counts.
    local procedure PurchaseHeaderBuffer()
    var
        ITIIICPurchaseHeaderBuffer: Record "ITI IIC Purchase Header Buffer";
        InvoiceCountNO: Integer;
    begin
        ITIIICPurchaseHeaderBuffer.ChangeCompany('SCANPAN Danmark');
        ITIIICPurchaseHeaderBuffer.Reset();
        PurchaseDocCountDK := ITIIICPurchaseHeaderBuffer.Count;

        if PurchaseDocCountDK <> 0 then
            PurchaseStyleDK := 'Unfavorable';

        // For Norway.
        ITIIICPurchaseHeaderBuffer.ChangeCompany('SCANPAN Norge');
        ITIIICPurchaseHeaderBuffer.Reset();
        PurchaseDocCountNO := ITIIICPurchaseHeaderBuffer.Count;

        if PurchaseDocCountNO <> 0 then
            PurchaseStyleNO := 'Unfavorable';

        // Check for invoices.
        ITIIICPurchaseHeaderBuffer.SetFilter("Document Type", '%1', ITIIICPurchaseHeaderBuffer."Document Type"::Invoice);
        InvoiceCountNO := ITIIICPurchaseHeaderBuffer.Count;

        if InvoiceCountNO <> 0 then begin
            PurchaseDocCountNO := InvoiceCountNO;
            PurchaseStyleNO := 'Favorable';
        end;
    end;

    // Local procedure to calculate sales header buffer counts.
    local procedure SalesHeaderBuffer()
    var
        ITIIICSalesHeaderBuffer: Record "ITI IIC Sales Header Buffer";
    begin
        ITIIICSalesHeaderBuffer.ChangeCompany('SCANPAN Danmark');
        ITIIICSalesHeaderBuffer.Reset();
        SalesDocCountDK := ITIIICSalesHeaderBuffer.Count;

        if SalesDocCountDK <> 0 then
            SalesStyleDK := 'Unfavorable';

        ITIIICSalesHeaderBuffer.ChangeCompany('SCANPAN Norge');
        ITIIICSalesHeaderBuffer.Reset();
        SalesDocCountNO := ITIIICSalesHeaderBuffer.Count;

        if SalesDocCountNO <> 0 then
            SalesStyleNO := 'Unfavorable';
    end;

    // Local procedure to calculate the number of pending sync entries.
    local procedure ITINumberOfSyncEntries()
    var
        ITIRecordSyncEntry: Record "ITI Record Sync Entry";
        ITIReplicationHeader: Record "ITI Replication Header";
    begin
        ITIStylePendingSyncEntries := '';
        ITIReplicationHeader.Reset();
        ITIReplicationHeader.ChangeCompany('_Master');
        ITIReplicationHeader.SetFilter("Has Error", '%1', true);

        if not ITIReplicationHeader.IsEmpty then begin
            ITINumberOfPendingSyncEntries := 1;
            ITIStylePendingSyncEntries := 'Unfavorable';
        end else begin
            ITIReplicationHeader.Reset();
            ITIRecordSyncEntry.Reset();
        end;
    end;
}
 





/// <summary>
/// Page Chart CustomerTopX (ID 50043).
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
page 50043 "XXXChart CustomerTopX"
{
    ApplicationArea = All;
    Caption = 'Test Chart';
    PageType = Card;
    UsageCategory = Administration;

    layout
    {
        area(Content)
        {
            //DEMO CHART
            usercontrol(Chart; "Microsoft.Dynamics.Nav.Client.BusinessChart")
            {
                ApplicationArea = All;
                trigger AddInReady()
                var
                    TempBuffer: Record "Business Chart Buffer" temporary;
                    TempCustomer: Record Customer temporary;
                    i: Integer;
                begin
                    ChartBuilder.GetTopXCustomersSalesLCY(TempCustomer, 10);

                    TempBuffer.Initialize();
                    //Index 0
#pragma warning disable AL0603
                    TempBuffer.AddMeasure('Sales', 1, TempBuffer."Data Type"::Decimal, TempBuffer."Chart Type"::Column);
#pragma warning restore AL0603
 
                    //Index 1
#pragma warning disable AL0603
                    TempBuffer.AddMeasure('Profilt', 1, TempBuffer."Data Type"::Decimal, TempBuffer."Chart Type"::Line);
#pragma warning restore AL0603

                    TempBuffer.SetXAxis('Customer', TempBuffer."Data Type"::String);
                    i := 0;
                    if TempCustomer.FindSet(false, false) then
                        repeat
                            TempCustomer.CalcFields("Sales (LCY)", "Profit (LCY)");
                            if TempCustomer."Sales (LCY)" <> 0 then begin
                                TempBuffer.AddColumn(TempCustomer.Name);
                                TempBuffer.SetValueByIndex(0, i, TempCustomer."Sales (LCY)");
                                TempBuffer.SetValueByIndex(1, i, TempCustomer."Profit (LCY)");
                                i += 1;
                            end;
                        until TempCustomer.Next() = 0;


                    TempBuffer.Update(CurrPage.Chart);
                end;
            }
        }

    }
    var
        ChartBuilder: Codeunit "ChartBuilder";

} 
/// <summary>
/// Page IICBufferStatusPart (ID 50009).
/// </summary>
/// <remarks>
/// 2023.10            Jesper Harder        053         PagePart - show Buffer Documents not processed
/// </remarks>
page 50009 "XXXIICBufferStatusPart"
{
    AdditionalSearchTerms = 'Scanpan Pagepart IIC buffer';
    Caption = 'IIC Buffer Status Page Part';
    PageType = CardPart;
    RefreshOnActivate = true;

    layout
    {
        area(Content)
        {
            cuegroup(scanpan)
            {
                Caption = 'Scanpan';
                cuegroup(cuegroup1)
                {
                    Caption = 'IIC Purchase Buffer';

                    field(PurchaseCountDK; PurchaseDocCountDK)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'DK IIC Purchase Buffer';
                        StyleExpr = PurchaseStyleDK;
                        ToolTip = 'Shows the number of Danish Purchase Buffer documents, not processed.';

                        trigger OnDrillDown()
                        var
                            IICBuffer: Page "ITI IIC Purch. Buf. Doc. List";
                        begin
                            if CompanyName <> 'SCANPAN Danmark' then error(ChangeCompanyErrorLbl);
                            IICBuffer.Run();
                        end;
                    }
                    field(SalesCountDK; SalesDocCountDK)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'DK IIC Sales Buffer';
                        StyleExpr = SalesStyleDK;
                        ToolTip = 'Shows the number of Danish Sales Buffer documents, not processed.';

                        trigger OnDrillDown()
                        var
                            IICBuffer: Page "ITI IIC S. Buffer Doc. List";
                        begin
                            if CompanyName <> 'SCANPAN Danmark' then error(ChangeCompanyErrorLbl);
                            IICBuffer.Run();
                        end;
                    }
                    field(PurchaseCountNO; PurchaseDocCountNO)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'NO IIC Purchase Buffer';
                        StyleExpr = PurchaseStyleNO;
                        ToolTip = 'Shows the number of Norwegian Purchase Buffer documents, not processed.';

                        trigger OnDrillDown()
                        var
                            IICBuffer: Page "ITI IIC Purch. Buf. Doc. List";
                        begin
                            if CompanyName <> 'SCANPAN Norge' then error(ChangeCompanyErrorLbl);
                            IICBuffer.Run();
                        end;
                    }
                    field(SalesCountNO; SalesDocCountNO)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'DK IIC Sales Buffer';
                        StyleExpr = SalesStyleNO;
                        ToolTip = 'Shows the number of Norwegian Sales Buffer documents, not processed.';

                        trigger OnDrillDown()
                        var
                            IICBuffer: Page "ITI IIC S. Buffer Doc. List";
                        begin
                            if CompanyName <> 'SCANPAN Norge' then error(ChangeCompanyErrorLbl);
                            IICBuffer.Run();
                        end;
                    }

                }
            }
        }
    }

    trigger OnAfterGetCurrRecord()
    var

    begin
        SalesStyleDK := '';
        SalesStyleNo := '';
        PurchaseStyleDK := '';
        PurchaseStyleNO := '';

        PurchaseHeaderBuffer();
        SalesHeaderBuffer();
    end;

    var
        PurchaseDocCountDK: Integer;
        PurchaseDocCountNO: Integer;

        SalesDocCountDK: Integer;
        SalesDocCountNO: Integer;
        ChangeCompanyErrorLbl: Label 'Please change company first.';
        PurchaseStyleDK: Text;
        PurchaseStyleNO: Text;
        SalesStyleDK: Text;
        SalesStyleNO: Text;

    local procedure PurchaseHeaderBuffer()
    var
        ITIIICPurchaseHeaderBuffer: Record "ITI IIC Purchase Header Buffer";
    begin
        ITIIICPurchaseHeaderBuffer.ChangeCompany('SCANPAN Danmark');
        ITIIICPurchaseHeaderBuffer.Reset();
        PurchaseDocCountDK := ITIIICPurchaseHeaderBuffer.Count;
        if PurchaseDocCountDK <> 0 then PurchaseStyleDK := 'Unfavorable';

        ITIIICPurchaseHeaderBuffer.ChangeCompany('SCANPAN Norge');
        ITIIICPurchaseHeaderBuffer.Reset();
        PurchaseDocCountNO := ITIIICPurchaseHeaderBuffer.Count;
        if PurchaseDocCountNO <> 0 then PurchaseStyleNO := 'Unfavorable';
    end;

    local procedure SalesHeaderBuffer()
    var
        ITIIICSalesHeaderBuffer: Record "ITI IIC Sales Header Buffer";
    begin
        ITIIICSalesHeaderBuffer.ChangeCompany('SCANPAN Danmark');
        ITIIICSalesHeaderBuffer.Reset();
        PurchaseDocCountDK := ITIIICSalesHeaderBuffer.Count;
        if SalesDocCountDK <> 0 then SalesStyleDK := 'Unfavorable';

        ITIIICSalesHeaderBuffer.ChangeCompany('SCANPAN Norge');
        ITIIICSalesHeaderBuffer.Reset();
        SalesDocCountNO := ITIIICSalesHeaderBuffer.Count;
        if SalesDocCountNO <> 0 then SalesStyleNO := 'Unfavorable';
    end;


}

 
page 50049 "XXXSales Comparison CardPart"
{
    /// <summary>
    /// 2024.08             Jesper Harder       076         Cue for Sales Comparison
    ///
    /// This page displays concise sales comparison metrics, including total sales orders, realized sales,
    /// budgets, distinct campaigns, sales growth percentage, and sales versus budget percentage.
    /// Users can toggle the visibility of detailed cues for Sales, Realized Sales, and Budget information.
    /// Captions have been adjusted for brevity, prioritizing keywords due to limited space in cues.
    /// </summary>

    PageType = CardPart;
    SourceTable = "SalesComparisonData";
    Caption = 'Sales Comparison';

    layout
    {
        area(content)
        {
            // Total Sales Order Amount (always visible)
            cuegroup(TotalSalesOrderGroup)
            {
                Caption = 'Total Sales Orders';

                field(TotalSalesOrderAmountField; Rec."Sales Order Amount")
                {
                    ApplicationArea = All;
                    Caption = 'Total Orders (K)';
                    ToolTip = 'The total amount of all sales orders in thousands (K).';
                    DecimalPlaces = 0;
                }
            }

            // Sales Details Group
            cuegroup(SalesDetailsGroup)
            {
                Caption = 'Sales Details';
                Visible = ShowSalesGroup;

                field(SalesOrderAmountInternField; Rec."Sales Amount INTERN")
                {
                    ApplicationArea = All;
                    Caption = 'INTERN Orders (K)';
                    ToolTip = 'Sales order amount for items with the "INTERN" inventory posting group in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(SalesOrderAmountEksternField; Rec."Sales Amount EKSTERN")
                {
                    ApplicationArea = All;
                    Caption = 'EKSTERN Orders (K)';
                    ToolTip = 'Sales order amount for items with the "EKSTERN" inventory posting group in thousands (K).';
                    DecimalPlaces = 0;
                }
            }

            // Realized Sales Group
            cuegroup(RealizedSalesGroup)
            {
                Caption = 'Realized Sales';
                Visible = ShowRealizedSalesGroup;

                // Year to Date
                field(TotalRealizedSalesYTDField; Rec."Total YTD Sales Amount")
                {
                    ApplicationArea = All;
                    Caption = 'YTD Realized (K)';
                    ToolTip = 'The total realized sales amount year-to-date in thousands (K).';
                    DecimalPlaces = 0;
                }

                field(RealizedSalesYTDInternField; Rec."YTD Sales Amount INTERN")
                {
                    ApplicationArea = All;
                    Caption = 'INTERN YTD Realized (K)';
                    ToolTip = 'Year-to-date realized sales amount for "INTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(RealizedSalesYTDEksternField; Rec."YTD Sales Amount EKSTERN")
                {
                    ApplicationArea = All;
                    Caption = 'EKSTERN YTD Realized (K)';
                    ToolTip = 'Year-to-date realized sales amount for "EKSTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }

                // Last Year
                field(TotalRealizedSalesLastYTDField; Rec."Total Last YTD Sales")
                {
                    ApplicationArea = All;
                    Caption = 'Last YTD Realized (K)';
                    ToolTip = 'The total realized sales amount for the same period last year in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(RealizedSalesLastYTDInternField; Rec."Last YTD Sales INTERN")
                {
                    ApplicationArea = All;
                    Caption = 'INTERN Last YTD Realized (K)';
                    ToolTip = 'Last years YTD realized sales for "INTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(RealizedSalesLastYTDEksternField; Rec."Last YTD Sales EKSTERN")
                {
                    ApplicationArea = All;
                    Caption = 'EKSTERN Last YTD Realized (K)';
                    ToolTip = 'Last years YTD realized sales for "EKSTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }
            }

            // Budget Details Group
            cuegroup(BudgetGroup)
            {
                Caption = 'Budget Details';
                Visible = ShowBudgetGroup;

                field(TotalBudgetAmountField; Rec."Total Budget Amount")
                {
                    ApplicationArea = All;
                    Caption = 'YTD Budget Total (K)';
                    ToolTip = 'The total budgeted sales amount year-to-date in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(BudgetAmountInternField; Rec."Budget Amount INTERN")
                {
                    ApplicationArea = All;
                    Caption = 'INTERN YTD Budget (K)';
                    ToolTip = 'Year-to-date budgeted amount for "INTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }
                field(BudgetAmountEksternField; Rec."Budget Amount EKSTERN")
                {
                    ApplicationArea = All;
                    Caption = 'EKSTERN YTD Budget (K)';
                    ToolTip = 'Year-to-date budgeted amount for "EKSTERN" items in thousands (K).';
                    DecimalPlaces = 0;
                }
            }

            // Additional Metrics Group (always visible)
            cuegroup(AdditionalMetricsGroup)
            {
                Caption = 'Additional Metrics';

                field(DistinctCampaignsField; Rec."Distinct Campaigns")
                {
                    ApplicationArea = All;
                    Caption = 'Distinct Campaigns';
                    ToolTip = 'The number of distinct campaigns used across sales orders.';
                }

                field(SalesIndexField; Rec."Sales Index")
                {
                    ApplicationArea = All;
                    Caption = 'Sales Growth (%)';
                    ToolTip = 'The percentage growth of year-to-date sales compared to the same period last year.';
                    StyleExpr = SalesIndexStyle;
                }

                field(BudgetVsActualField; Rec."Budget Vs Actual")
                {
                    ApplicationArea = All;
                    Caption = 'Sales vs. Budget (%)';
                    ToolTip = 'The percentage comparison of YTD actual sales against the YTD budgeted sales.';
                    StyleExpr = BudgetVsActualStyle;
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            group(ToggleGroups)
            {
                Caption = 'Toggle Groups';

                action(ToggleSalesGroupAction)
                {
                    Caption = 'Show/Hide Sales';
                    ToolTip = 'Click to show or hide the sales details.';
                    Image = ShowList;

                    trigger OnAction()
                    begin
                        ShowSalesGroup := not ShowSalesGroup;
                        CurrPage.Update();
                    end;
                }

                action(ToggleRealizedGroupAction)
                {
                    Caption = 'Show/Hide Realized Sales';
                    ToolTip = 'Click to show or hide the realized sales information.';
                    Image = ShowList;

                    trigger OnAction()
                    begin
                        ShowRealizedSalesGroup := not ShowRealizedSalesGroup;
                        CurrPage.Update();
                    end;
                }

                action(ToggleBudgetGroupAction)
                {
                    Caption = 'Show/Hide Budget';
                    ToolTip = 'Click to show or hide the budget details.';
                    Image = ShowList;

                    trigger OnAction()
                    begin
                        ShowBudgetGroup := not ShowBudgetGroup;
                        CurrPage.Update();
                    end;
                }
            }

            action(UpdateSalesComparisonDataAction)
            {
                Caption = 'Update Data';
                ToolTip = 'Run the update to refresh sales comparison data.';
                Image = Refresh;

                trigger OnAction()
                begin
                    Codeunit.Run(50014); // Run the codeunit to update the sales comparison data
                    CurrPage.Update();
                end;
            }
        }
    }

    var
        SalesIndexStyle: Text[30];
        BudgetVsActualStyle: Text[30];
        ShowSalesGroup: Boolean;
        ShowRealizedSalesGroup: Boolean;
        ShowBudgetGroup: Boolean;

    trigger OnOpenPage()
    begin
        // Initialize the visibility variables
        ShowSalesGroup := false;
        ShowRealizedSalesGroup := false;
        ShowBudgetGroup := false;
    end;

    trigger OnAfterGetRecord()
    begin
        // Set the style based on the Sales Index
        if Rec."Sales Index" <= 100 then
            SalesIndexStyle := 'Unfavorable'
        else
            if (Rec."Sales Index" > 100) and (Rec."Sales Index" <= 104) then
                SalesIndexStyle := 'Ambiguous'
            else
                SalesIndexStyle := 'Favorable';

        // Set the style based on the Budget vs Actual
        if Rec."Budget Vs Actual" <= 100 then
            BudgetVsActualStyle := 'Unfavorable'
        else
            BudgetVsActualStyle := 'Favorable';
    end;
}
 
page 50052 "XXXSales Comparison Chart Part"
{
    /// <summary>
    /// 2024.08             Jesper Harder       076         Sales Comparison Chart Part
    ///
    /// This page displays a chart visualizing key sales comparison metrics from the SalesComparisonData table.
    /// It allows switching between two charts: Sales Comparison Metrics and Sales Breakdown.
    /// </summary>

    PageType = CardPart;
    ApplicationArea = All;
    Caption = 'Sales Comparison Chart';
    UsageCategory = Administration;

    layout
    {
        area(Content)
        {
            // Chart displaying sales comparison metrics
            usercontrol(Chart; "Microsoft.Dynamics.Nav.Client.BusinessChart")
            {
                ApplicationArea = All;

                trigger AddInReady()
                begin
                    BuildChart();
                end;
            }
        }
    }

    actions
    {
        area(processing)
        {
            action(SwitchChartAction)
            {
                Caption = 'Switch Chart';
                Image = BarChart;
                ToolTip = 'Switch between the available charts.';
                trigger OnAction()
                begin
                    if ChartOption = 1 then
                        ChartOption := 2
                    else
                        ChartOption := 1;

                    BuildChart();
                end;
            }
        }
    }

    var
        SalesCompData: Record "SalesComparisonData";
        ChartOption: Integer;

    trigger OnOpenPage()
    begin
        ChartOption := 0; // Initialize to display the first chart
    end;

    local procedure BuildChart()
    var
        TempBuffer: Record "Business Chart Buffer" temporary;
        i: Integer;
    begin
        TempBuffer.Initialize();

        // Suppress warning for using obsolete methods
#pragma warning disable AL0603
        // Set the chart title based on the selected chart

        /*
                if ChartOption = 1 then
                    TempBuffer.Title('dd') SetTitle('Sales Comparison Metrics')
                else
                TempBuffer.SetTitle('Sales Breakdown');
        */

        // Add a measure called 'Amount' of type Decimal, displayed as a Column chart
        TempBuffer.AddMeasure('Amount', 1, TempBuffer."Data Type"::Decimal, TempBuffer."Chart Type"::Column);
#pragma warning restore AL0603

        // Set the X-Axis to 'Metric' of type String
        TempBuffer.SetXAxis('Metric', TempBuffer."Data Type"::String);

        i := 0;

        // Assuming there's only one record in SalesComparisonData
        if SalesCompData.FindFirst() then
            if ChartOption = 1 then begin
                // First Chart: Sales Comparison Metrics
                TempBuffer.AddColumn('Total Orders');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Sales Order Amount");
                i += 1;

                TempBuffer.AddColumn('YTD Sales');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total YTD Sales Amount");
                i += 1;

                TempBuffer.AddColumn('Last YTD Sales');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total Last YTD Sales");
                i += 1;

                TempBuffer.AddColumn('YTD Budget');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total Budget Amount");
                i += 1;
            end else begin
                // Second Chart: Sales Breakdown
                TempBuffer.AddColumn('Total Sale');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."Total YTD Sales Amount");
                i += 1;

                TempBuffer.AddColumn('INTERN Sale');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."YTD Sales Amount INTERN");
                i += 1;

                TempBuffer.AddColumn('EKSTERN Sale');
                TempBuffer.SetValueByIndex(0, i, SalesCompData."YTD Sales Amount EKSTERN");
                i += 1;
            end;

        // Update the chart with the data in TempBuffer
        TempBuffer.Update(CurrPage.Chart);
    end;
}
 

pageextension 50101 "AccountingManagerRoleCenter" extends "Accounting Manager Role Center"
{
    /// <summary>
    /// PageExtension AccountingManagerRoleCenter (ID 50101) extends the "Accounting Manager Role Center".
    /// 
    /// This page extension adds custom parts for the Scanpan overview and a tile that highlights customers who have exceeded their credit limit.
    /// 
    /// Change Log:
    /// 2024.06    Jesper Harder    070    Added Customers Over Credit Limit TILE
    /// </summary>

    layout
    {
        addfirst(rolecenter)
        {
            /// <summary>
            /// This part adds a custom card part specific to Scanpan, which provides a quick overview of relevant Scanpan data.
            /// </summary>
            part(ScanpanCardPart; ScanpanCardPart)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan';
            }

            /// <summary>
            /// This part adds a tile displaying customers who are over their credit limit.
            /// It helps Accounting Managers quickly identify customers that require follow-up due to credit overages.
            /// </summary>
            part(CustomerOverCreditLimit; CustomersOverCreditLimit)
            {
                ApplicationArea = All;
                Caption = 'Customers Over Credit Limit';
            }
        }
    }
}
 
/// <summary>
/// PageExtension AdminRoleCenterExtSC (ID 50000) extends Record Administrator Role Center.
/// </summary>
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2023.04.04          Jesper Harder       021         Shows debuginfo for inconsistent Sales Lines and Transport Order Lines
/// 2023.04.18          Jesper Harder       024         SalesOrderForm WebServices used in Excel Sales Order Forms.
/// 2024.08             Jesper Harder       076         Cue for Sales Comparison
///
/// </remarks>

pageextension 50000 "AdminRoleCenterExtSC" extends "Administrator Role Center"
{
    layout
    {

        addfirst(rolecenter)
        {
            part(ScanpanCardPart; ScanpanCardPart)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan';
            }
            //076
            part(SalesCompAndRealized; "SalesCompareAndRealized")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan Sales';
            }
            part(CustomerOverCreditLimit; "CustomersOverCreditLimit")
            {
                ApplicationArea = All;
                Caption = 'Customers Over Credit Limit';
            }

        }
    }
    actions
    {
        moveafter("P&urchase Analysis"; "&Sales Analysis")
        addfirst(sections)
        {
            group(Group1)
            {
                Caption = 'SCANPAN';
                Image = "List";
                ToolTip = 'Techincal SCANPAN';
                group(Group2)
                {
                    Caption = 'System Information';
                    ToolTip = 'Collection of System Information';

                    /*
                    action("Debug ShipIT")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Debug ShipIT';
                        Image = AboutNav;
                        RunObject = Page "ShipITdebug";
                        ToolTip = 'Shows inconsistent sales and transport order lines.';
                    }
                    */
                    action("License Information")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'License Information List';
                        Image = AboutNav;
                        RunObject = Page BC_LICENSE_INFORMATION_SC;
                        ToolTip = 'Show BC License Information List';
                    }
                    action("License Persionssion")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'License Persionssion List';
                        Image = AboutNav;
                        RunObject = Page "BC_LICENSE_PERMISSION_SC";
                        ToolTip = 'Show License Permission List';
                    }
                }
                group(Group3)
                {
                    Caption = 'WebServices';
                    ToolTip = 'WebServices for various purposes.';

                    action("Web Services")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Web Services';
                        Image = ServiceSetup;
                        RunObject = page "Web Services";
                        ToolTip = 'View all Web Services.';
                    }
                    action("Pricelist Item Source Data")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'WebService Pricelist Source Data';
                        Image = PriceAdjustment;
                        RunObject = page "WebServiceSalesPriceListSource";
                        ToolTip = 'Base for extracting Item Data to external calculation.';
                    }
                    action("Sales Orderform Items")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'WebService Sales Orderform Items';
                        Image = ItemWorksheet;
                        RunObject = page "WebServiceOrderFormItems";
                        ToolTip = 'Base for extracting Item Data to be used in Sales Orderforms.';
                    }
                    action("Sales Orderform Customer")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'WebService Sales Orderform Customer';
                        Image = ItemWorksheet;
                        RunObject = page "WebServiceOrderFormCustomer";
                        ToolTip = 'Base for extracting Customer Data to be used in Sales Orderforms.';
                    }
                }
            }
        }
    }
}
 





/// <summary>
/// Page SCANPANExtSalesRoleCenter (ID 50016).
/// </summary>
/// 
/// <remarks>
/// 
///  2023.03.08                 Jesper Harder               0292        Rollecenter for Eksterne sælgere og agenter.
/// 
/// </remarks>  
page 50016 "ExtSalesRoleCenter"
{
    Caption = 'Sales Ext Role Center';
    PageType = RoleCenter;
    layout
    {
        area(RoleCenter)
        {

            part(Part1; "ExtSalesLinesSC")
            {
                ApplicationArea = Basic, Suite;
                UpdatePropagation = Both;

            }

            part(Part2; "ExtSalesItemListSC")
            {
                ApplicationArea = Basic, Suite;
                UpdatePropagation = Both;
            }
        }
    }



    actions
    {
        area(Sections)
        {
        }

        area(Embedding)
        {

            action(Action1)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Salesline';
                Image = Sales;
                RunObject = Page "ExtSalesLinesSC";
                ToolTip = 'Shows Saleslines for current user.';
            }

            action(Action2)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Items';
                Image = Sales;
                RunObject = Page "ExtSalesItemListSC";
                ToolTip = 'Shows Items for current user.';
            }

        }

        area(Processing)
        {
        }

        area(Creation)
        {
        }

        area(Reporting)
        {
        }
    }
}

// Creates a profile that uses the Role Center
profile _EXTSALES
{
    ProfileDescription = 'Rolecenter for Ext Salespersons.';
    RoleCenter = "ExtSalesRoleCenter";
    Caption = 'EXT SALES';
}
 

pageextension 50020 "OrderProcessorRoleCenter" extends "Order Processor Role Center"
{
    /// <summary>
    /// PageExtension OrderProcessorRoleCenter (ID 50020) extends Record Order Processor Role Center.
    /// </summary>
    /// <remarks>
    ///
    /// Version list
    /// 2022.12            Jesper Harder        0193        Added modifications
    /// 2023.01            Jesper Harder        0193        Added Claims Import report
    /// 2023.04            Jesper Harder        025         Order Processor Role Center Hide various actionsHide various actions
    /// 2024.06             Jesper Harder       070         Customers Over Credit Limit TILE
    /// 2024.08             Jesper Harder       076         Cue for Sales Comparison
    /// </remarks>

    layout
    {
        addafter(Control104)
        {
            //076
            part(SalesCompAndRealized; "SalesCompareAndRealized")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan Sales';
            }
            part(ScanpanProcessesCardPart; ScanpanCardPart)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan Process status';
            }
            /// 2024.06             Jesper Harder       070         Customers Over Credit Limit TILE
            part(CustomerOverCreditLimit; "CustomersOverCreditLimit")
            {
                ApplicationArea = All;
                Caption = 'Customers Over Credit Limit';
            }
        }
    }

    actions
    {
        //025
        modify("Item Journals") { Visible = false; }
        modify("SalesJournals") { Visible = false; }
        modify(CashReceiptJournals) { Visible = false; }
        modify("Transfer Orders") { Visible = false; }
        addlast(sections)
        {
            group("SCANPAN")
            {
                Caption = 'SCANPAN';
                Image = "List";
                ToolTip = 'Shortcuts SCANPAN';
                group("Campaign related")
                {
                    Caption = 'Campaigns';
                    ToolTip = 'Campaign Shortcuts';
                    action("Campaigns")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Campaign List';
                        Image = Campaign;
                        RunObject = Page "Campaign List";
                        ToolTip = 'Show Campaign List';
                    }
                    action("Campaign Segments")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Campaign Segment groups';
                        Image = Campaign;
                        RunObject = Page "Segment List";
                        ToolTip = 'Show Campaign Segment groups ';
                    }
                    action("Campaign Mail Groups")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Campaign Mail groups';
                        Image = Campaign;
                        RunObject = Page "Mailing Groups";
                        ToolTip = 'Show Campaign Mail groups ';
                    }
                }
                group("Continia related")
                {
                    Caption = 'Continia';
                    ToolTip = 'Continia Shortcuts';

                    action("Document Capture")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Document Capture';
                        Image = Customer;
                        RunObject = Page "CDC Document Categories";
                        ToolTip = 'Åbner for indskannede dokumenter pr. forretningsområde';
                    }
                }
                group("Claims related")
                {
                    Caption = 'Claims';
                    ToolTip = 'Claims';
                    action("Claims")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Claims sync.status';
                        Image = Administration;
                        RunObject = Page "NOTOClaims";
                        ToolTip = 'Show Syncronized from Claims Web';
                    }
                    action("Import Claims")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Import Claims';
                        Image = Administration;
                        RunObject = Report "NOTO Import Claims";
                        ToolTip = 'Import Claims from Web.';
                    }
                }
                group("Sales related")
                {
                    Caption = 'Sales';
                    ToolTip = 'Hurtig genvej til særlige SCANPAN salgsgenveje.';
                    action("Aut. deleted backorders")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Aut. deleted backorders';
                        Image = Sales;
                        RunObject = Page "NOTO Deleted Sales Orders Info";
                        ToolTip = 'Shows a list of automatically deltede backorders';
                    }
                    action("Sales Line")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sales Line';
                        Image = Sales;
                        RunObject = Page "SalesLine";
                        ToolTip = 'Shows all Sales Lines and array of filters.';
                    }
                    action("IC Tracking")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Inter Company Tracking';
                        Image = Sales;
                        RunObject = Page IICTracking_BC;
                        ToolTip = 'Shows Tracking information from DK+NO Inter Company.';
                    }
                }
                group("Sales Reports")
                {
                    Caption = 'Sales Reports';
                    ToolTip = 'Collection of Sales related reports.';
                    action("Address Label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Address Labels';
                        Image = Report;
                        RunObject = Report "Adresselabel";
                        ToolTip = 'Prints Address labels from Customer, Vendor, Manually.';
                    }
                    action("DebitorAddresses")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Debitor Addresses';
                        Image = Campaign;
                        RunObject = report DebitorAddress;
                        ToolTip = 'Print or export to Excel, Debitor adresses and emails.';
                    }

                    action("Customs Declaration")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Customs Declaration';
                        Image = Report;
                        RunObject = Report "Customs Declaration";
                        ToolTip = 'Prints detailed Item information.';
                    }
                    action("Sales Orderlines")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Sales Orderlines';
                        Image = Report;
                        RunObject = Report "Ordrebeholdning";
                        ToolTip = 'Prints all orderlines aggregated.';
                    }
                    action("Sales Pricelist")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Sales  Pricelist';
                        Image = Report;
                        RunObject = Report "Salgsprisliste";
                        ToolTip = 'Prints Sales Pricelists.';
                    }
                }
            }
        }
    }
}
 



/// <summary>
/// PageExtension ProdPlannerRoleCenterExtSC (ID 50028) extends Record Production Planner Role Center.
/// </summary>
/// 
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>

pageextension 50028 "ProdPlannerRoleCenter" extends "Production Planner Role Center"
{
    layout
    {
        addfirst(rolecenter)
        {
            //076
            part(SalesCompAndRealized; "SalesCompareAndRealized")
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan Sales';
            }
        }
    }
    actions
    {
        addlast(sections)
        {
            group("SCANPAN")
            {
                Caption = 'SCANPAN';
                Image = "List";
                ToolTip = 'Shortcuts SCANPAN';
                group("Warehouse Reports")
                {
                    Caption = 'Production Reports';
                    ToolTip = 'Collection of Production related reports.';
                    action("ReportAddress Label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Pallet label';
                        Image = Report;
                        RunObject = Report "Scanpan Pallelabel";
                        ToolTip = 'Prints Labels used on wrapped pallets.';
                    }
                    action("ReportProdControllingRoutingLine")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Production Routing Priority';
                        ToolTip = 'Prints a production priority list.';
                        Image = Report;
                        RunObject = Report ProductionControllingPriority;
                    }
                }
                group("Controlling Pages")
                {
                    Caption = 'Production Controlling';
                    ToolTip = 'Tools collection for controlling the production.';

                    action("ProdControllingRoutingLine ")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'SCANPAN Production Controlling Routing List';
                        ToolTip = 'Executes the SCANPAN Production Controlling Routing List action.';
                        Image = ListPage;
                        RunObject = page ProdControllingRoutingLine;
                    }
                }
            }
        }
    }
}

 


/// <summary>
/// PageExtension SCANPAN Whse. W. WMS Role Cent (ID 50026) extends Record Whse. WMS Role Center.
/// </summary>
/// 
/// <remarks>/// 
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2023.03.18          Jesper Harder       009         Bin Content. Functionality to identify potiential Transfer Orders 
/// 2024.07             Jesper Harder       072         Pallet Manifest v2 fetch from new tasklet tables and use PostedSalesShipment as base table
/// 
/// </remarks>

pageextension 50026 "WhseWorkerWMSRoleCenterExtSC" extends "Whse. Worker WMS Role Center"
{

    layout
    {

        addfirst(rolecenter)
        {
            part(ScanpanCardPart; ScanpanCardPart)
            {
                ApplicationArea = Basic, Suite;
                Caption = 'Scanpan';
            }
        }
    }

    actions
    {
        addfirst(sections)
        {
            group("SCANPAN")
            {
                Caption = 'SCANPAN';
                Image = "List";
                ToolTip = 'Shortcuts SCANPAN';

                group("WhseToolSet")
                {
                    Caption = 'Warehouse Tools';
                    ToolTip = 'Collection of Warehouse tools.';

                    action("Warehouse Shipment List")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Warehouse Shipment List';
                        Image = Warehouse;
                        RunObject = Page "Warehouse Shipment List";
                        ToolTip = 'List and Create Scanpan Warehouse Shipments.';
                    }
                    action("Warehouse Picks")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Warehouse Shipment List';
                        Image = PickLines;
                        RunObject = Page "Warehouse Picks";
                        ToolTip = 'List and Create Scanpan Warehouse Shipments.';

                    }
                    action("Pick Worksheet")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Pick Worksheet';
                        Image = Warehouse;
                        RunObject = Page "Pick Worksheet";
                        ToolTip = 'Create picking linje for all Shipments.';
                    }
                    action("Warehouse Pick")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Warehouse Pick List';
                        Image = Warehouse;
                        RunObject = Page "Warehouse Picks";
                        ToolTip = 'Pickorders awaiting handling.';
                    }

                    //SHIPITREMOVE
                    /*
                    action("IDYS Transport Order List")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Transport Orders';
                        Image = Warehouse;
                        RunObject = Page "IDYS Transport Order List";
                        ToolTip = 'Transport Orders and Transsmart link.';
                    }
                    */
                    action("Posted Whse. Shipment List")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Posted Whse. Shipment List';
                        Image = Warehouse;
                        RunObject = Page "Posted Whse. Shipment List";
                        ToolTip = 'List of Posted Warehouse Shipments.';
                    }
                    action("Posted Sales Shipments")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Posted Sales Shipments';
                        Image = Warehouse;
                        RunObject = Page "Posted Sales Shipments";
                        ToolTip = 'List of Posted Sales Shipments.';
                    }
                    action("Bin Contents1")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Bin Contents';
                        Image = Warehouse;
                        RunObject = Page "Bin Contents";
                        ToolTip = 'List of Bin Contents.';
                    }

                }
                group("Warehouse Reports")
                {
                    Caption = 'Warehouse Reports';
                    ToolTip = 'Collection of Warehouse related reports.';
                    action("Address Label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Address Labels';
                        Image = Report;
                        RunObject = Report "Adresselabel";
                        ToolTip = 'Prints Address labels from Customer, Vendor, Manually.';
                    }
                    action("Shelf Face label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Shelf face';
                        Image = Report;
                        RunObject = Report "Hyldelabel";
                        ToolTip = 'Prints Shelf Face labels.';
                    }
                    action("Item label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Item Label';
                        Image = Report;
                        RunObject = Report Varelabel;
                        ToolTip = 'Prints Item labels.';
                    }
                    action("Licenseplate")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Licenseplate';
                        Image = Report;
                        RunObject = Report "Licenseplate";
                        ToolTip = 'Prints Licenseplates used with Tasklet.';
                    }

                    //072
                    action("Shipment inventory")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Shipment inventory';
                        Image = Report;
                        RunObject = Report PalletShipmentReport;
                        ToolTip = 'Prints Shipment Pallet inventory.';
                    }
                    action("Pallet label")
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Print Pallet Label';
                        Image = Report;
                        RunObject = Report "Scanpan Pallelabel";
                        ToolTip = 'Prints labels for wrapped pallets.';
                    }




                }
            }

        }

    }
}
 




/// <summary>
/// Query Addresses (ID 50004).
/// </summary>
/// <remarks>
/// 2023.08             Jesper Harder       046         Addresses Customer and Vendor
/// </remarks>
query 50004 "AddressesCustomer"
{

    Caption = 'Displays all Customer addresses.';
    QueryType = Normal;
    Permissions =
        tabledata Customer = R,
        tabledata "Ship-to Address" = R;

    elements
    {
        dataitem(Customer; Customer)
        {
            column("CustomerNo"; "No.")
            {
                Caption = 'Customer No.';
            }
            column("CustomerName"; Name)
            {
                Caption = 'Customer Name';
            }
            column(CustomerAddress1; Address)
            {
                Caption = 'Customer Address 1';
            }
            column(CustomerAddress2; "Address 2")
            {
                Caption = 'Customer Address 2';
            }
            column(CustomerPostCode; "Post Code")
            {
            }
            column(CustomerCity; City)
            {
            }
            column(CustomerCountryRegionCode; "Country/Region Code")
            {
            }
            column(CustomerCounty; County)
            {
            }
            column(CustomerEMail; "E-Mail")
            {
            }
            column(CustomerPhoneNo; "Phone No.")
            {
            }
            column(CustomerContact; Contact)
            {
            }
            column(CustomerMobilePhoneNo; "Mobile Phone No.")
            {
            }
            column(CustomerShipmentMethodCode; "Shipment Method Code")
            {
            }
            column(CustomerShippingAgentCode; "Shipping Agent Code")
            {
            }
            column(CustomerShippingAgentServiceCode; "Shipping Agent Service Code")
            {
            }
            dataitem(CustomerShipTox; "Ship-to Address")
            {
                DataItemLink = "Customer No." = Customer."No.";
                SqlJoinType = LeftOuterJoin;

                column(ShipToCode; Code)
                {
                    Caption = 'Customer Ship-To Code';
                }
                column("ShipToName"; Name)
                {
                    Caption = 'Customer Ship-To Name';
                }
                column(ShipToAddress; Address)
                {
                }
                column(ShipToAddress2; "Address 2")
                {
                }
                column(ShipToPostCode; "Post Code")
                {
                }
                column(ShipToCity; City)
                {
                }
                column(ShipToCountryRegionCode; "Country/Region Code")
                {
                }
                column(ShipToCounty; County)
                {
                }
                column(ShipToCustomerNo; "Customer No.")
                {
                }
                column(ShipToEMail; "E-Mail")
                {
                }
                column(ShipToPhoneNo; "Phone No.")
                {
                }
                column(ShipToContact; Contact)
                {
                }
                column(ShipToShippingAgentCode; "Shipping Agent Code")
                {
                }
                column(ShipToShipmentMethodCode; "Shipment Method Code")
                {
                }
                column(ShipToShippingAgentServiceCode; "Shipping Agent Service Code")
                {
                }
            }
        }
    }
} 




/// <summary>
/// Query Addresses (ID 50005).
/// </summary>
/// <remarks>
/// 2023.08             Jesper Harder       046         Addresses Customer and Vendor
/// </remarks> 
query 50005 "AddressesVendor"
{

    Caption = 'Displays all Vendor addresses.';
    QueryType = Normal;
    Permissions =
        tabledata Vendor = R;

    elements
    {
        dataitem(Vendor; Vendor)
        {
            column("VendorNo"; "No.")
            {
                Caption = 'Vendo No.';
            }
            column("VendorName"; Name)
            {
                Caption = 'Vendor Name';
            }
        }
    }
} 



/// <summary>
/// Query ProdRoutingLines (ID 50003).
/// </summary>
/// <remarks>
/// 2023.05.11                      Jesper Harder                           030     List All Routing Lines
/// 2023.10                         Jesper Harder                           001     Production Controlling, RoutingLines Priority, Short Comments
/// </remarks>
query 50003 "ProdRoutingLinesList"
{
    Caption = 'Scanpan Production Order Routinglines';
    QueryType = Normal;
    Permissions =
        tabledata "Routing Header" = R,
        tabledata "Routing Line" = R;

    elements
    {
        dataitem(RoutingHeader; "Routing Header")
        {
            column(No; "No.")
            {
            }
            column(Description; Description)
            {
            }
            column("Type"; "Type")
            {
            }
            column(Status; Status)
            {
            }
            column(LastDateModified; "Last Date Modified")
            {
            }
            column(Comment; Comment)
            {
            }
            dataitem(RoutingLine; "Routing Line")
            {
                DataItemLink = "Routing No." = RoutingHeader."No.";

                column(OperationNo; "Operation No.")
                {
                }
                column("Line_Type"; "Type")
                {
                }
                column(Line_No; "No.")
                {
                }
                column(Line_Description; Description)
                {
                }
                column(RoutingLinkCode; "Routing Link Code")
                {
                }
                column(SetupTime; "Setup Time")
                {
                }
                column(RunTime; "Run Time")
                {
                }
                column(RunTimeUnitofMeasCode; "Run Time Unit of Meas. Code")
                {
                }
                column(WaitTime; "Wait Time")
                {
                }
                column(MoveTime; "Move Time")
                {
                }
                column(FixedScrapQuantity; "Fixed Scrap Quantity")
                {
                }
                column(ScrapFactor; "Scrap Factor %")
                {
                }
                column(ConcurrentCapacities; "Concurrent Capacities")
                {
                }
                column(SendAheadQuantity; "Send-Ahead Quantity")
                {
                }
                column(UnitCostper; "Unit Cost per")
                {
                }
                column(RoutingPriority; "Routing Priority")
                {
                }

            }
        }
    }

    trigger OnBeforeOpen()
    begin
    end;
}
 
/// <summary>
/// Query QueryTest (ID 50001).
/// </summary>
/// <remarks>
/// 2023.05.01              Jesper Harder                       028     SalesCommision
/// </remarks>
query 50002 "Query SalesCreditNote" 
{
    Caption = 'Query Sales Commission';
    QueryType = Normal;

    elements
    {
        dataitem(Customer; Customer)
        {
            column(CustomerNo; "No.")
            {
                Caption = 'Customer No.';
            }
            column(CustomerName; Name)
            {
                Caption = 'Customer Name';
            }
            dataitem(Sales_Cr_Memo_Header;"Sales Cr.Memo Header")
            {

                DataItemLink = "Bill-to Customer No." = Customer."No.";
                filter(Posting_Date; "Posting Date") { }
                column(InvoiceNo; "No.")
                {
                    Caption = 'Invoice No.';
                }
                column(InvoiceSalespersonCode; "Salesperson Code")
                {
                    Caption = 'Invoice Salesperson Code';
                }
                column(Currency_Code; "Currency Code")
                {
                    Caption = 'Invoice Currency Code';
                }
                column(Currency_Factor; "Currency Factor")
                {
                    Caption = 'Invoice Currency Factor';
                }
                column(PostingDate; "Posting Date")
                {
                }

                dataitem(Salesperson_Purchaser; "Salesperson/Purchaser")
                {
                    DataItemLink = Code = Sales_Cr_Memo_Header."Salesperson Code";
                    column("Code"; "Code")
                    {
                    }
                    column(Name; Name)
                    {
                    }
                    column(Commission; "Commission %")
                    {
                    }
                    dataitem(InvoiceLine; "Sales Cr.Memo Line")
                    {
                        DataItemLink = "Document No." = Sales_Cr_Memo_Header."No.";
                        DataItemTableFilter = Type = const(Item);
                        column(Amount; Amount)
                        {
                            Method = Sum;
                        }
                        dataitem(Campaign; Campaign)
                        {
                            DataItemLink = "No." = InvoiceLine."Document No.";
                            column(No_; "No.")
                            { }
                            column(Description; Description)
                            { }
                            column(Starting_Date; "Starting Date")
                            { }
                            column(Ending_Date; "Ending Date")
                            { }
                        }
                    }
                }
            }
        }
    }
    trigger OnBeforeOpen()
    begin
    end;
}
 
/// <summary>
/// Query QueryTest (ID 50001).
/// </summary>
/// <remarks>
/// 2023.05.01              Jesper Harder                       028     SalesCommision
/// </remarks>
query 50001 "Query SalesInvoice" 
{
    Caption = 'Query Sales Commission';
    Permissions =
        tabledata Customer = R,
        tabledata "Sales Invoice Header" = R,
        tabledata "Sales Invoice Line" = R;
    QueryType = Normal;

    elements
    {
        dataitem(Customer; Customer)
        {
            column(CustomerNo; "No.")
            {
                Caption = 'Customer No.';
            }
            column(CustomerName; Name)
            {
                Caption = 'Customer Name';
            }
            dataitem(Sales_Invoice_Header; "Sales Invoice Header")
            {

                DataItemLink = "Bill-to Customer No." = Customer."No.";
                filter(Posting_Date; "Posting Date") { }
                column(InvoiceNo; "No.")
                {
                    Caption = 'Invoice No.';
                }
                column(InvoiceSalespersonCode; "Salesperson Code")
                {
                    Caption = 'Invoice Salesperson Code';
                }
                column(Currency_Code; "Currency Code")
                {
                    Caption = 'Invoice Currency Code';
                }
                column(Currency_Factor; "Currency Factor")
                {
                    Caption = 'Invoice Currency Factor';
                }
                column(PostingDate; "Posting Date")
                {
                }

                dataitem(Salesperson_Purchaser; "Salesperson/Purchaser")
                {
                    DataItemLink = Code = Sales_Invoice_Header."Salesperson Code";
                    column("Code"; "Code")
                    {
                    }
                    column(Name; Name)
                    {
                    }
                    column(Commission; "Commission %")
                    {
                    }
                    dataitem(SalesInvoiceLine; "Sales Invoice Line")
                    {
                        DataItemLink = "Document No." = Sales_Invoice_Header."No.";
                        DataItemTableFilter = Type = const(Item);
                        column(Amount; Amount)
                        {
                            Method = Sum;
                        }
                        dataitem(Campaign; Campaign)
                        {
                            DataItemLink = "No." = SalesInvoiceLine."Used Campaign NOTO";
                            column(No_; "No.")
                            { }
                            column(Description; Description)
                            { }
                            column(Starting_Date; "Starting Date")
                            { }
                            column(Ending_Date; "Ending Date")
                            { }
                        }
                    }
                }
            }
        }
    }
    trigger OnBeforeOpen()
    begin
    end;
}
 

/// <summary>
/// Query SalesOrderForm PriceList (ID 50000).
/// </summary>
/// <remarks>
/// https://community.dynamics.com/business/f/dynamics-365-business-central-forum/471027/group-by-in-al-query-like-sql
/// https://yzhums.com/14547/
/// https://learn.microsoft.com/en-us/dynamics365/business-central/dev-itpro/webservices/use-filter-expressions-in-odata-uris
/// http://srvbcapp1.scanpan.dk:7148/BC_DRIFT/ODataV4/Company('SCANPAN%20Danmark')/SalesprislisteKildeData?$filter=No%20eq%20%2700104815%27
/// ?$filter=LanguageCode%20eq%20%27DEU%27%20and%20AssetNo%20eq%20%2728001200%27
/// 
/// </remarks>
query 50000 "SalesOrderForm PriceList"
{
    Caption = 'SalesOrderFormPriceList';
    //EntityName = 'SalesOrderFormItems';
    //EntitySetName = 'SalesOrderFormItems';
    //QueryType = API;


    elements
    {
        dataitem(Price_List_Line; "Price List Line")
        {
            DataItemTableFilter = "Asset Type" = const(Item),
                                  Status = const(Active),
                                  "Ending Date" = filter(''),
                                  "Source No." = filter('RRP'),
                                  "Currency Code" = filter('EUR');

            column(Asset_Type; "Asset Type")
            { }
            column(AssetNo; "Asset No.")
            { }
            column(Description; Description)
            { }
            column(CurrencyCode; "Currency Code")
            { }
            column(LineNo; "Line No.")
            { }
            column(Minimum_Quantity; "Minimum Quantity")
            { }
            column(UnitListPrice; "Unit List Price")
            { }
            column(UnitPrice; "Unit Price")
            { }
            column(UnitListPriceCurrency; "Unit List Price (Currency)")
            { }
            column(UnitPriceCurrency; "Unit Price (Currency)")
            { }
            column(VATBusPostingGrPrice; "VAT Bus. Posting Gr. (Price)")
            { }

            dataitem(Item_Translation; "Item Translation")
            {
                DataItemLink = "Item No." = Price_List_Line."Asset No.";

                column(LanguageCode; "Language Code")
                { }
                column(ItemTranslationDescription; Description)
                { }
            }
        }

    }

    trigger OnBeforeOpen()
    begin

    end;
}

 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50005_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Adresselabel 50005 (ID 50005).
/// </summary>
report 50005 "Adresselabel"
{
    AdditionalSearchTerms = 'Scanpan';

    Caption = 'Adresslabel';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/Adresselabel_50005.rdlc';


    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 10;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(LocationName; LocationName)
            {
                IncludeCaption = false;
            }
            column(LocationAddress; LocationAddress)
            {
                IncludeCaption = false;
            }
            column(LocationAddress2; LocationAddress2)
            {
                IncludeCaption = false;
            }
            column(LocationPoNo; LocationPoNo)
            {
                IncludeCaption = false;
            }
            column(LocationCity; LocationCity)
            {
                IncludeCaption = false;
            }
            column(LocationCountry; LocationCountry)
            {
                IncludeCaption = false;
            }
            column(SelectedLocation; SelectedLocationCode)
            {
                IncludeCaption = false;
            }
            column(Name; NameText)
            {
                IncludeCaption = false;
            }
            column(Address; AddressText)
            {
                IncludeCaption = false;
            }
            column(Address2; Address2Text)
            {
                IncludeCaption = false;
            }
            column(PoCode; PoCodeText)
            {
                IncludeCaption = false;
            }
            column(City; CityText)
            {
                IncludeCaption = false;
            }
            column(CountryName; CountryNameText)
            {
                IncludeCaption = false;
            }
            column(CountryCode; CountryCodeText)
            {
                IncludeCaption = false;
            }
            column(Reference; ReferenceText)
            {
                IncludeCaption = false;
            }
            column(Copies; CopiesInt)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, CopiesInt);
                if CopiesInt = 0 then Error('Du skal vælge et antal labels til udskrift');
                if CopiesInt > 20 then Error('Du må ikke vælge mere end 20 antal labels');
                if LocationName = '' then Error('Du skal vælge en afsenderlokation');
            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(LookupAddress)
                {
                    Caption = 'Address Lookup';

                    field(Copies; CopiesInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Number of labels';
                    }
                    label(Space3)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = ' ';
                    }

                    label(SenderLocation)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Choose Sender Location';
                    }
                    field(SelectedLocation; SelectedLocationCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sender Location';
                        TableRelation = Location.Code;
                        ToolTip = 'Select sender location';

                        trigger OnValidate()
                        var
                        begin
                            SenderLocationLookup;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Locations.Reset();
                            Locations.SetFilter(Code, '%1|%2', 'AUNING', 'RYOM');
                            if page.RunModal(Page::"Location List", Locations) = Action::LookupOK then begin
                                SelectedLocationCode := Locations.Code;
                                SenderLocationLookup;
                            end;

                        end;
                    }


                    label(Space4)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }


                    label(lblChooser)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Choose Customer';
                    }
                    field(CustomerSelected; CustomerSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Customer';
                        TableRelation = Customer."No.";
                        Tooltip = 'Select Customer';

                        trigger OnValidate()
                        var
                        begin
                            FillCustomerAddress;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Customers.Reset;
                            if page.RunModal(Page::"Customer List", Customers) = Action::LookupOK then begin
                                CustomerSelectedCode := Customers."No.";
                                FillCustomerAddress;
                            end;

                        end;
                    }
                    field(ShipToAddressSelected; ShipToAddressSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Ship-To-Address';
                        TableRelation = "Ship-to Address".Code;
                        Tooltip = 'Select Ship-To-Address';


                        trigger OnValidate()
                        var
                        begin
                            FillShipToAddress;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            CustomerShipToAddress.Reset();
                            CustomerShipToAddress.SetFilter("Customer No.", CustomerSelectedCode);
                            if page.RunModal(Page::"Ship-to Address List", CustomerShipToAddress) = Action::LookupOK then begin
                                ShipToAddressSelectedCode := CustomerShipToAddress.Code;
                                FillShipToAddress;
                            end else
                                ClearAddress;
                        end;

                    }
                    label(Space1)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }
                    label(VendorAddress)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Choose Vendor';
                    }
                    field(VendorSelected; VendorSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Vendor';
                        TableRelation = Vendor."No.";
                        Tooltip = 'Select Vendor';

                        trigger OnValidate()
                        begin
                            FillVendor();
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Vendors.Reset();
                            //Vendors.SetFilter("Customer No.", CustomerSelected);
                            if page.RunModal(Page::"Vendor List", Vendors) = Action::LookupOK then begin
                                VendorSelectedCode := Vendors."No.";
                                FillVendor;
                            end else
                                ClearAddress;
                        end;

                    }
                    field(OrderAddressSelected; OrderAddressSelectedCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Order Address';
                        TableRelation = "Order Address".Code;
                        Tooltip = 'Select Order Address';

                        trigger OnValidate()
                        var
                        begin
                            FillVendor;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            VendorOrderAddress.Reset();
                            VendorOrderAddress.SetFilter("Vendor No.", VendorSelectedCode);
                            if page.RunModal(Page::"Order Address List", VendorOrderAddress) = Action::LookupOK then begin
                                OrderAddressSelectedCode := VendorOrderAddress.Code;
                                FillVendor;
                            end else
                                ClearAddress;
                        end;

                    }
                    label(Space2)
                    {
                        ApplicationArea = Basic;
                        Caption = ' ';
                    }

                    group(ShowAddress)
                    {
                        Caption = 'Address to print';

                        field(Name; NameText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Name';
                        }
                        field(Address; AddressText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Address';
                        }
                        field(Address2; Address2Text)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Address 2';
                        }
                        field(PoCode; PoCodeText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Post Code';
                        }
                        field(City; CityText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'City';
                        }
                        field(CountryName; CountryNameText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Country Name';
                        }
                        field(CountryCode; CountryCodeText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Country Code';
                        }
                        field(Reference; ReferenceText)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Reference';
                        }


                    }
                    group(Options)
                    {
                        Caption = 'Options';
                        field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                        {
                            ApplicationArea = Basic;
                            Caption = 'Design';
                            Visible = ReportForNavAllowDesign;
                            trigger OnValidate()
                            begin
                                ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                                CurrReport.RequestOptionsPage.Close();
                            end;

                        }
                    }
                }

            }

        }

        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
        CopiesInt := 1;
        SelectedLocationCode := 'AUNING';
        SenderLocationLookup();
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        CountryRegions: Record "Country/Region";
        Customers: Record Customer;
        Locations: Record Location;
        VendorOrderAddress: Record "Order Address";
        CustomerShipToAddress: Record "Ship-to Address";
        Vendors: Record Vendor;
        CustomerSelectedCode: code[20];
        OrderAddressSelectedCode: Code[20];

        SelectedLocationCode: code[20];
        ShipToAddressSelectedCode: Code[20];

        VendorSelectedCode: Code[20];
        CopiesInt: Integer;
        Address2Text: Text[200];
        AddressText: Text[200];
        CityText: Text[200];
        CountryCodeText: Text[200];
        CountryNameText: Text[200];
        LocationAddress: Text[200];
        LocationAddress2: Text[200];
        LocationCity: Text[200];
        LocationCountry: Text[200];

        LocationName: Text[200];
        LocationPoNo: Text[200];
        NameText: Text[200];
        PoCodeText: Text[200];
        ReferenceText: Text[200];

    local procedure SenderLocationLookup()
    begin
        if Locations.Get(SelectedLocationCode) then begin
            LocationName := Locations.Name;
            LocationAddress := Locations.Address;
            LocationAddress2 := Locations."Address 2";
            LocationPoNo := Locations."Post Code";
            LocationCity := Locations.City;

            CountryRegions.Get(Locations."Country/Region Code");
            LocationCountry := CountryRegions.GetNameInCurrentLanguage();
        end;


    end;

    local procedure FillCustomerAddress()
    var
    begin
        Customers.Get(CustomerSelectedCode);
        NameText := Customers.Name;
        AddressText := Customers.Address;
        Address2Text := Customers."Address 2";
        PoCodeText := Customers."Post Code";
        CityText := Customers.City;
        CountryCodeText := Customers."Country/Region Code";

        CountryRegions.Get(Customers."Country/Region Code");
        CountryNameText := CountryRegions.GetNameInCurrentLanguage();

    end;

    local procedure FillShipToAddress()
    var
    begin
        CustomerShipToAddress.SetFilter("Customer No.", CustomerSelectedCode);
        CustomerShipToAddress.SetFilter(Code, ShipToAddressSelectedCode);
        If CustomerShipToAddress.Get(CustomerSelectedCode, ShipToAddressSelectedCode) then begin
            //If CustomerShipToAddress.find then begin
            NameText := CustomerShipToAddress.Name;
            AddressText := CustomerShipToAddress.Address;
            Address2Text := CustomerShipToAddress."Address 2";
            PoCodeText := CustomerShipToAddress."Post Code";
            CityText := CustomerShipToAddress.City;
            CountryCodeText := CustomerShipToAddress."Country/Region Code";

            If CountryRegions.Get(CustomerShipToAddress."Country/Region Code") then
                CountryNameText := CountryRegions.GetNameInCurrentLanguage() else
                CountryNameText := '';
        end else
            ClearAddress;
    end;

    local procedure FillVendor()
    var
    begin
        Vendors.Get(VendorSelectedCode);
        NameText := Vendors.Name;
        AddressText := Vendors.Address;
        Address2Text := Vendors."Address 2";
        PoCodeText := Vendors."Post Code";
        CityText := Vendors.City;
        CountryCodeText := Vendors."Country/Region Code";

        CountryRegions.Get(Vendors."Country/Region Code");
        CountryNameText := CountryRegions.GetNameInCurrentLanguage();

    end;

    local procedure ClearAddress()
    var
    begin
        NameText := '';
        AddressText := '';
        Address2Text := '';
        PoCodeText := '';
        CityText := '';
        CountryCodeText := '';
        CountryNameText := '';
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50005_v7_0_0_2350;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet Path;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 




report 50015 "CalculateInventory"
{
    AdditionalSearchTerms = 'SCANPAN INVENTORY CALCULATE';
    Caption = 'Scanpan Calculate Inventory';
    UsageCategory = Tasks;
    ApplicationArea = Basic, Suite;
    ProcessingOnly = true;

    dataset
    {
        dataitem(Item; Item)
        {
            DataItemTableView = SORTING("No.") WHERE(Type = CONST(Inventory), Blocked = CONST(false));
            RequestFilterFields = "No.", "Location Filter", "Bin Filter", "Date Filter";
            dataitem("Item Ledger Entry"; "Item Ledger Entry")
            {
                DataItemLink = "Item No." = FIELD("No."),
                                "Variant Code" = FIELD("Variant Filter"),
                                "Location Code" = FIELD("Location Filter"),
                                "Global Dimension 1 Code" = FIELD("Global Dimension 1 Filter"),
                                "Global Dimension 2 Code" = FIELD("Global Dimension 2 Filter"),
                                "Posting Date" = FIELD("Date Filter");
                DataItemTableView = SORTING("Item No.", "Entry Type", "Variant Code", "Drop Shipment", "Location Code", "Posting Date");

                trigger OnAfterGetRecord()
                var
                    ItemVariant: Record "Item Variant";
                    ByBin: Boolean;
                    ExecuteLoop: Boolean;
                    InsertTempSKU: Boolean;
                    IsHandled: Boolean;
                begin
                    if not GetLocation("Location Code") then
                        CurrReport.Skip();

                    if ColumnDim <> '' then
                        TransferDim("Dimension Set ID");

                    if not "Drop Shipment" then
                        ByBin := Location."Bin Mandatory" and not Location."Directed Put-away and Pick";

                    IsHandled := false;
                    OnAfterGetRecordItemLedgEntryOnBeforeUpdateBuffer(Item, "Item Ledger Entry", ByBin, IsHandled);
                    if IsHandled then
                        CurrReport.Skip();

                    if not SkipCycleSKU("Location Code", "Item No.", "Variant Code") then
                        if ByBin then begin
                            if not TempStockkeepingUnitSKU.Get("Location Code", "Item No.", "Variant Code") then begin
                                InsertTempSKU := false;
                                if "Variant Code" = '' then
                                    InsertTempSKU := true
                                else
                                    if ItemVariant.Get("Item No.", "Variant Code") then
                                        InsertTempSKU := true;
                                if InsertTempSKU then begin
                                    TempStockkeepingUnitSKU."Item No." := "Item No.";
                                    TempStockkeepingUnitSKU."Variant Code" := "Variant Code";
                                    TempStockkeepingUnitSKU."Location Code" := "Location Code";
                                    TempStockkeepingUnitSKU.Insert();
                                    ExecuteLoop := true;
                                end;
                            end;
                            if ExecuteLoop then begin
                                WarehouseEntry.SetRange("Item No.", "Item No.");
                                WarehouseEntry.SetRange("Location Code", "Location Code");
                                WarehouseEntry.SetRange("Variant Code", "Variant Code");
                                if WarehouseEntry.Find('-') then
                                    if WarehouseEntry."Entry No." <> OldWarehouseEntry."Entry No." then begin
                                        OldWarehouseEntry := WarehouseEntry;
                                        repeat
                                            WarehouseEntry.SetRange("Bin Code", WarehouseEntry."Bin Code");
                                            if not ItemBinLocationIsCalculated(WarehouseEntry."Bin Code") then begin
                                                WarehouseEntry.CalcSums("Qty. (Base)");
                                                UpdateBuffer(WarehouseEntry."Bin Code", WarehouseEntry."Qty. (Base)", false);
                                            end;
                                            WarehouseEntry.Find('+');
                                            Item.CopyFilter("Bin Filter", WarehouseEntry."Bin Code");
                                        until WarehouseEntry.Next() = 0;
                                    end;
                            end;
                        end else
                            UpdateBuffer('', Quantity, true);
                end;

                trigger OnPreDataItem()
                begin
                    WarehouseEntry.SetCurrentKey("Item No.", "Bin Code", "Location Code", "Variant Code");
                    Item.CopyFilter("Bin Filter", WarehouseEntry."Bin Code");

                    if ColumnDim = '' then
                        TempDimensionBuffer.SetRange("Table ID", DATABASE::Item)
                    else
                        TempDimensionBuffer.SetRange("Table ID", DATABASE::"Item Ledger Entry");
                    TempDimensionBuffer.SetRange("Entry No.");
                    TempDimensionBuffer.DeleteAll();

                    OnItemLedgerEntryOnAfterPreDataItem("Item Ledger Entry", Item);
                end;
            }
            dataitem("Warehouse Entry"; "Warehouse Entry")
            {
                DataItemLink = "Item No." = FIELD("No."), "Variant Code" = FIELD("Variant Filter"), "Location Code" = FIELD("Location Filter");

                trigger OnAfterGetRecord()
                begin
                    if not "Item Ledger Entry".IsEmpty() then
                        CurrReport.Skip();   // Skip if item has any record in Item Ledger Entry.

                    Clear(TempInventoryBuffer);
                    TempInventoryBuffer."Item No." := "Item No.";
                    TempInventoryBuffer."Location Code" := "Location Code";
                    TempInventoryBuffer."Variant Code" := "Variant Code";

                    GetLocation("Location Code");
                    if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
                        TempInventoryBuffer."Bin Code" := "Bin Code";

                    OnBeforeQuantityOnHandBufferFindAndInsert(TempInventoryBuffer, "Warehouse Entry");
                    if not TempInventoryBuffer.Find() then
                        TempInventoryBuffer.Insert();   // Insert a zero quantity line.
                end;

                trigger OnPreDataItem()
                begin
                    "Warehouse Entry".SetRange("Registering Date", 0D, Item.GetRangeMax("Date Filter"));
                end;
            }
            dataitem(ItemWithNoTransaction; "Integer")
            {
                DataItemTableView = SORTING(Number) WHERE(Number = CONST(1));

                trigger OnAfterGetRecord()
                begin
                    if IncludeItemWithNoTransactionBoolean then
                        UpdateQuantityOnHandBuffer(Item."No.");
                end;
            }

            trigger OnAfterGetRecord()
            begin
                OnBeforeItemOnAfterGetRecord(Item);
                if not HideValidationDialog then
                    Window.Update();
                TempStockkeepingUnitSKU.DeleteAll();
            end;

            trigger OnPostDataItem()
            begin
                CalcPhysInvQtyAndInsertItemJnlLine();
            end;

            trigger OnPreDataItem()
            var
                ItemJnlTemplate: Record "Item Journal Template";
                ItemJnlBatch: Record "Item Journal Batch";
            begin
                if PostingDateDate = 0D then
                    Error(Text000Lbl);

                ItemJnlTemplate.Get(ItemJournalLine."Journal Template Name");
                ItemJnlBatch.Get(ItemJournalLine."Journal Template Name", ItemJournalLine."Journal Batch Name");

                OnPreDataItemOnAfterGetItemJnlTemplateAndBatch(ItemJnlTemplate, ItemJnlBatch);

                if NextDocNo = '' then begin
                    if ItemJnlBatch."No. Series" <> '' then begin
                        ItemJournalLine.SetRange("Journal Template Name", ItemJournalLine."Journal Template Name");
                        ItemJournalLine.SetRange("Journal Batch Name", ItemJournalLine."Journal Batch Name");
                        if not ItemJournalLine.FindFirst() then
                            NextDocNo := NoSeriesManagement.GetNextNo(ItemJnlBatch."No. Series", PostingDateDate, false);
                        ItemJournalLine.Init();
                    end;
                    if NextDocNo = '' then
                        Error(Text001Lbl);
                end;

                NextLineNo := 0;

                if not HideValidationDialog then
                    Window.Open(Text002Lbl, "No.");

                if not SkipDim then
                    SelectedDimension.GetSelectedDim(CopyStr(UserId, 1, 50), 3, REPORT::"Calculate Inventory", '', TempSelectedDimension);

                TempInventoryBuffer.Reset();
                TempInventoryBuffer.DeleteAll();

                OnAfterItemOnPreDataItem(Item, ZeroQty, IncludeItemWithNoTransactionBoolean);
            end;
        }
    }

    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(PostingDate; PostingDateDate)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Posting Date';
                        ToolTip = 'Specifies the date for the posting of this batch job. By default, the working date is entered, but you can change it.';

                        trigger OnValidate()
                        begin
                            ValidatePostingDate();
                        end;
                    }
                    field(DocumentNo; NextDocNo)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Document No.';
                        ToolTip = 'Specifies the number of the document that is processed by the report or batch job.';
                    }
                    field(ItemsNotOnInventory; ZeroQty)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Items Not on Inventory.';
                        ToolTip = 'Specifies if journal lines should be created for items that are not on inventory, that is, items where the value in the Qty. (Calculated) field is 0.';

                        trigger OnValidate()
                        begin
                            if not ZeroQty then
                                IncludeItemWithNoTransactionBoolean := false;
                        end;
                    }
                    field(IncludeItemWithNoTransaction; IncludeItemWithNoTransactionBoolean)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Include Item without Transactions';
                        ToolTip = 'Specifies if journal lines should be created for items that are not on inventory and are not used in any transactions.';

                        trigger OnValidate()
                        begin
                            if not IncludeItemWithNoTransactionBoolean then
                                exit;
                            if not ZeroQty then
                                Error(ItemNotOnInventoryErr);
                        end;
                    }
                    field(ByDimensions; ColumnDim)
                    {
                        ApplicationArea = Dimensions;
                        Caption = 'By Dimensions';
                        Editable = false;
                        ToolTip = 'Specifies the dimensions that you want the batch job to consider.';

                        trigger OnAssistEdit()
                        begin
                            DimensionSelectionBuffer.SetDimSelectionMultiple(3, REPORT::"Calculate Inventory", ColumnDim);
                        end;
                    }
                }
            }
        }

        actions
        {
        }

        trigger OnOpenPage()
        begin
            if PostingDateDate = 0D then
                PostingDateDate := WorkDate();
            ValidatePostingDate();
            ColumnDim := DimensionSelectionBuffer.GetDimSelectionText(3, REPORT::"Calculate Inventory", '');
        end;
    }

    labels
    {
    }

    trigger OnPreReport()
    begin
        if SkipDim then
            ColumnDim := ''
        else
            DimensionSelectionBuffer.CompareDimText(3, REPORT::"Calculate Inventory", '', ColumnDim, Text003Lbl);
        ZeroQtySave := ZeroQty;
    end;

    var
        TempDimensionBuffer: Record "Dimension Buffer" temporary;
        TempDimensionBufferOut: Record "Dimension Buffer" temporary;
        DimensionSelectionBuffer: Record "Dimension Selection Buffer";
        DimensionSetEntry: Record "Dimension Set Entry";
        TempDimensionSetEntry: Record "Dimension Set Entry" temporary;
        TempInventoryBuffer: Record "Inventory Buffer" temporary;
        ItemJournalBatch: Record "Item Journal Batch";
        ItemJournalLine: Record "Item Journal Line";
        Location: Record Location;
        SelectedDimension: Record "Selected Dimension";
        TempSelectedDimension: Record "Selected Dimension" temporary;
        SourceCodeSetup: Record "Source Code Setup";
        TempStockkeepingUnitSKU: Record "Stockkeeping Unit" temporary;
        OldWarehouseEntry: Record "Warehouse Entry";
        WarehouseEntry: Record "Warehouse Entry";
        DimensionBufferManagement: Codeunit "Dimension Buffer Management";
        NoSeriesManagement: Codeunit NoSeriesManagement;
        AdjustPosQty: Boolean;
        IncludeItemWithNoTransactionBoolean: Boolean;
        ItemTrackingSplit: Boolean;
        SkipDim: Boolean;
        ZeroQty: Boolean;
        ZeroQtySave: Boolean;
        PhysInvtCountCode: Code[10];
        NextDocNo: Code[20];
        PostingDateDate: Date;
        NegQty: Decimal;
        PosQty: Decimal;
        Window: Dialog;
        NextLineNo: Integer;
        ItemNotOnInventoryErr: Label 'Items Not on Inventory.';
        Text000Lbl: Label 'Enter the posting date.';
        Text001Lbl: Label 'Enter the document no.';
        Text002Lbl: Label 'Processing items    #1##########', Comment = '#1 = Item No. being processed.';
        Text003Lbl: Label 'Retain Dimensions';
        CycleSourceType: Option " ",Item,SKU;
        ColumnDim: Text[250];

    protected var
        HideValidationDialog: Boolean;

    procedure SetItemJnlLine(var NewItemJnlLine: Record "Item Journal Line")
    begin
        ItemJournalLine := NewItemJnlLine;
    end;

    local procedure ValidatePostingDate()
    begin
        ItemJournalBatch.Get(ItemJournalLine."Journal Template Name", ItemJournalLine."Journal Batch Name");
        if ItemJournalBatch."No. Series" = '' then
            NextDocNo := ''
        else begin
            NextDocNo := NoSeriesManagement.GetNextNo(ItemJournalBatch."No. Series", PostingDateDate, false);
            Clear(NoSeriesManagement);
        end;
    end;

    procedure InsertItemJnlLine(ItemNo: Code[20]; VariantCode2: Code[10]; DimEntryNo2: Integer; BinCode2: Code[20]; Quantity2: Decimal; PhysInvQuantity: Decimal)
    var
        ItemLedgEntry: Record "Item Ledger Entry";
        Bin: Record Bin;
        DimValue: Record "Dimension Value";
        DimMgt: Codeunit DimensionManagement;
        NoBinExist: Boolean;
    begin
        OnBeforeFunctionInsertItemJnlLine(ItemNo, VariantCode2, DimEntryNo2, BinCode2, Quantity2, PhysInvQuantity);

        with ItemJournalLine do begin
            if NextLineNo = 0 then begin
                LockTable();
                SetRange("Journal Template Name", "Journal Template Name");
                SetRange("Journal Batch Name", "Journal Batch Name");
                if FindLast() then
                    NextLineNo := "Line No.";

                SourceCodeSetup.Get();
            end;
            NextLineNo := NextLineNo + 10000;

            if (Quantity2 <> 0) or ZeroQty then begin
                if (Quantity2 = 0) and Location."Bin Mandatory" and not Location."Directed Put-away and Pick"
                then
                    if not Bin.Get(Location.Code, BinCode2) then
                        NoBinExist := true;

                OnInsertItemJnlLineOnBeforeInit(ItemJournalLine);

                Init();
                "Line No." := NextLineNo;
                Validate("Posting Date", PostingDateDate);
                if PhysInvQuantity >= Quantity2 then
                    Validate("Entry Type", "Entry Type"::"Positive Adjmt.")
                else
                    Validate("Entry Type", "Entry Type"::"Negative Adjmt.");
                Validate("Document No.", NextDocNo);
                Validate("Item No.", ItemNo);
                Validate("Variant Code", VariantCode2);
                Validate("Location Code", Location.Code);
                if not NoBinExist then
                    Validate("Bin Code", BinCode2)
                else
                    Validate("Bin Code", '');
                Validate("Source Code", SourceCodeSetup."Phys. Inventory Journal");
                "Qty. (Phys. Inventory)" := PhysInvQuantity;
                "Phys. Inventory" := true;
                Validate("Qty. (Calculated)", Quantity2);
                "Posting No. Series" := ItemJournalBatch."Posting No. Series";
                "Reason Code" := ItemJournalBatch."Reason Code";

                "Phys Invt Counting Period Code" := PhysInvtCountCode;
                "Phys Invt Counting Period Type" := CycleSourceType;

                if Location."Bin Mandatory" then
                    "Dimension Set ID" := 0;
                "Shortcut Dimension 1 Code" := '';
                "Shortcut Dimension 2 Code" := '';

                ItemLedgEntry.Reset();
                ItemLedgEntry.SetCurrentKey("Item No.");
                ItemLedgEntry.SetRange("Item No.", ItemNo);
                if ItemLedgEntry.FindLast() then
                    "Last Item Ledger Entry No." := ItemLedgEntry."Entry No."
                else
                    "Last Item Ledger Entry No." := 0;

                OnBeforeInsertItemJnlLine(ItemJournalLine, TempInventoryBuffer);
                Insert(true);
                OnAfterInsertItemJnlLine(ItemJournalLine);

                if Location.Code <> '' then
                    if Location."Directed Put-away and Pick" then
                        ReserveWarehouse(ItemJournalLine);

                if ColumnDim = '' then
                    DimEntryNo2 := CreateDimFromItemDefault();

                if DimensionBufferManagement.GetDimensions(DimEntryNo2, TempDimensionBufferOut) then begin
                    TempDimensionSetEntry.Reset();
                    TempDimensionSetEntry.DeleteAll();
                    if TempDimensionBufferOut.Find('-') then begin
                        repeat
                            DimValue.Get(TempDimensionBufferOut."Dimension Code", TempDimensionBufferOut."Dimension Value Code");
                            TempDimensionSetEntry."Dimension Code" := TempDimensionBufferOut."Dimension Code";
                            TempDimensionSetEntry."Dimension Value Code" := TempDimensionBufferOut."Dimension Value Code";
                            TempDimensionSetEntry."Dimension Value ID" := DimValue."Dimension Value ID";
                            if TempDimensionSetEntry.Insert() then;
                            "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimensionSetEntry);
                            DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID",
                              "Shortcut Dimension 1 Code", "Shortcut Dimension 2 Code");
                            Modify();
                        until TempDimensionBufferOut.Next() = 0;
                        TempDimensionBufferOut.DeleteAll();
                    end;
                end;
            end;
        end;

        OnAfterFunctionInsertItemJnlLine(ItemNo, VariantCode2, DimEntryNo2, BinCode2, Quantity2, PhysInvQuantity, ItemJournalLine);
    end;

    local procedure InsertQuantityOnHandBuffer(ItemNo: Code[20]; LocationCode: Code[10]; VariantCode: Code[10])
    begin
        with TempInventoryBuffer do begin
            Reset();
            SetRange("Item No.", ItemNo);
            SetRange("Location Code", LocationCode);
            SetRange("Variant Code", VariantCode);
            if not FindFirst() then begin
                Reset();
                Init();
                "Item No." := ItemNo;
                "Location Code" := LocationCode;
                "Variant Code" := VariantCode;
                "Bin Code" := '';
                "Dimension Entry No." := 0;
                Insert(true);
            end;
        end;
    end;

    local procedure ReserveWarehouse(ItemJournalLine: Record "Item Journal Line")
    var
        ReservationEntry: Record "Reservation Entry";
        WarehouseEntry1: Record "Warehouse Entry";
        WarehouseEntry2: Record "Warehouse Entry";
        CreateReservEntry: Codeunit "Create Reserv. Entry";
        OrderLineNo: Integer;
        EntryType: Option "Negative Adjmt.","Positive Adjmt.";
    begin
        with ItemJournalLine do begin
            WarehouseEntry1.SetCurrentKey(
                "Item No.", "Bin Code", "Location Code", "Variant Code", "Unit of Measure Code",
                "Lot No.", "Serial No.", "Entry Type");
            WarehouseEntry1.SetRange("Item No.", "Item No.");
            WarehouseEntry1.SetRange("Bin Code", Location."Adjustment Bin Code");
            WarehouseEntry1.SetRange("Location Code", "Location Code");
            WarehouseEntry1.SetRange("Variant Code", "Variant Code");
            if "Entry Type" = "Entry Type"::"Positive Adjmt." then
                EntryType := EntryType::"Negative Adjmt.";
            if "Entry Type" = "Entry Type"::"Negative Adjmt." then
                EntryType := EntryType::"Positive Adjmt.";
            OnAfterWhseEntrySetFilters(WarehouseEntry1, ItemJournalLine);
            WarehouseEntry1.SetRange("Entry Type", EntryType);
            if WarehouseEntry1.Find('-') then
                repeat
                    WarehouseEntry1.SetTrackingFilterFromWhseEntry(WarehouseEntry1);
                    WarehouseEntry1.CalcSums("Qty. (Base)");

                    WarehouseEntry2.SetCurrentKey(
                        "Item No.", "Bin Code", "Location Code", "Variant Code", "Unit of Measure Code",
                        "Lot No.", "Serial No.", "Entry Type");
                    WarehouseEntry2.CopyFilters(WarehouseEntry1);
                    case EntryType of
                        EntryType::"Positive Adjmt.":
                            WarehouseEntry2.SetRange("Entry Type", WarehouseEntry2."Entry Type"::"Negative Adjmt.");
                        EntryType::"Negative Adjmt.":
                            WarehouseEntry2.SetRange("Entry Type", WarehouseEntry2."Entry Type"::"Positive Adjmt.");
                    end;
                    OnReserveWarehouseOnAfterWhseEntry2SetFilters(ItemJournalLine, WarehouseEntry1, WarehouseEntry2, EntryType);
                    WarehouseEntry2.CalcSums("Qty. (Base)");
                    if Abs(WarehouseEntry2."Qty. (Base)") > Abs(WarehouseEntry1."Qty. (Base)") then
                        WarehouseEntry1."Qty. (Base)" := 0
                    else
                        WarehouseEntry1."Qty. (Base)" := WarehouseEntry1."Qty. (Base)" + WarehouseEntry2."Qty. (Base)";

                    if WarehouseEntry1."Qty. (Base)" <> 0 then begin
                        if "Order Type" = "Order Type"::Production then
                            OrderLineNo := "Order Line No.";
                        ReservationEntry.CopyTrackingFromWhseEntry(WarehouseEntry1);
                        CreateReservEntry.CreateReservEntryFor(
                            DATABASE::"Item Journal Line", "Entry Type".AsInteger(), "Journal Template Name", "Journal Batch Name", OrderLineNo,
                            "Line No.", "Qty. per Unit of Measure",
                            Abs(WarehouseEntry1.Quantity), Abs(WarehouseEntry1."Qty. (Base)"), ReservationEntry);
                        if WarehouseEntry1."Qty. (Base)" < 0 then             // only Date on positive adjustments
                            CreateReservEntry.SetDates(WarehouseEntry1."Warranty Date", WarehouseEntry1."Expiration Date");
                        CreateReservEntry.CreateEntry(
                            "Item No.", "Variant Code", "Location Code", Description, 0D, 0D, 0, "Reservation Status"::Prospect);
                    end;
                    WarehouseEntry1.Find('+');
                    WarehouseEntry1.ClearTrackingFilter();
                until WarehouseEntry1.Next() = 0;
        end;
    end;

    procedure InitializeRequest(NewPostingDate: Date; DocNo: Code[20]; ItemsNotOnInvt: Boolean; InclItemWithNoTrans: Boolean)
    begin
        PostingDateDate := NewPostingDate;
        NextDocNo := DocNo;
        ZeroQty := ItemsNotOnInvt;
        IncludeItemWithNoTransactionBoolean := InclItemWithNoTrans and ZeroQty;
        if not SkipDim then
            ColumnDim := DimensionSelectionBuffer.GetDimSelectionText(3, REPORT::"Calculate Inventory", '');
    end;

    local procedure TransferDim(DimSetID: Integer)
    begin
        DimensionSetEntry.SetRange("Dimension Set ID", DimSetID);
        if DimensionSetEntry.Find('-') then
            repeat
                if TempSelectedDimension.Get(
                     UserId, 3, REPORT::"Calculate Inventory", '', DimensionSetEntry."Dimension Code")
                then
                    InsertDim(DATABASE::"Item Ledger Entry", DimSetID, DimensionSetEntry."Dimension Code", DimensionSetEntry."Dimension Value Code");
            until DimensionSetEntry.Next() = 0;
    end;


    local procedure CalcWhseQty(AdjmtBin: Code[20]; var PosQuantity: Decimal; var NegQuantity: Decimal)
    var
        WhseItemTrackingSetup: Record "Item Tracking Setup";
        WarehouseEntry1: Record "Warehouse Entry";
        WarehouseEntry2: Record "Warehouse Entry";
        ItemTrackingManagement: Codeunit "Item Tracking Management";
        NoWhseEntry: Boolean;
        NoWhseEntry2: Boolean;
        WhseQuantity: Decimal;
    begin
        AdjustPosQty := false;
        with TempInventoryBuffer do begin
            ItemTrackingManagement.GetWhseItemTrkgSetup("Item No.", WhseItemTrackingSetup);
            ItemTrackingSplit := WhseItemTrackingSetup.TrackingRequired();
            WarehouseEntry1.SetCurrentKey(
              "Item No.", "Bin Code", "Location Code", "Variant Code", "Unit of Measure Code",
              "Lot No.", "Serial No.", "Entry Type");

            WarehouseEntry1.SetRange("Item No.", "Item No.");
            WarehouseEntry1.SetRange("Location Code", "Location Code");
            WarehouseEntry1.SetRange("Variant Code", "Variant Code");

            //Fix datefilter
            WarehouseEntry1.SetRange("Registering Date", 0D, Item.GetRangeMax("Date Filter"));

            WarehouseEntry1.CalcSums("Qty. (Base)");
            WhseQuantity := WarehouseEntry1."Qty. (Base)";
            WarehouseEntry1.SetRange("Bin Code", AdjmtBin);

            if WhseItemTrackingSetup."Serial No. Required" then begin
                WarehouseEntry1.SetRange("Entry Type", WarehouseEntry1."Entry Type"::"Positive Adjmt.");
                WarehouseEntry1.CalcSums("Qty. (Base)");
                PosQuantity := WhseQuantity - WarehouseEntry1."Qty. (Base)";
                WarehouseEntry1.SetRange("Entry Type", WarehouseEntry1."Entry Type"::"Negative Adjmt.");
                WarehouseEntry1.CalcSums("Qty. (Base)");
                NegQuantity := WhseQuantity - WarehouseEntry1."Qty. (Base)";
                WarehouseEntry1.SetRange("Entry Type", WarehouseEntry1."Entry Type"::Movement);
                WarehouseEntry1.CalcSums("Qty. (Base)");
                if WarehouseEntry1."Qty. (Base)" <> 0 then
                    if WarehouseEntry1."Qty. (Base)" > 0 then
                        PosQuantity := PosQuantity + WhseQuantity - WarehouseEntry1."Qty. (Base)"
                    else
                        NegQuantity := NegQuantity - WhseQuantity - WarehouseEntry1."Qty. (Base)";


                WarehouseEntry1.SetRange("Entry Type", WarehouseEntry1."Entry Type"::"Positive Adjmt.");
                if WarehouseEntry1.Find('-') then begin
                    repeat
                        WarehouseEntry1.SetRange("Serial No.", WarehouseEntry1."Serial No.");

                        WarehouseEntry2.Reset();
                        WarehouseEntry2.SetCurrentKey(
                          "Item No.", "Bin Code", "Location Code", "Variant Code",
                          "Unit of Measure Code", "Lot No.", "Serial No.", "Entry Type");

                        WarehouseEntry2.CopyFilters(WarehouseEntry1);
                        WarehouseEntry2.SetRange("Entry Type", WarehouseEntry2."Entry Type"::"Negative Adjmt.");
                        WarehouseEntry2.SetRange("Serial No.", WarehouseEntry1."Serial No.");
                        if WarehouseEntry2.Find('-') then
                            repeat
                                PosQuantity := PosQuantity + 1;
                                NegQuantity := NegQuantity - 1;
                                NoWhseEntry := WarehouseEntry1.Next() = 0;
                                NoWhseEntry2 := WarehouseEntry2.Next() = 0;
                            until NoWhseEntry2 or NoWhseEntry
                        else
                            AdjustPosQty := true;

                        if not NoWhseEntry and NoWhseEntry2 then
                            AdjustPosQty := true;

                        WarehouseEntry1.Find('+');
                        WarehouseEntry1.SetRange("Serial No.");
                    until WarehouseEntry1.Next() = 0;
                end;
            end else begin
                if WarehouseEntry1.Find('-') then
                    repeat
                        WarehouseEntry1.SetRange("Lot No.", WarehouseEntry1."Lot No.");
                        OnCalcWhseQtyOnAfterLotRequiredWhseEntrySetFilters(WarehouseEntry1);
                        WarehouseEntry1.CalcSums("Qty. (Base)");
                        if WarehouseEntry1."Qty. (Base)" <> 0 then begin
                            if WarehouseEntry1."Qty. (Base)" > 0 then
                                NegQuantity := NegQuantity - WarehouseEntry1."Qty. (Base)"
                            else
                                PosQuantity := PosQuantity + WarehouseEntry1."Qty. (Base)";
                        end;
                        WarehouseEntry1.Find('+');
                        WarehouseEntry1.SetRange("Lot No.");
                        OnCalcWhseQtyOnAfterLotRequiredWhseEntryClearFilters(WarehouseEntry1);
                    until WarehouseEntry1.Next() = 0;
                if PosQuantity <> WhseQuantity then
                    PosQuantity := WhseQuantity - PosQuantity;
                if NegQuantity <> -WhseQuantity then
                    NegQuantity := WhseQuantity + NegQuantity;
            end;
        end;
    end;

    procedure SetHideValidationDialog(NewHideValidationDialog: Boolean)
    begin
        HideValidationDialog := NewHideValidationDialog;
    end;

    procedure InitializePhysInvtCount(PhysInvtCountCode2: Code[10]; CountSourceType2: Option " ",Item,SKU)
    begin
        PhysInvtCountCode := PhysInvtCountCode2;
        CycleSourceType := CountSourceType2;
    end;

    local procedure SkipCycleSKU(LocationCode: Code[10]; ItemNo: Code[20]; VariantCode: Code[10]): Boolean
    var
        SKU: Record "Stockkeeping Unit";
    begin
        if CycleSourceType = CycleSourceType::Item then
            if SKU.ReadPermission then
                if SKU.Get(LocationCode, ItemNo, VariantCode) then
                    exit(true);
        exit(false);
    end;

    procedure GetLocation(LocationCode: Code[10]): Boolean
    begin
        if LocationCode = '' then begin
            Clear(Location);
            exit(true);
        end;

        if Location.Code <> LocationCode then
            if not Location.Get(LocationCode) then
                exit(false);

        exit(true);
    end;

    local procedure UpdateBuffer(BinCode: Code[20]; NewQuantity: Decimal; CalledFromItemLedgerEntry: Boolean)
    var
        DimEntryNo: Integer;
    begin
        with TempInventoryBuffer do begin
            if not HasNewQuantity(NewQuantity) then
                exit;
            if BinCode = '' then begin
                if ColumnDim <> '' then
                    TempDimensionBuffer.SetRange("Entry No.", "Item Ledger Entry"."Dimension Set ID");
                DimEntryNo := DimensionBufferManagement.FindDimensions(TempDimensionBuffer);
                if DimEntryNo = 0 then
                    DimEntryNo := DimensionBufferManagement.InsertDimensions(TempDimensionBuffer);
            end;
            if RetrieveBuffer(BinCode, DimEntryNo) then begin
                Quantity := Quantity + NewQuantity;
                OnUpdateBufferOnBeforeModify(TempInventoryBuffer, CalledFromItemLedgerEntry);
                Modify;
            end else begin
                Quantity := NewQuantity;
                OnUpdateBufferOnBeforeInsert(TempInventoryBuffer, CalledFromItemLedgerEntry);
                Insert;
            end;
        end;
    end;

    local procedure RetrieveBuffer(BinCode: Code[20]; DimEntryNo: Integer): Boolean
    begin
        with TempInventoryBuffer do begin
            Reset;
            "Item No." := "Item Ledger Entry"."Item No.";
            "Variant Code" := "Item Ledger Entry"."Variant Code";
            "Location Code" := "Item Ledger Entry"."Location Code";
            "Dimension Entry No." := DimEntryNo;
            "Bin Code" := BinCode;
            OnRetrieveBufferOnBeforeFind(TempInventoryBuffer, "Item Ledger Entry");
            exit(Find);
        end;
    end;

    local procedure HasNewQuantity(NewQuantity: Decimal): Boolean
    begin
        exit((NewQuantity <> 0) or ZeroQty);
    end;

    local procedure ItemBinLocationIsCalculated(BinCode: Code[20]): Boolean
    begin
        with TempInventoryBuffer do begin
            Reset;
            SetRange("Item No.", "Item Ledger Entry"."Item No.");
            SetRange("Variant Code", "Item Ledger Entry"."Variant Code");
            SetRange("Location Code", "Item Ledger Entry"."Location Code");
            SetRange("Bin Code", BinCode);
            exit(Find('-'));
        end;
    end;

    procedure SetSkipDim(NewSkipDim: Boolean)
    begin
        SkipDim := NewSkipDim;
    end;

    local procedure UpdateQuantityOnHandBuffer(ItemNo: Code[20])
    var
        Location: Record Location;
        ItemVariant: Record "Item Variant";
    begin
        ItemVariant.SetRange("Item No.", Item."No.");
        Item.CopyFilter("Variant Filter", ItemVariant.Code);
        Item.CopyFilter("Location Filter", Location.Code);
        Location.SetRange("Use As In-Transit", false);
        if (Item.GetFilter("Location Filter") <> '') and Location.FindSet then
            repeat
                if (Item.GetFilter("Variant Filter") <> '') and ItemVariant.FindSet then
                    repeat
                        InsertQuantityOnHandBuffer(ItemNo, Location.Code, ItemVariant.Code);
                    until ItemVariant.Next() = 0
                else
                    InsertQuantityOnHandBuffer(ItemNo, Location.Code, '');
            until Location.Next() = 0
        else
            if (Item.GetFilter("Variant Filter") <> '') and ItemVariant.FindSet then
                repeat
                    InsertQuantityOnHandBuffer(ItemNo, '', ItemVariant.Code);
                until ItemVariant.Next() = 0
            else
                InsertQuantityOnHandBuffer(ItemNo, '', '');
    end;

    local procedure CalcPhysInvQtyAndInsertItemJnlLine()
    begin
        with TempInventoryBuffer do begin
            Reset;
            if FindSet then begin
                repeat
                    PosQty := 0;
                    NegQty := 0;

                    GetLocation("Location Code");
                    if Location."Directed Put-away and Pick" then
                        CalcWhseQty(Location."Adjustment Bin Code", PosQty, NegQty);

                    if (NegQty - Quantity <> Quantity - PosQty) or ItemTrackingSplit then begin
                        if PosQty = Quantity then
                            PosQty := 0;
                        if (PosQty <> 0) or AdjustPosQty then
                            InsertItemJnlLine(
                              "Item No.", "Variant Code", "Dimension Entry No.",
                              "Bin Code", Quantity, PosQty);

                        if NegQty = Quantity then
                            NegQty := 0;
                        if NegQty <> 0 then begin
                            if ((PosQty <> 0) or AdjustPosQty) and not ItemTrackingSplit then begin
                                NegQty := NegQty - Quantity;
                                Quantity := 0;
                                ZeroQty := true;
                            end;
                            if NegQty = -Quantity then begin
                                NegQty := 0;
                                AdjustPosQty := true;
                            end;
                            InsertItemJnlLine(
                              "Item No.", "Variant Code", "Dimension Entry No.",
                              "Bin Code", Quantity, NegQty);

                            ZeroQty := ZeroQtySave;
                        end;
                    end else begin
                        PosQty := 0;
                        NegQty := 0;
                    end;

                    OnCalcPhysInvQtyAndInsertItemJnlLineOnBeforeCheckIfInsertNeeded(TempInventoryBuffer);
                    if (PosQty = 0) and (NegQty = 0) and not AdjustPosQty then
                        InsertItemJnlLine(
                          "Item No.", "Variant Code", "Dimension Entry No.",
                          "Bin Code", Quantity, Quantity);
                until Next() = 0;
                DeleteAll();
            end;
        end;
    end;

    local procedure CreateDimFromItemDefault() DimEntryNo: Integer
    var
        DefaultDimension: Record "Default Dimension";
    begin
        with DefaultDimension do begin
            SetRange("No.", TempInventoryBuffer."Item No.");
            SetRange("Table ID", DATABASE::Item);
            SetFilter("Dimension Value Code", '<>%1', '');
            if FindSet then
                repeat
                    InsertDim(DATABASE::Item, 0, "Dimension Code", "Dimension Value Code");
                until Next() = 0;
        end;

        DimEntryNo := DimensionBufferManagement.InsertDimensions(TempDimensionBuffer);
        TempDimensionBuffer.SetRange("Table ID", DATABASE::Item);
        TempDimensionBuffer.DeleteAll();
    end;

    local procedure InsertDim(TableID: Integer; EntryNo: Integer; DimCode: Code[20]; DimValueCode: Code[20])
    begin
        with TempDimensionBuffer do begin
            Init;
            "Table ID" := TableID;
            "Entry No." := EntryNo;
            "Dimension Code" := DimCode;
            "Dimension Value Code" := DimValueCode;
            if Insert() then;
        end;
    end;

    [IntegrationEvent(false, false)]
    local procedure OnAfterGetRecordItemLedgEntryOnBeforeUpdateBuffer(var Item: Record Item; ItemLedgEntry: Record "Item Ledger Entry"; var ByBin: Boolean; var IsHandled: Boolean)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnAfterInsertItemJnlLine(var ItemJournalLine: Record "Item Journal Line")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnAfterItemOnPreDataItem(var Item: Record Item; ZeroQty: Boolean; IncludeItemWithNoTransaction: Boolean)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnAfterWhseEntrySetFilters(var WarehouseEntry: Record "Warehouse Entry"; var ItemJournalLine: Record "Item Journal Line")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnItemLedgerEntryOnAfterPreDataItem(var ItemLedgerEntry: Record "Item Ledger Entry"; var Item: Record Item)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnInsertItemJnlLineOnBeforeInit(var ItemJournalLine: Record "Item Journal Line")
    begin
    end;

    [IntegrationEvent(true, false)]
    local procedure OnBeforeItemOnAfterGetRecord(var Item: Record Item)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnBeforeFunctionInsertItemJnlLine(ItemNo: Code[20]; VariantCode2: Code[10]; DimEntryNo2: Integer; BinCode2: Code[20]; Quantity2: Decimal; PhysInvQuantity: Decimal)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnBeforeInsertItemJnlLine(var ItemJournalLine: Record "Item Journal Line"; var InventoryBuffer: Record "Inventory Buffer");
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnBeforeQuantityOnHandBufferFindAndInsert(var InventoryBuffer: Record "Inventory Buffer"; WarehouseEntry: Record "Warehouse Entry")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnAfterFunctionInsertItemJnlLine(ItemNo: Code[20]; VariantCode2: Code[10]; DimEntryNo2: Integer; BinCode2: Code[20]; Quantity2: Decimal; PhysInvQuantity: Decimal; var ItemJournalLine: Record "Item Journal Line")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnCalcPhysInvQtyAndInsertItemJnlLineOnBeforeCheckIfInsertNeeded(InventoryBuffer: Record "Inventory Buffer")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnCalcWhseQtyOnAfterLotRequiredWhseEntryClearFilters(var WarehouseEntry: Record "Warehouse Entry")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnCalcWhseQtyOnAfterLotRequiredWhseEntrySetFilters(var WarehouseEntry: Record "Warehouse Entry")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnPreDataItemOnAfterGetItemJnlTemplateAndBatch(var ItemJournalTemplate: Record "Item Journal Template"; var ItemJournalBatch: Record "Item Journal Batch")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnRetrieveBufferOnBeforeFind(var InventoryBuffer: Record "Inventory Buffer"; ItemLedgerEntry: Record "Item Ledger Entry")
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnReserveWarehouseOnAfterWhseEntry2SetFilters(var ItemJournalLine: Record "Item Journal Line"; var WarehouseEntry: Record "Warehouse Entry"; var WhseEntry2: Record "Warehouse Entry"; EntryType: Option)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnUpdateBufferOnBeforeInsert(var InventoryBuffer: Record "Inventory Buffer"; CalledFromItemLedgerEntry: Boolean)
    begin
    end;

    [IntegrationEvent(false, false)]
    local procedure OnUpdateBufferOnBeforeModify(var InventoryBuffer: Record "Inventory Buffer"; CalledFromItemLedgerEntry: Boolean)
    begin
    end;
}

 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50002_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->
/// <summary>
/// Report Customs Declaration 50002 (ID 50002).
/// </summary>
report 50002 "Customs Declaration"

{
    RDLCLayout = './src/report/layout/CustomsDeclaration.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Customs Declaration';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("Company Information"; "Company Information")
        {
            CalcFields = Picture;
            DataItemTableView = sorting("Primary Key");
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
        }
        dataitem(Item; Item)
        {
            CalcFields = Inventory;
            DataItemTableView = where("Gen. Prod. Posting Group" = FILTER('BRUND' | 'INTERN' | 'EKSTERN')
            //, Quality = FILTER(1)
            //, "ABCD Category" = FILTER('A|A+|B')
            );
            RequestFilterFields = "No.", "Gen. Prod. Posting Group", Quality, "ABCD Category";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportLanguageCode; ReportLanguageCode)
            {
                IncludeCaption = false;
            }
            column(ReportCaptionName; ReportCaptionName)
            {
                IncludeCaption = false;
            }
            dataitem("Item Translation"; "Item Translation")
            {
                RequestFilterFields = "Language Code";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ItemUnitMeasureSALESLength; ItemUnitMeasureSALESLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESWidth; ItemUnitMeasureSALESWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESHeight; ItemUnitMeasureSALESHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceSALESReferenceNo; ItemReferenceSALESReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESNetWeight; ItemSALESNetWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESGrossWeight; ItemUnitMeasureSALESGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureSALESCubage; ItemUnitMeasureSALESCubage)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESTariffNo; ItemSALESTariffNo)
                {
                    IncludeCaption = false;
                }
                column(ItemSALESCountryOfOriginLookupName; ItemSALESCountryOfOriginLookupName)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERQuantity; ItemUnitMeasureINNERQuantity)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERLength; ItemUnitMeasureINNERLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERWidth; ItemUnitMeasureINNERWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERHeight; ItemUnitMeasureINNERHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceINNERReferenceNo; ItemCrossReferenceINNERReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERGrossWeight; ItemUnitMeasureINNERGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureINNERCubage; ItemUnitMeasureINNERCubage)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERQuantity; ItemUnitMeasureOUTERQuantity)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERLength; ItemUnitMeasureOUTERLength)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERWidth; ItemUnitMeasureOUTERWidth)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERHeight; ItemUnitMeasureOUTERHeight)
                {
                    IncludeCaption = false;
                }
                column(ItemCrossReferenceOUTERReferenceNo; ItemReferenceOUTERReferenceNo)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERGrossWeight; ItemUnitMeasureOUTERGrossWeight)
                {
                    IncludeCaption = false;
                }
                column(ItemUnitMeasureOUTERCubage; ItemUnitMeasureOUTERCubage)
                {
                    IncludeCaption = false;
                }
            }
            trigger OnAfterGetRecord();
            begin
                //Reset

                ItemSALESNetWeight := 0;
                ItemUnitMeasureSALESGrossWeight := 0;
                ItemUnitMeasureSALESCubage := 0;
                ItemSALESTariffNo := '';

                ItemSALESCountryOfOriginLookupName := '';

                ItemUnitMeasureINNERQuantity := 0;
                ItemUnitMeasureINNERLength := 0;
                ItemUnitMeasureINNERWidth := 0;
                ItemUnitMeasureINNERHeight := 0;
                ItemCrossReferenceINNERReferenceNo := '';
                ItemUnitMeasureINNERGrossWeight := 0;
                ItemUnitMeasureINNERCubage := 0;

                ItemUnitMeasureOUTERQuantity := 0;
                ItemUnitMeasureOUTERLength := 0;
                ItemUnitMeasureOUTERWidth := 0;
                ItemUnitMeasureOUTERHeight := 0;
                ItemReferenceOUTERReferenceNo := '';
                ItemUnitMeasureOUTERGrossWeight := 0;
                ItemUnitMeasureOUTERCubage := 0;


                //Sales Item
                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, Item."Base Unit of Measure");
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureSALESLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureSALESWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureSALESHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureSALESGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureSALESCubage := ItemUnitofMeasure.Cubage;
                end;

                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", Item."Base Unit of Measure");
                If ItemReference.FindFirst then begin
                    ItemReferenceSALESReferenceNo := ItemReference."Reference No.";
                end;

                ItemSALESNetWeight := Item."Net Weight";
                ItemSALESTariffNo := Item."Tariff No.";

                ItemSALESCountryOfOriginLookupName := Item."Country/Region of Origin Code";

                //INNER,,MASTER Item
                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, 'INNER');
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureINNERQuantity := ItemUnitofMeasure."Qty. per Unit of Measure";
                    ItemUnitMeasureINNERLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureINNERWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureINNERHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureINNERGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureINNERCubage := ItemUnitofMeasure.Cubage;
                end;

                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", '%1|%2', 'INNER', 'INNER');
                If ItemReference.FindFirst() then begin
                    ItemCrossReferenceINNERReferenceNo := ItemReference."Reference No.";
                end;


                //OUTER Item
                ItemReference.Reset();
                ItemReference.SetFilter("Item No.", item."No.");
                ItemReference.SetFilter("Reference Type", '%1', 3);
                ItemReference.SetFilter("Unit of Measure", '%1|%2', 'MASTER', 'OUTER');
                If ItemReference.FindFirst() then begin
                    ItemReferenceOUTERReferenceNo := ItemReference."Reference No.";
                end;

                ItemUnitofMeasure.Reset();
                ItemUnitofMeasure.SetFilter("Item No.", Item."No.");
                ItemUnitofMeasure.SetFilter(Code, '%1|%2', 'MASTER', 'OUTER');
                if ItemUnitofMeasure.FindFirst() then begin
                    ItemUnitMeasureOUTERQuantity := ItemUnitofMeasure."Qty. per Unit of Measure";
                    ItemUnitMeasureOUTERLength := ItemUnitofMeasure.Length;
                    ItemUnitMeasureOUTERWidth := ItemUnitofMeasure.Width;
                    ItemUnitMeasureOUTERHeight := ItemUnitofMeasure.Height;
                    ItemUnitMeasureOUTERGrossWeight := ItemUnitofMeasure.Weight;
                    ItemUnitMeasureOUTERCubage := ItemUnitofMeasure.Cubage;
                end;

            end;

        }
    }

    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Scanpan)
                {
                    Caption = 'Scanpan';

                    field(ReportLanguageOption; ReportLanguageOpt)
                    {
                        Caption = 'Select report language';
                        ToolTip = 'What language format the report should be in.';
                        OptionCaption = 'Dansk,English';
                        ApplicationArea = Basic;
                    }
                }
                group(Options)
                {
                    Visible = false;
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    labels
    {
        LabelName = 'Label Text';
    }

    local procedure getItemUnitofMeasure()
    begin

    end;

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        //Language
        ReportLanguageCode := 'ENU';
        ReportCaptionName := 'Customs Declaration';
        if ReportLanguageOpt = 0 then begin
            ReportLanguageCode := 'DAN';
            ReportCaptionName := 'Toldangivelse';
        end;
        CurrReport.LANGUAGE := CU43.GetLanguageId(ReportLanguageCode);  //GetLanguageID(ReportLanguageCode);


        ;
        ReportsForNavPre;
    end;

    var
        //Varables here

        //Report fields
        ItemUnitMeasureSALESLength: Decimal;
        ItemUnitMeasureSALESWidth: Decimal;
        ItemUnitMeasureSALESHeight: Decimal;

        ItemReferenceSALESReferenceNo: Text[50];

        ItemSALESNetWeight: Decimal;
        ItemUnitMeasureSALESGrossWeight: Decimal;
        ItemUnitMeasureSALESCubage: Decimal;
        ItemSALESTariffNo: Text[20];

        ItemSALESCountryOfOriginLookupName: Text[100];

        ItemUnitMeasureINNERQuantity: Decimal;
        ItemUnitMeasureINNERLength: Decimal;
        ItemUnitMeasureINNERWidth: Decimal;
        ItemUnitMeasureINNERHeight: Decimal;
        ItemCrossReferenceINNERReferenceNo: Text[50];
        ItemUnitMeasureINNERGrossWeight: Decimal;
        ItemUnitMeasureINNERCubage: Decimal;

        ItemUnitMeasureOUTERQuantity: Decimal;
        ItemUnitMeasureOUTERLength: Decimal;
        ItemUnitMeasureOUTERWidth: Decimal;
        ItemUnitMeasureOUTERHeight: Decimal;
        ItemReferenceOUTERReferenceNo: Text[50];
        ItemUnitMeasureOUTERGrossWeight: Decimal;
        ItemUnitMeasureOUTERCubage: Decimal;
        //



        ReportLanguageOpt: Option;
        ReportLanguageCode: Code[10];
        ReportCaptionName: Text[50];
        //Records here
        ItemUnitofMeasure: Record "Item Unit of Measure";

        ItemReference: record "Item Reference";

        //CodeUnits here
        CU43: Codeunit Language;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50002_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.2.0.2471")
    {
        type(ForNav.Report_7_2_0_2471; ForNavReport50012_v7_2_0_2471) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50012) { }
        type("System.IO.Path"; System_IO_Path50012) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->




/// <summary>
/// Report DebitorAddress (ID 50012).
/// </summary>
Report 50012 "DebitorAddress"
{
    RDLCLayout = '.\src\report\layout\DebitorAddress.rdlc';
    DefaultLayout = RDLC;

    Caption = 'DebitorAddress';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = Blocked, "Country/Region Code", "Salesperson Code";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem(CDOE_MailRecipient; "CDO E-Mail Recipient")
            {
                RequestFilterFields = "Document Code";
                DataItemLink = "No." = field("No.");
#pragma warning disable AL0603
                DataItemTableView = where(Table = CONST(0));
#pragma warning restore AL0603
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50012_v7_2_0_2471;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path50012;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_2_0_2471\ForNav.Reports.7.2.0.2471.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.2.0.2471.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.2.0.2471 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.7.2.0.2471")
	{
		type(ForNav.Report_7_2_0_2471; ForNavReport50013_v7_2_0_2471){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50013){}   
		type("System.IO.Path"; System_IO_Path50013) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->



report 50013 "EmployeeSales"
{
	AdditionalSearchTerms = 'Scanpan';
	Caption = 'Employee Sales';
	RDLCLayout = './src/report/layout/EmployeeSales.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Customer;Customer)
		{
			DataItemTableView = where("No." = filter(1027 | 1029 | 1039));
			column(ReportForNavId_1; 1) {} // Autogenerated by ForNav - Do not delete
			dataitem("Cust. Ledger Entry";"Cust. Ledger Entry")
			{
				CalcFields = "Remaining Amt. (LCY)";
				DataItemLink = "Customer No." = FIELD("No.");
				DataItemTableView = where(Open = const(true));
				column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
				dataitem("Sales Invoice Header";"Sales Invoice Header")
				{
					RequestFilterFields = "No.";
					DataItemLink = "No." = FIELD("Document No.");
					column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
				}
			}
		}
	}
	requestpage
	{
		SaveValues = false;
		layout
		{
			area(Content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;

	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;
	end;

	trigger OnPreReport()
	begin
		;ReportsForNavPre;
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50013_v7_2_0_2471;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		ApplicationSystemConstants: Codeunit "Application System Constants";
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50013;
		ReportForNavObject: Variant;
	begin
		addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_2_0_2471\ForNav.Reports.7.2.0.2471.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.2.0.2471.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 7.2.0.2471 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav := ReportForNavObject;
		ReportForNav.Init();
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre() then CurrReport.Quit();
	end;

	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50009_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Faktura Varekoder 50009 (ID 50009).
/// </summary>
report 50009 "Faktura Varekoder"

// 
// 2022.11 JH   Konverteret kode fra NAV udviklet 2009 - Tarfiff
// 
//

{
    RDLCLayout = './src/report/layout/FakturaVarekoder50009.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Invoice TariffCode';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("Sales Invoice Header"; "Sales Invoice Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.";
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Sales Invoice Line"; "Sales Invoice Line")
            {
                DataItemTableView = sorting("Document No.", "Line No.");
                DataItemLink = "Document No." = FIELD("No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                trigger OnAfterGetRecord();
                var

                Begin
                    IF Items.GET("Sales Invoice Line"."No.") THEN BEGIN
                        //IF Items."Tariff No." = '' THEN Items."Tariff No." := 'NONEXIST';
                        IF "Sales Invoice Header"."Currency Code" = '' THEN
                            "Sales Invoice Header"."Currency Code" := GeneralLedgerSetup."LCY Code";

                        ItemTariff.Get(Items."Tariff No.");
                        Brugstarif[3, 1] := Items."Tariff No."; // + '		   ' + Items."Country/Region of Origin Code";
                        Brugstarif[3, 2] := "Sales Invoice Header"."Currency Code";
                        Brugstarif[3, 3] := Items."Country/Region of Origin Code";
                        Brugstarif[3, 4] := ItemTariff.Description;
                        Brugstarif[3, 5] := Items."Country/Region of Origin Code";
                        // 2010.06.10 JH
                        // Dobbelt prisliste
                        //	  BrugstarifValues[1,50] := "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[2,50] := Items."Gross Weight" * "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[3,50] := Items."Net Weight" * "Sales Invoice Line".Quantity;
                        //	  BrugstarifValues[4,50] := "Sales Invoice Line".Amount;

                        BrugstarifValues[1, 50] := "Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure";
                        BrugstarifValues[2, 50] :=
                                              Items."Gross Weight" *
                                              ("Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure");
                        BrugstarifValues[3, 50] :=
                                              Items."Net Weight" *
                                              ("Sales Invoice Line".Quantity * "Sales Invoice Line"."Qty. per Unit of Measure");
                        BrugstarifValues[4, 50] := "Sales Invoice Line".Amount;
                        // 2010.06.10 JH

                        BrugstarifValues[5, 50] := "Sales Invoice Line".Amount;
                        IF "Sales Invoice Header"."Currency Factor" <> 0 THEN
                            BrugstarifValues[5, 50] := "Sales Invoice Line".Amount /
                                                      "Sales Invoice Header"."Currency Factor";

                        buildTariff;
                    END;
                End;

            }
        }
        dataitem(Integer; Integer)
        {
            MaxIteration = 49;
            DataItemTableView = sorting(Number);
            column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
            column(Brugstarif_TariffCode; Brugstarif_TariffCode)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_TariffDescription; Brugstarif_TariffDescription)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_ItemCountryOriginCode; Brugstarif_ItemCountryOriginCode)
            {
                IncludeCaption = false;
            }
            column(Brugstarif_CurrencyTxt; Brugstarif_CurrencyTxt)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_Quantity; BrugstarifValues_Quantity)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_BTWeight; BrugstarifValues_BTWeight)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_NTWeight; BrugstarifValues_NTWeight)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueCurrency; BrugstarifValues_ValueCurrency)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueRV; BrugstarifValues_ValueRV)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_Quantity_Total; BrugstarifValues_Quantity_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_BTWeight_Total; BrugstarifValues_BTWeight_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_NTWeight_Total; BrugstarifValues_NTWeight_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueCurrency_Total; BrugstarifValues_ValueCurrency_Total)
            {
                IncludeCaption = false;
            }
            column(BrugstarifValues_ValueRV_Total; BrugstarifValues_ValueRV_Total)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            var

            begin
                c := 0;
            end;

            trigger OnAfterGetRecord();
            var

            begin
                If c > 49 then CurrReport.SKIP;
                c += 1;
                IF Brugstarif[1, c] = '' THEN CurrReport.SKIP;


                Brugstarif_TariffCode := Brugstarif[1, c];
                Brugstarif_CurrencyTxt := Brugstarif[2, c];
                Brugstarif_TariffDescription := Brugstarif[4, c];
                Brugstarif_ItemCountryOriginCode := Brugstarif[5, c];

                BrugstarifValues_Quantity := BrugstarifValues[1, c];
                BrugstarifValues_BTWeight := BrugstarifValues[2, c];
                BrugstarifValues_NTWeight := BrugstarifValues[3, c];
                BrugstarifValues_ValueCurrency := BrugstarifValues[4, c];
                BrugstarifValues_ValueRV := BrugstarifValues[5, c];



                BrugstarifValues[1, 51] += BrugstarifValues[1, c];
                BrugstarifValues[2, 51] += BrugstarifValues[2, c];
                BrugstarifValues[3, 51] += BrugstarifValues[3, c];
                BrugstarifValues[4, 51] += BrugstarifValues[4, c];
                BrugstarifValues[5, 51] += BrugstarifValues[5, c];
                BrugstarifValues[6, 51] += BrugstarifValues[6, c];

            end;

        }
        dataitem("Integer Total"; Integer)
        {
            MaxIteration = 1;
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
            trigger OnAfterGetRecord();
            begin
                BrugstarifValues_Quantity_Total := BrugstarifValues[1, 51];
                BrugstarifValues_BTWeight_Total := BrugstarifValues[2, 51];
                BrugstarifValues_NTWeight_Total := BrugstarifValues[3, 51];
                BrugstarifValues_ValueCurrency_Total := BrugstarifValues[4, 51];
                BrugstarifValues_ValueRV_Total := BrugstarifValues[5, 51];

                //BrugstarifValues[6, 51];

            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    local procedure BuildTariff();
    var
        cInt: Integer;
        hit: Boolean;
    begin

        //  Brugstarif[1,c] = Tariff
        //  Brugstarif[3,2] := "Sales Invoice Header"."Currency Code";

        //  BrugstarifValues[1,c] = Quantity
        //  BrugstarifValues[2,c] = GrossWeight * Quantity
        //  BrugstarifValues[3,c] = NetWeight * Quantity
        //  BrugstarifValues[4,c] = ItemCost
        //  BrugstarifValues[5,c] = ItemCost * CurrencyFactor / 100

        hit := false;
        for cInt := 1 to 49 do begin
            if Brugstarif[1, cInt] = Brugstarif[3, 1] then begin
                Brugstarif[2, cInt] := Brugstarif[3, 2];
                Brugstarif[4, cInt] := Brugstarif[3, 4];
                Brugstarif[5, cInt] := Brugstarif[3, 5];
                BrugstarifValues[1, cInt] += BrugstarifValues[1, 50];
                BrugstarifValues[2, cInt] += BrugstarifValues[2, 50];
                BrugstarifValues[3, cInt] += BrugstarifValues[3, 50];
                BrugstarifValues[4, cInt] += BrugstarifValues[4, 50];
                BrugstarifValues[5, cInt] += BrugstarifValues[5, 50];
                BrugstarifValues[6, cInt] += BrugstarifValues[6, 50];
                hit := true;
            end;
        end;
        if not hit then begin
            for cInt := 1 to 49 do begin
                if Brugstarif[1, cInt] = '' then begin
                    Brugstarif[1, cInt] := Brugstarif[3, 1];
                    Brugstarif[2, cInt] := Brugstarif[3, 2];
                    Brugstarif[4, cInt] := Brugstarif[3, 4];
                    Brugstarif[5, cInt] := Brugstarif[3, 5];
                    BrugstarifValues[1, cInt] := BrugstarifValues[1, 50];
                    BrugstarifValues[2, cInt] := BrugstarifValues[2, 50];
                    BrugstarifValues[3, cInt] := BrugstarifValues[3, 50];
                    BrugstarifValues[4, cInt] := BrugstarifValues[4, 50];
                    BrugstarifValues[5, cInt] := BrugstarifValues[5, 50];
                    BrugstarifValues[6, cInt] := BrugstarifValues[6, 50];

                    exit;
                end;
            end;
        end;
    end;

    var
        c: Integer;
        Items: Record Item;
        ItemTariff: Record "Tariff Number";
        GeneralLedgerSetup: Record "General Ledger Setup";
        Brugstarif: array[5, 50] of code[100];
        BrugstarifValues: array[7, 51] of Decimal;

        Brugstarif_TariffCode: Text[20];
        Brugstarif_TariffDescription: Text[100];
        Brugstarif_ItemCountryOriginCode: Text[10];
        Brugstarif_CurrencyTxt: Text[20];
        BrugstarifValues_Quantity: Decimal;
        BrugstarifValues_BTWeight: Decimal;
        BrugstarifValues_NTWeight: Decimal;
        BrugstarifValues_ValueCurrency: Decimal;
        BrugstarifValues_ValueRV: Decimal;

        BrugstarifValues_Quantity_Total: Decimal;
        BrugstarifValues_BTWeight_Total: Decimal;
        BrugstarifValues_NTWeight_Total: Decimal;
        BrugstarifValues_ValueCurrency_Total: Decimal;
        BrugstarifValues_ValueRV_Total: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50009_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.2.0.2471")
    {
        type(ForNav.Report_7_2_0_2471; ForNavReport50014_v7_2_0_2471) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50014) { }
        type("System.IO.Path"; System_IO_Path50014) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->















Report 50014 "ForNAV 50014"
{
    RDLCLayout = '.\Layouts\ForNAV50014.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Integer; Integer)
        {
            MaxIteration = 1;
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
        }
        dataitem(Customer; Customer)
        {
            DataItemTableView = where("Country/Region Code" = FILTER(<> 'DK'));
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Cust. Ledger Entry"; "Cust. Ledger Entry")
            {
                CalcFields = "Amount (LCY)";
                DataItemLink = "Customer No." = FIELD("No.");
                DataItemTableView = where(Open = CONST(true));
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(LineNo; LineNo)
                {
                    IncludeCaption = false;
                }
                column(StartingDate; StartingDate)
                {
                    IncludeCaption = false;
                }
                column(EndingDate; EndingDate)
                {
                    IncludeCaption = false;
                }
                trigger OnPreDataItem();
                begin
                    "Cust. Ledger Entry".SetRange("Posting Date", StartingDate, EndingDate);
                end;

                trigger OnAfterGetRecord();
                var
                    SetSKip: Boolean;
                begin
                    LineNo += 1;
                    SetSkip := false;
                    if CountryRegion.Get(Customer."Country/Region Code") then begin
                        SetSKip := false;
                        if CountryRegion."EU Country/Region Code" = '' then SetSKip := true;
                    end else
                        SetSkip := true;
                    if SetSKip = true then CurrReport.Skip();
                end;

            }
        }
        dataitem(Integer2; Integer)
        {
            MaxIteration = 1;
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Scanpan)
                {
                    Caption = 'Scanpan';
                    field(StartingDate; StartingDate)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Start date';
                    }
                    field(EndingDate; EndingDate)
                    {
                        ApplicationArea = Basic;
                        Caption = 'End date';
                    }
                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    var
        CountryRegion: Record "Country/Region";
        LineNo: Integer;
        StartingDate: Date;
        EndingDate: Date;

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
        //"Cust. Ledger Entry".SetFilter("Posting Date",'%1..%2', StartingDate,EndingDate);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50014_v7_2_0_2471;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path50014;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_2_0_2471\ForNav.Reports.7.2.0.2471.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.2.0.2471.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.2.0.2471 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
/// <summary>
/// Report Hyldelabel (ForNAV) (ID 50003).
/// </summary>
Report 50003 "Hyldelabel"
{
    RDLCLayout = './src/report/layout/Hyldelabel(ForNAV).rdlc';
    DefaultLayout = RDLC;

    Caption = 'Shelf Label';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Bin; Bin)
        {
            RequestFilterFields = "Location Code", Code;

            column(ReportForNavId_1; 1)
            {
            } // Autogenerated by ForNav - Do not delete
        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;
    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50002_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2250\ForNav.Reports.6.3.0.2250.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2250.dll';
            if not File.Exists(tempAddInFileName) then Error('Please install the ForNAV DLL version 6.3.0.2250 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50007_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Licenseplate 50007 (ID 50007).
/// </summary>
Report 50007 "Licenseplate"
{
    RDLCLayout = './src/report/layout/Licenseplate50007.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Licenseplate';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Integer; Integer)
        {
            MaxIteration = 100;
            DataItemTableView = sorting(Number);
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(LabelID; LabelID)
            {
                IncludeCaption = false;
            }
            column(Counter; Counter)
            {
                IncludeCaption = false;
            }
            column(AntalLabels; AntalLabels)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, AntalLabels);
                if AntalLabels = 0 then Error('Du skal vælge et antal labels til udskrift');
                if AntalLabels > 100 then Error('Du kan ikke vælge mere end 100 antal labels');
            end;

            trigger OnAfterGetRecord();
            begin
                if LabelID = '' then begin
                    CounterValidate := NoSeriesMgt.GetNextNo('L-LICENCEPLTE', WorkDate(), TRUE);
                    IF StrLen(CounterValidate) > 10 then Error('Stergkodelængde kan maks. være 10 tegn. Juster Nummerserie.');
                    Counter := CounterValidate
                end
                else begin
                    CounterValidate := LabelID;
                    IF StrLen(CounterValidate) > 10 then Error('Stergkodelængde kan maks. være 10 tegn.');
                    Counter := CounterValidate;

                end;


            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';
                    field(AntalLabels; AntalLabels)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Antal plukkelabels til udskrift';
                        ToolTip = 'Vælg hvor mange plukkelabels der skal udskrives. Maks. 100 stk. pr. udskrift.';
                    }
                    field(LabelID; LabelID)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Manuel kode';
                        ToolTip = 'Her kan der angives en bestemt kode til udskrift. Det er samme kode, der skrive på alle antal labels der bestilles.';

                    }
                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

        //SCANPAN

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;

    end;

    var
        AntalLabels: Integer;
        LabelID: Text[10];
        Counter: Text[10];
        CounterValidate: Text[30];
        //RECORDS
        NoSeriesLine: Record "No. Series Line";
        //CODEUNIT
        NoSeriesMgt: Codeunit NoSeriesManagement;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50007_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50010_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Ordrebeholdning 50010 (ID 50010).
/// </summary>
Report 50010 "Ordrebeholdning"
{
    AdditionalSearchTerms = 'Scanpan';

    caption = 'Order Inventory';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/Ordrebeholdning50010.rdlc';

    dataset
    {
        dataitem("Company Information"; "Company Information")
        {
            column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
        }
        dataitem("Sales Line"; "Sales Line")
        {
#pragma warning disable AL0603 // TODO: - Kan ikke få :: til at virke her
            DataItemTableView = sorting("Document Type", "Document No.", Type, "Line No.") where("Document Type" = CONST(1));
#pragma warning restore AL0603 // TODO: - Kan ikke få :: til at virke her
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportCaptionName; ReportCaptionName)
            {
                IncludeCaption = false;
            }
            column(LanguageSelected; LanguageSelectedCode)
            {
                IncludeCaption = false;
            }
            column(ReportLanguageCode; ReportLanguageCodeCode)
            {
                IncludeCaption = false;
            }
            column(ItemTranslationText; ItemTranslationText)
            {
                IncludeCaption = false;
            }
            dataitem("Sales Header"; "Sales Header")
            {
                DataItemLink = "Document Type" = FIELD("Document Type"), "No." = FIELD("Document No.");
                DataItemTableView = sorting("Document Type", "No.") where("Document Type" = CONST(Order));
                RequestFilterFields = "No.", "Sell-to Customer No.", "External Document No.", "Shipment Date";
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            }
            trigger OnAfterGetRecord();
            var
                sl: Record "Sales Line";
            begin
                ItemTranslationText := LookupItemTranslation("Sales Line"."No.", LanguageSelectedCode);
            end;

        }
    }

    requestpage
    {

        SaveValues = false;
        layout
        {
            area(content)
            {
                group(Scanpan)
                {
                    Caption = 'Scanpan';
                    label(explainer)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = '** To export;choose Excel(data and layout)';
                    }
                    field(ReportLanguageOption; ReportLanguageOptionOpt)
                    {
                        ApplicationArea = Basic;
                        //Caption = 'Select report language';
                        Caption = 'Report Caption Language';
                        OptionCaption = 'Dansk,English';
                    }

                    field(LanguageSelected; LanguageSelectedCode)
                    {
                        ApplicationArea = Basic;
                        //Caption = 'Sprog';
                        Caption = 'Item language';
                        TableRelation = Language.Code;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            rLanguage: Record Language;
                        begin
                            rLanguage.SetFilter(Code, 'DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL');
                            if page.RunModal(Page::Languages, rLanguage) = Action::LookupOK then LanguageSelectedCode := rLanguage.Code;

                        end;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

        actions
        {
        }
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPreReport()
    begin
        //Language
        ReportLanguageCodeCode := 'ENU';
        ReportCaptionName := 'Order status';
        IF ReportLanguageOptionOpt = 0 THEN begin
            ReportLanguageCodeCode := 'DAN';
            ReportCaptionName := 'Ordrebeholdning';
        end;

        //CurrReport.LANGUAGE := ReportLanguage.GetLanguageID(ReportLanguageCode);

        CurrReport.LANGUAGE := LanguageCU.GetLanguageID(ReportLanguageCodeCode);

        ReportsForNavPre;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    var
        //TABLES
        //ReportLanguage: Record Language;
        LanguageCU: Codeunit Language;
        ReportLanguageCodeCode: Code[10];
        //VARIABLES
        LanguageSelectedCode: Code[20];
        ReportLanguageOptionOpt: Option;
        ReportCaptionName: Text[50];
        ItemTranslationText: Text[200];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50010_v7_0_0_2350;

    local procedure LookupItemTranslation(ItemNo: code[20]; LanguageID: code[20]): Text[200];
    var
        ItemTranslation: Record "Item Translation";
    begin
        ItemTranslation.SetFilter("Item No.", ItemNo);
        ItemTranslation.SetFilter("Language Code", LanguageID);
        if ItemTranslation.FindFirst() then
            exit(ItemTranslation.Description) else
            exit("Sales Line".Description);


    end;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet Path;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
/*
//SHIPITREMOVE

/// <summary>
/// Report Palleliste Eksport 50011 (ID 50011).
/// </summary>

#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50011_v7_0_0_2350) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50011) { }
        type("System.IO.Path"; System_IO_Path50011) { }
    } 
} // Reports ForNAV Autogenerated code - do not delete or modify -->
Report 50011 "Palleliste Eksport"
{

    RDLCLayout = './src/report/layout/Palleliste50011.rdlc';
    DefaultLayout = RDLC;

        Caption = 'Exportpallets report';
        AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem("IDYS Transport Order Header"; "IDYS Transport Order Header")
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
            dataitem("IDYS Transport Order Package"; "IDYS Transport Order Package")
            {
                DataItemLink = "Transport Order No." = FIELD("No.");
                DataItemTableView = sorting("Transport Order No.", "Line No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                dataitem(MOSLicensePlateContent2; "MOS License Plate Content")
                {
                    DataItemLink = "License Plate No." = FIELD("License Plate No.");
                    DataItemLinkReference = "IDYS Transport Order Package";
                    DataItemTableView = sorting("License Plate No.", "No.");
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(tolDescription; tolDescription)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemCu2; ItemCu2)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemGrossWeight; ItemGrossWeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemHeight; ItemHeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemLength; ItemLength)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemNetWeight; ItemNetWeight)
                    {
                        IncludeCaption = false;
                    }
                    column(ItemWidth; ItemWidth)
                    {
                        IncludeCaption = false;
                    }
                    column(TotalQuantity; TotalQuantity)
                    {
                        IncludeCaption = false;
                    }
                    trigger OnPreDataItem();
                    var
                        Text000Lbl: Label 'Please set the filter for Transport Order No.';
                    begin
                        if "IDYS Transport Order Header".GetFilter("No.") = '' then Error(Text000Lbl);

                        getTotals("IDYS Transport Order Header".GetFilter("No."))
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        GetItem(MOSLicensePlateContent2."No.");

                        IDYSTransportOrderLine.SetFilter("Transport Order No.", "IDYS Transport Order Header"."No.");
                        IDYSTransportOrderLine.SetFilter("Source Document No.", MOSLicensePlateContent2."Source No.");
                        IDYSTransportOrderLine.SetFilter("Item No.", tolItemNo);
                        tolDescription := tolItemNo;

                        If not IDYSTransportOrderLine.FindFirst() then CurrReport.Skip();
                        tolDescription := IDYSTransportOrderLine.Description;
                    end;

                }
            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    var
        IDYSTransportOrderLine: Record "IDYS Transport Order Line";
        tolItemNo: code[20];
        tolDescription: Text[200];

        ItemWidth: Decimal;
        ItemHeight: Decimal;
        ItemLength: Decimal;
        ItemGrossWeight: Decimal;
        ItemNetWeight: Decimal;
        ItemCu2: Decimal;
        TotalQuantity: Decimal;

    local procedure getItem(ItemNo: code[20])
    var
        items: Record Item;
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        If Items.Get(ItemNo) then begin
            ItemGrossWeight := items."Gross Weight";
            ItemNetWeight := items."Net Weight";
            tolItemNo := items."No.";
        end;
        if ItemUnitOfMeasure.Get(ItemNo, Items."Base Unit of Measure") then begin
            ItemWidth := ItemUnitOfMeasure.Width;
            ItemHeight := ItemUnitOfMeasure.Height;
            ItemLength := ItemUnitOfMeasure.Length;
            ItemCu2 := ItemUnitOfMeasure.Cubage;
        end;
    end;

    local procedure getTotals(TransportOrderNo: Text)
    var
        TransportOrderLine: Record "IDYS Transport Order Line";
    begin
        TransportOrderLine.SetFilter("Transport Order No.", TransportOrderNo);
        TotalQuantity := 0;
        If TransportOrderLine.FindSet() then
            repeat
                TotalQuantity += TransportOrderLine."Qty. (Base)";
            until TransportOrderLine.Next() = 0;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50011_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path50011;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->

}
*/ 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50011_v7_0_0_2350) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50011) { }
        type("System.IO.Path"; System_IO_Path50011) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->






report 50011 "PalletShipmentReport"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Pallet Shipment Report';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/PalletShipmentReport50011.rdlc';

    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number) where(Number = FILTER(1 ..));
            MaxIteration = 1;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            dataitem("Posted Whse. Shipment Header"; "Posted Whse. Shipment Header")
            {
                RequestFilterFields = "No.", "Whse. Shipment No.";
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ItemDescription; ItemDescription)
                {
                    IncludeCaption = false;
                }
                column(NameShipTo; NameShipTo)
                {
                    IncludeCaption = false;
                }
                dataitem("MOB License Plate"; "MOB License Plate")
                {
                    DataItemLink = "Whse. Document No." = FIELD("No.");
                    column(MOBLicensePlateRecordNo; MOBLicensePlateRecordNo)
                    {
                        IncludeCaption = false;
                    }
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(TotalCubage; TotalCubage)
                    {
                        IncludeCaption = false;
                    }
                    column(TotalPalletWeight; TotalPalletWeight)
                    {
                        IncludeCaption = false;
                    }
                    dataitem("MOB License Plate Content"; "MOB License Plate Content")
                    {
                        DataItemLink = "License Plate No." = FIELD("No.");
                        column(ReportForNavId_4; 4) { } // Autogenerated by ForNav - Do not delete
                        column(TotalItemBTWeight; TotalItemGrossWeight)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalItemNTWeight; TotalItemNetWeight)
                        {
                            IncludeCaption = false;
                        }
                        column(TotalQuantity; TotalQuantity)
                        {
                            IncludeCaption = false;
                        }
                        trigger OnAfterGetRecord();
                        var
                            Item: Record Item;
                            PostedWhseShipmentLine: Record "Posted Whse. Shipment Line";
                        begin
                            //Quantity
                            TotalQuantity += Quantity;
                            PostedWhseShipmentLine.Reset();
                            PostedWhseShipmentLine.SetFilter("No.", "MOB License Plate Content"."Whse. Document No.");
                            PostedWhseShipmentLine.SetFilter("Item No.", '%1', "MOB License Plate Content"."No.");
                            ItemDescription := '';

                            //ItemWeights
                            Item.Reset();
                            if Item.Get("MOB License Plate Content"."No.") then begin
                                TotalItemGrossWeight += (Item."Gross Weight" * "MOB License Plate Content".Quantity);
                                TotalItemNetWeight += (Item."Net Weight" * "MOB License Plate Content".Quantity);
                            end;

                            //ItemDescription
                            if PostedWhseShipmentLine.FindFirst() then ItemDescription := PostedWhseShipmentLine.Description;
                            //Try Item Card
                            if ItemDescription = '' then begin
                                Item.Reset;
                                if Item.Get("MOB License Plate Content"."No.") then
                                    ItemDescription := Item.Description;
                            end;
                        end;

                    }
                    trigger OnAfterGetRecord();
                    begin
                        MOBLicensePlateRecordNo += 1;

                        //Cubage
                        TotalCubage += (("MOB License Plate".Height * "MOB License Plate".Width * "MOB License Plate".Length) / 1000000);

                        //PalletWeight
                        TotalPalletWeight += "MOB License Plate".Weight;
                    end;

                }
                trigger OnAfterGetRecord();
                var
                    PostedWhseShipmentLine: Record "Posted Whse. Shipment Line";
                    SalesHeader: Record "Sales Header";
                    SalesInvoiceHeader: Record "Sales Invoice Header";
                begin
                    NameShipTo := '';

                    PostedWhseShipmentLine.SetFilter("No.", "Posted Whse. Shipment Header"."No.");
                    if PostedWhseShipmentLine.FindFirst() then begin
                        //Try salesheader
                        SalesHeader.Reset();
                        SalesHeader.SetRange("Document Type", SalesHeader."Document Type"::Order);
                        SalesHeader.SetFilter("No.", PostedWhseShipmentLine."Source No.");

                        if SalesHeader.FindFirst() then begin
                            NameShipTo := SalesHeader."Ship-to Name";
                            if NameShipTo = '' then NameShipTo := SalesHeader."Bill-to Name";
                        end else begin
                            //Try posted invoice
                            SalesInvoiceHeader.Reset();
                            SalesInvoiceHeader.SetFilter("Order No.", PostedWhseShipmentLine."Source No.");
                            if SalesInvoiceHeader.FindFirst() then begin
                                NameShipTo := SalesInvoiceHeader."Ship-to Name";
                                if NameShipTo = '' then NameShipTo := SalesInvoiceHeader."Bill-to Name";
                            end;
                        end;
                    end;
                end;

            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
            }
        }

    }

    var

        //CodeUnits here
        CU43: Codeunit Language;

        //Code
        ReportLanguageCode: Code[10];
        TotalCubage: Decimal;
        TotalItemGrossWeight: Decimal;
        TotalItemNetWeight: Decimal;
        TotalPalletWeight: Decimal;

        //Integer
        MOBLicensePlateRecordNo: Integer;
        TotalQuantity: Integer;

        //Option
        ReportLanguageOpt: Option;

        //Text
        ReportCaptionName: Text[50];
        NonKeyFieldValue: Text[100];
        ItemDescription: Text[120];
        NameShipTo: Text[120];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50011_v7_0_0_2350;

    trigger OnInitReport();
    begin
        ;
        ReportsForNavInit;
    end;

    trigger OnPreReport()
    begin
        ;
        //Language
        ReportLanguageCode := 'ENU';
        /*
		ReportCaptionName := 'Customs Declaration';
		if ReportLanguageOpt = 0 then begin
			ReportLanguageCode := 'DAN';
			ReportCaptionName := 'Toldangivelse';
		end;
		*/
        CurrReport.LANGUAGE := CU43.GetLanguageId(ReportLanguageCode);  //GetLanguageID(ReportLanguageCode);


        ;
        ReportsForNavPre;
    end;

    trigger OnPostReport();
    begin
        ;
        ReportForNav.Post;
    end;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet System_IO_Path50011;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.2.0.2471")
    {
        type(ForNav.Report_7_2_0_2471; ForNavReport50001_v7_2_0_2471) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50001) { }
        type("System.IO.Path"; System_IO_Path50001) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->





Report 50001 "ProductionControllingPriority"
{
    Caption = 'Production Controlling Priority Report';
    AdditionalSearchTerms = 'Scanpan';
    RDLCLayout = './src/report/layout/ProductionControllingPriority.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Prod. Order Routing Line"; ProdContllingRoutingLinesTMP)
        {
            RequestFilterFields = Status, Priority, ItemNo, "Ressource No.", "Starting Date", "Ending Date";
            DataItemTableView = sorting(Priority) where(Priority = FILTER(<> 0));
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies the value of the Design field.';
                    }
                }
            }
        }

    }
    var
        ScanpanMiscellaneous: Codeunit ScanpanMiscellaneous;

    trigger OnInitReport()
    begin
        ScanpanMiscellaneous.ControllingFillProductionRouteLine("Prod. Order Routing Line");
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50001_v7_2_0_2471;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path50001;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_2_0_2471\ForNav.Reports.7.2.0.2471.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.2.0.2471.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.2.0.2471 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.3.0.2533")
    {
        type(ForNav.Report_7_3_0_2533; ForNavReport50008_v7_3_0_2533) { }
    }
    assembly("mscorlib")
    {
        Version = '4.0.0.0';
        type("System.IO.Stream"; SystemIOStream50008) { }
        type("System.IO.Path"; System_IO_Path50008) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->


/// <summary>
/// 2024.07             Jesper Harder       074         Salespricelist with switch to show stock levels.
/// </summary>




Report 50008 "Salgsprisliste"
{
    AdditionalSearchTerms = 'Scanpan';
    Caption = 'Sales Pricelist';
    RDLCLayout = './src/report/layout/ForNAV50008.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Price List Line"; "Price List Line")
        {
            column(Barcode; Barcode)
            {
                IncludeCaption = false;
            }
            column(CustomerItemNo; CustomerItemNo)
            {
                IncludeCaption = false;
            }
            column(CustomerName; CustomerName)
            {
                IncludeCaption = false;
            }
            column(CustomerNo; CustomerNo)
            {
                IncludeCaption = false;
            }
            column(CustomerPriceGroup; CustomerPriceGroup)
            {
                IncludeCaption = false;
            }
            column(dVat; dVat)
            {
                IncludeCaption = false;
            }
            column(HasCustomerItemNo; HasCustomerItemNo)
            {
                IncludeCaption = false;
            }
            column(ItemCategoryCode; ItemCategoryCode)
            {
                IncludeCaption = false;
            }
            column(ItemDescription; ItemDescription)
            {
                IncludeCaption = false;
            }
            column(ItemInventoryPostingCode; ItemInventoryPostingCode)
            {
                IncludeCaption = false;
            }
            column(ItemProductGroupCode; ItemProductGroupCode)
            {
                IncludeCaption = false;
            }
            column(ItemProductLineCode; ItemProductLineCode)
            {
                IncludeCaption = false;
            }
            column(ItemQuantiy; ItemQuantiy)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailable; ItemstockAvailable)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailableDate; ItemStockAvailableDate)
            {
                IncludeCaption = false;
            }
            column(ItemStockAvailableExt; ItemStockAvailableExt)
            {
                IncludeCaption = false;
            }
            column(ItemStockLevel; ItemStockLevel)
            {
                IncludeCaption = false;
            }
            column(ItemUnit; ItemUnit)
            {
                IncludeCaption = false;
            }
            column(ItemWeight; ItemWeight)
            {
                IncludeCaption = false;
            }
            column(LanguageSelected; LanguageSelected)
            {
                IncludeCaption = false;
            }
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(SalesPriceNET; SalesPriceNET)
            {
                IncludeCaption = false;
            }
            column(SalesPriceRRP; SalesPriceRRP)
            {
                IncludeCaption = false;
            }
            column(ShowStockLevel; ShowStockLevel)
            {
                IncludeCaption = false;
            }
            column(tVat; tVat)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            var
            begin
                Evaluate(dVat, tVat);

                "Price List Line".SetRange("Asset Type", "Price List Line"."Asset Type"::Item);
                "Price List Line".SetRange("Ending Date", 0D);
                "Price List Line".SetFilter("Starting Date", '<%1', Today());
                "Price List Line".SetRange("Source Type", "Price List Line"."Source Type"::"Customer Price Group");

                if CustomerPriceGroup <> '' then "Price List Line".SetFilter("Source No.", CustomerPriceGroup);
                if ItemProductLineCode <> '' then Items.SetFilter("Product Line Code", ItemProductLineCode);
                if ItemProductGroupCode <> '' then Items.SetFilter("Prod. Group Code", ItemProductGroupCode);
                if ItemInventoryPostingCode <> '' then Items.SetFilter("Gen. Prod. Posting Group", ItemInventoryPostingCode);
                if ItemCategoryCode <> '' then Items.SetFilter("Item Category Code", ItemCategoryCode);
            end;

            trigger OnAfterGetRecord();
            var
                PriceListLine: Record "Price List Line";
            begin

                //Hent alle værdier
                ItemNo := "Price List Line"."Asset No.";

                /* PriceListLine.Copy("Price List Line");
																PriceListLine.SetFilter("Asset No.", ItemNo);
																PriceListLine.FindFirst();
																If (PriceListLine.Count > 1) and (PriceListLine."Minimum Quantity" <= 1) then
																	CurrReport.Skip();
																 */

                //Skip hvis ikke varen er inden for filter
                Items.SetFilter("No.", ItemNo);

                ItemStockAvailable := 0;
                ItemStockAvailableExt := 0;
                ItemStockLevel := 0;
                ItemStockAvailableDate := 0D;

                if not Items.FINDFIRST() then
                    CurrReport.Skip();

                Items.CalcFields(Inventory);
                ItemStockLevel := Items.Inventory;
                ItemStockAvailable := Items."Calculated Available NOTO";
                ItemStockAvailableExt := items."Calculated Available Ext. NOTO";
                ItemStockAvailableDate := items."Calculated Available Date NOTO";

                ItemDescription := ItemDescriptionGet(ItemNo, LanguageSelected);
                if CustomerNo <> '' then begin
                    CustomerItemNo := CustomerItemNoGet(CustomerNo, ItemNo);
                end;




                Barcode := BarcodeGet(ItemNo, 0);
                ItemUnit := BarcodeGet(ItemNo, 1);
                ItemWeight := ItemUnitsGet(ItemNo, 0);
                ItemQuantiy := SalespriceGet(ItemNo, 2);

                //Option NetPrice,RRPPrice,MinQuantity
                SalesPriceNET := SalespriceGet(ItemNo, 0);
                SalesPriceRRP := SalespriceGet(ItemNo, 1);
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(OutputType)
                {
                    Caption = 'Report Output Type';
                    field(ShowStockLevel; ShowStockLevel)
                    {
                        Caption = 'Show Stock Levels';
                        ToolTip = 'Toggle stocklevel or Price Details.';
                        ApplicationArea = Basic;

                        trigger OnValidate()
                        begin
                            // Call a procedure to update the visibility or enablement of controls
                            //UpdateControls();

                        end;
                    }
                }
                group(Scanpan)
                {
                    Caption = 'Scanpan';
                    field(oVat; oVat)
                    {
                        Caption = 'Select VAT location';
                        OptionCaption = 'Selvvalgt sats,Ingen moms,Østrig,Finland,Danmark,Norge';
                        ToolTip = 'Choose the VAT percentage to be used in report price calculations';
                        ApplicationArea = Basic;
                        Enabled = IsControlEnabled; // Bind Enabled property to a function

                        trigger OnValidate()
                        var
                        begin
                            tVat := '';
                            case oVat of
                                0: //Selvvalgt
                                    tVat := '0';
                                1: //Ingen moms
                                    tVat := '0';
                                2: //Østrig
                                    tVat := '20';
                                3: //Finland
                                    tVat := '23';
                                4: //Danmark
                                    tVat := '25';
                                5: //Norge
                                    tVat := '25';
                            end;
                            Evaluate(dvat, tVat);
                        end;

                    }
                    field(tVat; tVat)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Momssats pct';

                        trigger OnValidate()
                        var
                        begin
                            Evaluate(dVat, tVat);
                        end;
                    }
                    field(LanguageSelected; LanguageSelected)
                    {

                        Caption = 'Sprog';
                        ApplicationArea = Basic;
                        TableRelation = Language.Code;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            rLanguage: Record Language;
                        begin
                            rLanguage.SetFilter(Code, 'DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL');
                            if page.RunModal(Page::Languages, rLanguage) = Action::LookupOK then LanguageSelected := rLanguage.Code;

                        end;

                    }
                    field(CustomerNo; CustomerNo)
                    {
                        Caption = 'Kunde til kunde/varenummer';
                        ApplicationArea = Basic;
                        TableRelation = Customer."No.";

                        trigger OnValidate()
                        var
                        begin
                            CustomerName := CustomerGet;
                            if CustomerName <> '' then HasCustomerItemNo := 1 else HasCustomerItemNo := 0;
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            if page.RunModal((Page::"Customer List"), Customers) = Action::LookupOK then begin
                                CustomerNo := Customers."No.";
                                CustomerName := CustomerGet();
                                If CustomerName <> '' then HasCustomerItemNo := 1 else HasCustomerItemNo := 0;
                            end;

                        end;
                    }
                    field(CustomerName; CustomerName)
                    {
                        Caption = 'Kundnavn';
                        ApplicationArea = Basic;
                        Enabled = false;
                    }

                    field(CustomerPriceGroup; CustomerPriceGroup)
                    {
                        Caption = 'Debitor prisgruppe';
                        ApplicationArea = Basic;
                        TableRelation = "Customer Price Group";

                        trigger OnValidate()
                        var
                        begin
                            CustomerPriceGroup := CustomerPriceGroupGet(CustomerPriceGroup);
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            if page.RunModal((Page::"Customer Price Groups"), CustomerPriceGroups) = Action::LookupOK then
                                CustomerPriceGroup := CustomerPriceGroups.Code;
                        end;
                    }
                    field(ItemInventoryPostingCode; ItemInventoryPostingCode)
                    {
                        Caption = 'Produktbogføringsgruppe';
                        ApplicationArea = Basic;
                        TableRelation = "Gen. Product Posting Group";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemProductPostingGroups);
                            ItemProductPostingGroups.SetFilter(Code, '%1|%2|%3', 'INTERN', 'EKSTERN', 'BRUND');
                            if page.RunModal((Page::"Gen. Product Posting Groups"), ItemProductPostingGroups) = Action::LookupOK then begin
                                ItemInventoryPostingCode := ItemProductPostingGroups.Code;
                            end;
                        end;

                    }





                    field(ItemProductLineCode; ItemProductLineCode)
                    {
                        Caption = 'Produktlinjekode';
                        ApplicationArea = Basic;
                        //TableRelation = "NOTO Item Categories";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemCategories);
                            ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductLineCode);
                            if page.RunModal((Page::"NOTO Item Categories"), ItemCategories) = Action::LookupOK then begin
                                ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductLineCode);
                                ItemProductLineCode := ItemCategories.Code;
                            end;

                        end;

                    }
                    field(ItemCategoryCode; ItemCategoryCode)
                    {
                        Caption = 'Varekategorier';
                        ApplicationArea = Basic;
                        TableRelation = "Item Category";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        begin
                            Clear(ItemBCCategories);
                            ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductUsage);
                            if page.RunModal((Page::"Item Categories"), ItemBCCategories) = Action::LookupOK then begin
                                ItemCategoryCode := ItemBCCategories.Code;
                            end;
                        end;

                    }
                    /* 
					field(ItemProductGroupCode; ItemProductGroupCode)
					{
						Caption = 'Produktgruppekode';
						ApplicationArea = Basic;
						//TableRelation = "NOTO Item Categories";

						trigger OnLookup(var Text: Text): Boolean
						var
						begin
							Clear(ItemCategories);
							ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductGroupCode);
							if page.RunModal((Page::"NOTO Item Categories"), ItemCategories) = Action::LookupOK then begin
								ItemCategories.SetRange("Category Code", ItemCategories."Category Code"::ProductGroupCode);
								ItemProductGroupCode := ItemCategories.Code;
							end;
						end;
					}
					 */
                }
                group(SelectorsScanpan)
                {
                    Visible = false;

                    field(HasCustomerItemNo; HasCustomerItemNo)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'HasCustomerItemNo';
                        Visible = false;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;

            //SCANPAN
            //LanguageSelected := 'DAN';
            //tVat := '25';
            //dVat := 25;

        end;

    }

    trigger OnInitReport()
    begin
        IsControlEnabled := true;
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;

        //Set Report language

        //CurrReport.LANGUAGE := ReportLanguage.GetLanguageID(LanguageSelected);

        CurrReport.LANGUAGE := LanguageCU.GetLanguageID(LanguageSelected);

    end;

    var

        Customers: Record Customer;
        CustomerPriceGroups: Record "Customer Price Group";
        ItemProductPostingGroups: Record "Gen. Product Posting Group";

        //TABLES
        Items: Record Item;
        ItemBCCategories: Record "Item Category";

        ItemCrossReference: Record "Item Reference";

        ItemTranslation: Record "Item Translation";
        ItemUnitOfMeasure: Record "Item Unit of Measure";

        ItemCategories: Record "NOTO Item Categories";
        //ReportLanguage: Record Language;
        LanguageCU: Codeunit Language;
        IsControlEnabled: Boolean;
        ShowStockLevel: Boolean;
        tVat: code[2];
        Barcode: Code[20];
        CustomerItemNo: Code[20];
        CustomerNo: Code[20];
        ItemNo: code[20];
        ItemUnit: Code[20];
        ItemWeight: Code[20];
        LanguageSelected: Code[20];
        ReportLanguageCode: Code[20];
        CustomerPriceGroup: code[50];
        ItemCategoryCode: Code[50];
        ItemInventoryPostingCode: Code[50];
        ItemProductGroupCode: Code[50];
        ItemProductLineCode: Code[50];
        ItemStockAvailableDate: date;
        dVat: Decimal;
        ItemQuantiy: Decimal;
        ItemStockAvailable: Decimal;
        ItemStockAvailableExt: Decimal;

        ItemStockLevel: Decimal;
        NetUnitPrice: Decimal;
        SalesPriceNET: Decimal;
        SalesPriceRRP: Decimal;
        HasCustomerItemNo: Integer;
        PackageQty: Integer;
        oVat: Option;

        ReportLanguageOption: Option;
        ItemDescription: Text;
        ReportCaptionName: Text[50];
        CustomerName: Text[120];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50008_v7_3_0_2533;

    local procedure BarcodeGet(ItemNo: Code[20]; GetType: Option BarCode,"Item Unit"): code[20];
    var

        ItemCrossReference: Record "Item Reference";

    begin

        ItemCrossReference.Reset();
        ItemCrossReference.SetFilter("Item No.", ItemNo);
        ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
        ItemCrossReference.SETFILTER("Reference Type No.", '<>%1', 'EAN');
        ItemCrossReference.SETFILTER("Unit of Measure", '%1|%2|%3', 'STK', 'SET', 'SÆT');
        if ItemCrossReference.FindFirst() then begin
            if GetType = GetType::BarCode then Exit(ItemCrossReference."Reference No.");
            if GetType = GetType::"Item Unit" then exit(ItemCrossReference."Unit of Measure");
        end;
    end;

    local procedure CustomerGet(): Text[120];
    var
    begin
        Customers.Reset();
        If Customers.Get(CustomerNo) then begin
            CustomerPriceGroup := Customers."Customer Price Group";
            exit(Customers.Name);
        end;
    end;

    local procedure CustomerItemNoGet(CustNo: code[20]; ItemNo: Code[20]): Code[20]
    var

        ItemCrossReference: Record "Item Reference";

    begin
        ItemCrossReference.Reset();
        ItemCrossReference.SetFilter("Item No.", ItemNo);
        ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::Customer);
        ItemCrossReference.SETFILTER("Reference Type No.", CustNo);

        if ItemCrossReference.FindFirst() then begin
            exit(ItemCrossReference."Reference No.");
        end;

        //exit(CopyStr('**' + ItemNo, 1, 20));
    end;

    local procedure CustomerPriceGroupGet(CustomerPriceGroup: Code[20]): code[50]
    var
    begin
        CustomerPriceGroups.Reset();
        If CustomerPriceGroups.Get(CustomerPriceGroup) then begin
            Exit(CustomerPriceGroups.Code);
        end;
    end;

    local procedure ItemDescriptionGet(ItemNo: code[20]; LanguageCode: Code[20]): Text
    var
        Items: Record Item;
        ItemTranslation: Record "Item Translation";
    begin
        ItemTranslation.SetFilter("Item No.", ItemNo);
        ItemTranslation.SetFilter("Language Code", LanguageCode);
        if ItemTranslation.FindFirst() then Exit(ItemTranslation.Description + ItemTranslation."Description 2");
        if Items.Get(ItemNo) then Exit(Items.Description);
    end;

    local procedure ItemUnitsGet(ItemNo: code[20]; GetType: Option Weight,NA): Code[20];
    var
        ItemUnitOfMeasure: Record "Item Unit of Measure";
    begin
        ItemUnitOfMeasure.Reset();
        ItemUnitOfMeasure.SetFilter("Item No.", "Price List Line"."Asset No.");
        ItemUnitOfMeasure.SetFilter(Code, ItemUnit);
        if ItemUnitOfMeasure.FindFirst() then Exit(Format(ItemUnitOfMeasure.Weight, 0, '<Precision,2:2><Standard Format,2>'));

    end;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet System_IO_Path50008;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2533\ForNav.Reports.7.3.0.2533.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2533.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2533 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    local procedure SalespriceGet(ItemNo: code[20]; GetType: Option NetPrice,RRPPrice,MinQuantity): Decimal;
    var
        PriceLists: Record "Price List Line";
        MinQty: Decimal;
    begin
        PriceLists.Reset();
        PriceLists.SetFilter("Asset No.", ItemNo);
        PriceLists.SetFilter("Asset Type", 'Item');
        PriceLists.SetFilter("Ending Date", '');
        PriceLists.SetFilter("Starting Date", '<%1', Today);
        If PriceLists.FindFirst() then begin
            if Gettype = Gettype::NetPrice then exit(PriceLists."Line Amount");
            if GetType = GetType::RRPPrice then exit(9999);
            if GetType = GetType::MinQuantity then begin
                MinQty := PriceLists."Minimum Quantity";
                exit(PriceLists."Minimum Quantity");
            end
        end;
        if (MinQty = 0) and (GetType = GetType::MinQuantity) then begin
            PriceLists.SetFilter("Minimum Quantity", '>%1', 0);
            If PriceLists.FindFirst() then begin
                exit(PriceLists."Minimum Quantity");
            end;
        end;

    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.6.3.0.2250")
    {
        type(ForNav.Report_6_3_0_2250; ForNavReport50004_v6_3_0_2250) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// 50004 "Scanpan Pallelabel"
/// </summary>
Report 50004 "Scanpan Pallelabel"
{
    RDLCLayout = './src/report/layout/Pallelabel(ForNAV5004).rdlc';
    DefaultLayout = RDLC;

    Caption = 'Scanpan Palletlabel';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Integer; Integer)
        {
            MaxIteration = 25;
            DataItemTableView = sorting(Number);
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ItemNo; ItemNoCode)
            {
                IncludeCaption = false;
            }
            column(ItemDescription; ItemDescriptionText)
            {
                IncludeCaption = false;
            }
            column(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
            {
                IncludeCaption = false;
            }
            column(BarCode; BarCodeCode)
            {
                IncludeCaption = false;
            }
            column(PONo; PONoCode)
            {
                IncludeCaption = false;
            }
            column(ItemUnitQuantity; ItemUnitQuantityInt)
            {
                IncludeCaption = false;
            }
            column(txtAntalSlump; txtAntalSlump)
            {
                IncludeCaption = false;
            }
            column(AntalSlump; AntalSlumpInt)
            {
                IncludeCaption = false;
            }
            column(LabelPrintQuantity; LabelPrintQuantityInt)
            {
                IncludeCaption = false;
            }
            column(TotalCalculatedItemQuantity; TotalCalculatedItemQuantityInt)
            {
                IncludeCaption = false;
            }
            column(LabelsCounter; LabelsCounter)
            {
                IncludeCaption = false;
            }
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, LabelPrintQuantityInt);
                if LabelPrintQuantityInt = 0 then Error(LabelsQtyToPrintLbl);
                if LabelPrintQuantityInt > 25 then Error(MaxPrintOutLbl);
                if BarCodeCode = '' then Error(SelectItemUnitLbl);

                txtAntalSlump := '';
                //Fix Slump
                if AntalSlumpInt <> 0 then begin
                    txtAntalSlump := 'sp:' + Format(AntalSlumpInt);
                    ItemUnitQuantityInt := AntalSlumpInt;
                    ItemUnitOfMeasureCode := 'STK'
                end
            end;
        }
    }
    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                    /*					 field(NoOfCopies; NoOfCopies)
										{
											Caption = 'No. Of Copies';
											ToolTip = 'Angiv antal kopier til udskrift.';
											ApplicationArea = Basic;
										}
					 */
                    field(ItemSelected; ItemSelectedCode)
                    {
                        Caption = 'Varenummer';
                        ToolTip = 'Vælg varenummer';
                        ApplicationArea = Basic;
                        TableRelation = Item."No.";

                        trigger OnValidate()
                        var

                        begin
                            ItemUnitOfMeasureCode := '';
                            AntalKolliInt := 0;
                            AntalSlumpInt := 0;
                            txtAntalSlump := '';
                            PONoCode := '';
                            ItemNoCode := ItemSelectedCode;
                            BarCodeCode := '';
                            lblUnitAntalSlump := 0;
                            ItemGet;
                            calc();
                        end;

                        //LookupPageId = 31;
                        trigger OnLookup(var Text: Text): Boolean
                        var
                        //ItemRec: Record Item;
                        begin
                            ItemUnitOfMeasureCode := '';
                            //NoOfCopies := 222;
                            ItemRec.Reset();
                            ItemRec.SETFILTER("Gen. Prod. Posting Group", 'INTERN');
                            if page.RunModal(Page::"Item List", ItemRec) = Action::LookupOK then ItemSelectedCode := ItemRec."No.";
                            ItemNoCode := ItemRec."No.";
                            ItemGet();
                            calc();
                        end;
                    }
                    field(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
                    {
                        Caption = 'Enhed';
                        ToolTip = 'Vælg vareenhed';
                        ApplicationArea = Basic;
                        TableRelation = "Item Unit Of Measure"."Code";

                        trigger OnValidate()
                        begin
                            LookupItemUnit();
                            calc();
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                        //ItemCrossReference: Record "Item Reference";
                        begin
                            //RequestPageItemUnitOfMeasure := 'mig selv';
                            //NoOfCopies := 111;
                            //RequestPageItemUnitOfMeasure_Record.SETRANGE("Item No.", ItemSelected);
                            LookupItemUnit;
                            calc();
                        end;
                    }
                    field(AntalKolli; AntalKolliInt)
                    {
                        Caption = 'Antal kolli';
                        ToolTip = 'Angiv antal kolli (palle eller lign.).';
                        ApplicationArea = Basic;

                        trigger OnValidate()
                        var
                        begin
                            if AntalKolliInt > 25 then error(MaxPrintOutLbl);
                            if AntalSlumpInt <> 0 then begin
                                ItemUnitOfMeasureCode := '';
                                BarCodeCode := '';
                            end;

                            AntalSlumpInt := 0;
                            txtAntalSlump := '';
                            LabelPrintQuantityInt := AntalKolliInt;
                            calc();
                        end;
                    }
                    field(AntalSlump; AntalSlumpInt)
                    {
                        Caption = 'Restantal stk';
                        ToolTip = 'Angiv et restantal i stk. Antal der ikke passer til et pallemønster.';
                        ApplicationArea = Basic;

                        trigger OnValidate()
                        var

                        begin
                            txtAntalSlump := '::' + Format(AntalSlumpInt, 0) + '::';
                            AntalKolliInt := 0;
                            LabelPrintQuantityInt := 1;
                            //Tilpas stregkode og antal
                            ItemUnitQuantityInt := 1;

                            ItemCrossReference.RESET;
                            ItemCrossReference.SETRANGE("Item No.", ItemSelectedCode);
                            ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
                            ItemCrossReference.SETFILTER("Reference Type No.", '<>%1', 'EAN');
                            ItemCrossReference.SETFILTER("Unit of Measure", ItemBaseUnit);

                            ItemUnitOfMeasureCode := ItemBaseUnit;

                            BarCodeCode := 'xxx';
                            If ItemCrossReference.FindFirst() then
                                BarCodeCode := ItemCrossReference."Reference No.";
                            calc();
                        end;

                    }
                    field(PONo; PONoCode)
                    {
                        Caption = 'Produktionsordre';
                        ToolTip = 'Vælg tilhørende produktionsordre';
                        ApplicationArea = Basic;
                        TableRelation = "Prod. Order Line";

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            myInt: Integer;
                        begin

                            //PONR
                            PL.RESET;
                            PL.SETRANGE(PL.Status, PL.Status::Released);
                            PL.SETFILTER(PL."Location Code", '%1|%2|%3', 'AUNING', 'EXP', 'RYOM');
                            PL.SETRANGE(PL."Line No.", 10000);
                            PL.SETFILTER("Item No.", ItemNoCode);
                            PL.SETCURRENTKEY(Status, "Starting Date", "Item No.");
                            IF page.RUNMODAL(0, PL) = ACTION::LookupOK THEN BEGIN
                                PONoCode := PL."Prod. Order No.";
                                //Antal := PL."Last label printed";
                                //TotalCalculatedItemQuantitySlumpPrintet := PL."Total AntalSlump on labels";
                                Calc;
                            END;
                        end;

                    }
                    /*					 field(PoAntalOrdreIfilter; PoAntalOrdreIfilter)
										{
											Caption = 'Antal produktionsordre i filter';
											ToolTip = 'Viser antal produktionsordre indenfor valgte varenummerfilter.';
											Editable = false;
										}
					 */
                }
                group(SelectedStatus)
                {
                    Caption = 'Valgt til udskrift';
                    Editable = false;

                    field(ItemNo; ItemNoCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Varenummer';
                        ToolTip = 'Varenummer til label';
                    }
                    field(ItemDescription; ItemDescriptionText)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Beskrivelse';
                        ToolTip = 'Varebeskrivelse til label';
                    }
                    field(BarCode; BarCodeCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Stregkode';
                        ToolTip = 'Stregkode til label';
                    }
                    field(ItemUnitQuantity; ItemUnitQuantityInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Antal pr. enhed';
                        ToolTip = 'Antal pr. valgte vareehed';
                    }
                    field(TotalCalculatedItemQuantity; TotalCalculatedItemQuantityInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Total antal valgt';
                        ToolTip = 'Samlet antal der er valgt til udskrift(er)';
                    }
                    field(LabelPrintQuantity; LabelPrintQuantityInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Antal labels til udskrift';
                        ToolTip = 'Så mange label udskrives';
                    }


                }
                group(Options)
                {
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Opens the ForNAV designer when the "Preview" button is pressed';

                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }

        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
            //JH
            if NoOfCopies = 0 then NoOfCopies := 666;
        end;
    }

    trigger OnInitReport();
    begin
        ;


        ;
        ReportsForNavInit;
    end;

    trigger OnPreReport();
    begin
        ;
        //Language
        //CurrReport.LANGUAGE := Language.GetLanguageID('ENU');
        ;
        ReportsForNavPre;
    end;

    trigger OnPostReport();
    begin
        ;
        ReportForNav.Post;
    end;

    var
        //VARIABLES
        LabelsQtyToPrintLbl: label 'Vælg et antal labels til udskrift.';
        MaxPrintOutLbl: Label 'Du må ikke vælge mere end 25 antal labels pr. udskrift.';
        SelectItemUnitLbl: Label 'Der er ikke valgt vareenhed.';

        LabelsCounter: Integer;
        NoOfCopies: Integer;
        AntalKolliInt: Integer;
        AntalSlumpInt: Integer;
        txtAntalSlump: Code[20];
        TotalCalculatedItemQuantityInt: Integer;
        lblUnits: Integer;
        LabelPrintQuantityInt: Integer;
        ItemNoCode: Code[20];
        ItemBaseUnit: Code[20];
        ItemDescriptionText: Text[250];
        ItemSelectedCode: Code[20];
        ItemUnitOfMeasureCode: Code[20];
        ItemUnitQuantityInt: Integer;
        BarCodeCode: Code[50];
        lblUnitAntalSlump: Decimal;
        PoAntalOrdreIfilter: Integer;
        PONoCode: Code[20];


        TextLabel: Text[20];

        //RECORDS
        Item: Record Item;
        ItemRec: Record Item;

        ItemCrossReference: Record "Item Reference";


        test: Record "Item Reference";


        IUM: Record "Item Unit Of Measure";
        PL: Record "Prod. Order Line";

    local procedure LookupItemUnit();
    var
    begin
        ItemCrossReference.RESET;
        ItemCrossReference.SETRANGE("Item No.", ItemSelectedCode);
        ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
        ItemCrossReference.SETFILTER("Reference Type No.", '<>%1', 'EAN');
        ItemCrossReference.SETFILTER("Unit of Measure", '<>%1&<>%2&<>%3&<>%4', 'KARTON', 'STK', 'SET', 'SÆT');
        IF page.RUNMODAL(0, ItemCrossReference) = ACTION::LookupOK THEN BEGIN
            ItemUnitOfMeasureCode := ItemCrossReference."Unit of Measure";
            BarCodeCode := ItemCrossReference."Reference No.";

            IUM.RESET;
            IUM.SETRANGE("Item No.", ItemSelectedCode);
            IUM.SETRANGE(Code, ItemUnitOfMeasureCode);
            IF IUM.FINDFIRST THEN
                ItemUnitQuantityInt := IUM."Qty. per Unit of Measure";
        END;


    end;

    local procedure calc();
    var
    begin
        TotalCalculatedItemQuantityInt := AntalSlumpInt;
        if AntalKolliInt > 0 then TotalCalculatedItemQuantityInt := AntalKolliInt * ItemUnitQuantityInt;
    end;

    local procedure ItemGet()
    var
    Begin
        IF Item.GET(ItemNoCode) THEN begin
            ItemDescriptionText := Item.Description;
            ItemBaseUnit := Item."Base Unit of Measure";
        end
        ELSE
            ItemDescriptionText := '';

        PoAntalOrdreIfilter := 0;
        //PONR
        PL.RESET;
        PL.SETRANGE(PL.Status, PL.Status::Released);
        PL.SETFILTER(PL."Location Code", '%1|%2|%3', 'AUNING', 'EXP', 'RYOM');
        PL.SETRANGE(PL."Line No.", 10000);
        PL.SETFILTER("Item No.", ItemNoCode);
        IF PL.FINDSET THEN PoAntalOrdreIfilter := PL.COUNT;
    End;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50004_v6_3_0_2250;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_6_3_0_2250\ForNav.Reports.6.3.0.2250.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.6.3.0.2250.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 6.3.0.2250 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50006_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Vareenhedsliste 50006 (ID 50006).
/// </summary>
#pragma warning disable AW0006
Report 50006 "Vareenhedsliste"
#pragma warning restore AW0006
{
    RDLCLayout = './src/report/layout/Vareenhedsliste50006.rdlc';
    DefaultLayout = RDLC;

    Caption = 'Item Units list';
    AdditionalSearchTerms = 'Scanpan';

    dataset
    {
        dataitem(Item; Item)
        {
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Inventory Posting Group", "Product Line Code", "ABCD Category", Blocked;
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(OnlyQtyOver; OnlyQtyOverInt)
            {
                IncludeCaption = false;
            }
            column(ItemTranslation; ItemTranslationCode)
            {
                IncludeCaption = false;
            }
            column(ItemTranslationDescription; ItemTranslationDescription)
            {
                IncludeCaption = false;
            }
            dataitem("Item Unit of Measure"; "Item Unit of Measure")
            {
                RequestFilterFields = "Code";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                trigger OnAfterGetRecord();
                begin
                    //"Item Unit of Measure".SetFilter("Qty. per Unit of Measure", '<%1', OnlyQtyOver);
                    if "Item Unit of Measure"."Qty. per Unit of Measure" < OnlyQtyOverInt then
                        CurrReport.Skip();
                end;
            }
            trigger OnAfterGetRecord();
            begin
                ItemTranslations.Reset();
                ItemTranslations.SetFilter("Language Code", ItemTranslationCode);
                ItemTranslations.SetFilter("Item No.", Item."No.");
                ItemTranslationDescription := '****' + Item.Description;
                if ItemTranslations.FindFirst() then ItemTranslationDescription := ItemTranslations.Description + ItemTranslations."Description 2";
            end;
        }
    }

    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                    /*					 field(ReportLanguageOption; ReportLanguageOption)
										{
											//Caption = 'Select report language';
											Caption = 'Report Caption Language';
											OptionCaption = 'Dansk,English';
											ApplicationArea = Basic;
										}
					 */
                    field(OnlyQtyOver; OnlyQtyOverInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Vis kun enheder over antal';
                        ToolTip = 'Angiv det minimumsantal en enhed skal have, for at blive vist';
                    }
                    field(ItemTranslation; ItemTranslationCode)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Sprog varetekster';
                        TableRelation = Language;
                        ToolTip = 'Specifies the value of the Sprog varetekster field.';
                        trigger OnLookup(var Text: Text): Boolean
                        var
                        //ItemRec: Record Item;
                        begin
                            ItemLanguage.Reset();
                            ItemLanguage.SetFilter(Code, 'DEU|DAN|ENU|NOR|FIN|FRA|NLD|SVE|BEL');
                            if page.RunModal(9, ItemLanguage) = Action::LookupOK then
                                ItemTranslationCode := ItemLanguage.Code;
                        end;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';

                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies the value of the Design field.';
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }
        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }
    var
        ItemTranslations: Record "Item Translation";
        ItemLanguage: Record Language;
        //Records here
        LanguageCU: Codeunit Language;
        ItemTranslationCode: Code[10];
        ReportLanguageCode: Code[20];
        //Varables here
        OnlyQtyOverInt: Integer;
        ReportLanguageOption: Option;
        ItemTranslationDescription: Text;
        ReportCaptionName: Text[50];

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit();
    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post();
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre();

        //Language
#pragma warning disable AA0206
        ReportLanguageCode := 'ENU';
#pragma warning restore AA0206
        ReportCaptionName := 'Item Unit list';
        if ReportLanguageOption = 0 then begin
            ReportLanguageCode := 'DAN';
            ReportCaptionName := 'Vareenhedsliste';
        end;
        //CurrReport.LANGUAGE := ReportLanguage.GetLanguageID(ItemTranslation);
        CurrReport.LANGUAGE := LanguageCU.GetLanguageId(ItemTranslationCode);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [WithEvents]
        ReportForNav: DotNet ForNavReport50006_v7_0_0_2350;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet Path;
#pragma warning disable AA0072
        ReportForNavObject: Variant;
#pragma warning restore AA0072
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID(), CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 
#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{
    assembly("ForNav.Reports.7.0.0.2350")
    {
        type(ForNav.Report_7_0_0_2350; ForNavReport50000_v7_0_0_2350) { }
    }
} // Reports ForNAV Autogenerated code - do not delete or modify -->

/// <summary>
/// Report Varelabel (ID 50000).
/// </summary>
Report 50000 "Varelabel"
{
    AdditionalSearchTerms = 'Scanpan';

    Caption = 'Item label';
    DefaultLayout = RDLC;
    RDLCLayout = './src/report/layout/Varelabel.rdlc';
    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number);
            MaxIteration = 25;
            column(BarCode; BarCodeTxt)
            {
                IncludeCaption = false;
            }
            column(ItemDescription; ItemDescriptionTxt)
            {
                IncludeCaption = false;
            }
            column(ItemNo; ItemNumber)
            {
                IncludeCaption = false;
            }
            column(ItemTranslation; ItemTranslationTxt)
            {
                IncludeCaption = false;
            }
            column(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
            {
                IncludeCaption = false;
            }
            column(ItemUnitQuantity; ItemUnitQuantityInt)
            {
                IncludeCaption = false;
            }
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            trigger OnPreDataItem();
            begin
                Integer.SetRange(Number, 1, NoOfCopiesInt);
                if NoOfCopiesInt = 0 then Error(NumberOfLabelsLbl);
                if NoOfCopiesInt > 25 then Error(MaxPrintOutLbl);
            end;

        }
    }
    requestpage
    {

        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(scanpan)
                {
                    Caption = 'Scanpan';

                    field(NoOfCopies; NoOfCopiesInt)
                    {
                        ApplicationArea = Basic;
                        Caption = 'No. Of Copies';
                        ToolTip = 'Select number of labels to print.';
                    }

                    field(ItemNo; ItemNumber)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Item No.';
                        TableRelation = Item."No.";
                        ToolTip = 'Select Item No.';

                        trigger OnValidate()
                        var
                            Item: Record Item;
                        begin
                            Item.get(ItemNumber);
                            ItemDescriptionTxt := Item.Description;
                            BarCodeTxt := '';
                            ItemUnitOfMeasureCode := '';
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        var
                            Item: Record Item;
                        begin
                            if page.RunModal(Page::"Item List", Item) = Action::LookupOK then begin
                                ItemNumber := Item."No.";
                                ItemDescriptionTxt := Item.Description;

                                BarCodeTxt := '';
                                ItemUnitOfMeasureCode := '';
                            end;
                        end;
                    }
                    field(ItemDescription; ItemDescriptionTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Description';
                        Editable = false;
                    }
                    field(ItemUnitOfMeasure; ItemUnitOfMeasureCode)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Item Unit';
                        TableRelation = "Item Unit Of Measure"."Code";
                        ToolTip = 'Select Item Unit.';

                        trigger OnValidate()
                        var

                            ItemCrossReference: Record "Item Reference";

                            ItemUOM: Record "Item Unit of Measure";
                        begin
                            ItemCrossReference.SetFilter("Item No.", ItemNumber);
                            ItemCrossReference.SetFilter("Unit of Measure", ItemUnitOfMeasureCode);
                            ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
                            ItemCrossReference.FindFirst();
                            BarCodeTxt := ItemCrossReference."Reference No.";

                            ItemUOM.Get(ItemNumber, ItemUnitOfMeasureCode);
                            ItemUnitQuantityInt := ItemUOM."Qty. per Unit of Measure";
                        END;



                        trigger OnLookup(var Text: Text): Boolean
                        var

                            ItemCrossReference: Record "Item Reference";

                            ItemUOM: Record "Item Unit of Measure";
                        begin
                            ItemCrossReference.RESET;
                            ItemCrossReference.SETRANGE("Item No.", ItemNumber);
                            ItemCrossReference.SETRANGE("Reference Type", ItemCrossReference."Reference Type"::"Bar Code");
                            if page.RUNMODAL(0, ItemCrossReference) = ACTION::LookupOK then begin
                                ItemUnitOfMeasureCode := ItemCrossReference."Unit of Measure";
                                BarCodeTxt := ItemCrossReference."Reference No.";

                                ItemUOM.Get(ItemNumber, ItemUnitOfMeasureCode);
                                ItemUnitQuantityInt := ItemUOM."Qty. per Unit of Measure";
                            end;
                        end;
                    }
                    field(BarCode; BarCodeTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Barcode';
                        Editable = false;
                    }
                    field(ItemUnitQuantity; ItemUnitQuantityInt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Unit of Measure Quantity';
                        Editable = false;
                        ToolTip = 'Displays Quantity of the selected unit.';
                    }
                    field(ItemTranslation; ItemTranslationTxt)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Item Translation';
                        ToolTip = 'Select Item Translation or blank for Item Card description.';
                        trigger OnValidate()
                        var
                            Item: Record Item;
                            ItmTranslation: Record "Item Translation";
                        begin
                            ItmTranslation.SetFilter("Item No.", ItemNumber);
                            ItmTranslation.SetFilter("Language Code", ItemTranslationTxt);
                            if ItmTranslation.Get(ItemNumber, ItemTranslationTxt) then begin
                                ItemDescriptionTxt := ItmTranslation.Description;
                                ItemTranslationTxt := ItmTranslation."Language Code";
                            end else begin
                                Item.get(ItemNumber);
                                ItemDescriptionTxt := Item.Description;
                            end;
                        end;


                        trigger OnLookup(var Text: Text): Boolean
                        var
                            Item: Record Item;
                            ItmTranslation: Record "Item Translation";
                        begin
                            ItmTranslation.SetFilter("Item No.", ItemNumber);
                            IF page.RUNMODAL(0, ItmTranslation) = ACTION::LookupOK THEN BEGIN
                                ItemDescriptionTxt := ItmTranslation.Description;
                                ItemTranslationTxt := ItmTranslation."Language Code";
                            end else begin
                                Item.get(ItemNumber);
                                ItemDescriptionTxt := Item.Description;
                            end;
                        end;
                    }
                }
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    var
        ItemNumber: code[20];
        ItemSelected: code[20];
        ItemUnitOfMeasureCode: code[20];
        ItemUnitQuantityInt: Integer;

        NoOfCopiesInt: Integer;
        MaxPrintOutLbl: Label 'No more than 25 labels per print.';
        NumberOfLabelsLbl: label 'Select labels to print.';
        BarCodeTxt: Text[50];
        ItemDescriptionTxt: Text[100];
        ItemTranslationTxt: Text[100];

    trigger OnInitReport()
    begin
        NoOfCopiesInt := 1;
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        ;
        ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        [InDataSet]

        ReportForNavAllowDesign: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [WithEvents]
        ReportForNav: DotNet ForNavReport50000_v7_0_0_2350;

    local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        path: DotNet Path;
        addInFileName: Text;
        tempAddInFileName: Text;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_0_0_2350\ForNav.Reports.7.0.0.2350.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.0.0.2350.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.0.0.2350 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        ReportForNav.Init();
    end;

    local procedure ReportsForNavPre();
    begin
        ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        if not ReportForNav.Pre() then CurrReport.Quit();
    end;

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
 




/// <summary>
/// Unknown Detailed Calculation Ext (ID 50000) extends Record Detailed Calculation.
/// </summary>
/// 
/// <remarks>
/// 
///  2023.04.13             Jesper Harder                       023     Rapport Detailed Calculation (99000756, Rapportanmodning)
/// 
/// </remarks>
reportextension 50000 "Detailed Calculation Ext" extends "Detailed Calculation"
{

    RDLCLayout = './src/report ext/DetailedCalculationExt.rdl';


    requestpage
    {
        layout
        {
            addlast(content)
            {
                group(scanpan)
                {
                    Caption = 'SCANPAN';

                    field(Scanpan2; Scanpan) { ApplicationArea = Manufacturing; Caption = 'Test field'; }
                }
            }
        }
    }

    var
        Scanpan: Label 'SCANPAN';

    /*
    https://bc.scanpan.dk/BC_DRIFT_UP/?page=9652&company=SCANPAN%20Danmark&dc=0
    
    Build the extension (Ctrl+Shift+B). The MyRDLReport.rdl file will be created in the root of the current project.

    Open the generated report layout file in Microsoft SQL Server Report Builder.

    Edit the layout by inserting a table.

    Add the Name column from the Datasets folder into the table and save the .rdl file.

    Back in Visual Studio Code, press Ctrl+F5 to compile and run the report in Dynamics 365 Business Central.
    */
}
 





/// <summary>
/// Table Address List (ID 50019).
/// </summary>
/// <remarks>
/// 2023.08             Jesper Harder       046         Addresses Customer and Vendor
/// </remarks> 

table 50019 "Address List"
{

    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; "LineNo"; Integer)
        {
            Caption = 'Line No.';
        }
        field(2; "AddressType"; Enum "Address Types")
        {
            Caption = 'Address Type';
        }
        field(10; "Code"; Text[100])
        {
            Caption = 'Address Code';
        }
        field(15; "Name"; Text[100])
        {
            Caption = 'Name';
        }
        field(20; "Address Line 1"; Text[100])
        {
            Caption = 'Address Line 1';
        }
        field(21; "Address Line 2"; Text[100])
        {
            Caption = 'Address Line 2';
        }
        field(22; "Address Line 3"; Text[100])
        {
            Caption = 'Address Line 3';
        }
        field(23; "House Number"; Text[100])
        {
            Caption = 'House Number';
        }
        field(25; "ZipCode"; Text[100])
        {
            Caption = 'Zip Code';
        }
        field(26; "City"; Text[100])
        {
            Caption = 'City';
        }
        field(27; "Province"; Text[100])
        {
            Caption = 'Province';
        }
        field(28; Country; Text[100])
        {
            Caption = 'Country';
        }
        field(30; "Phone"; Text[100])
        {
            Caption = 'Phone';
        }
        field(31; "E-mail"; Text[100])
        {
            Caption = 'E-mail';
        }
        field(32; "Contact"; Text[100])
        {
            Caption = 'Contact';
        }
        field(40; "Shipping Agent Code"; Text[100])
        {
            Caption = 'Shipping Agent Code';
        }
        field(41; "Shipping Agent Service Code"; Text[100])
        {
            Caption = 'Shipping Method Code';
        }
        field(42; "Shipment Method Code"; Text[100])
        {
            Caption = 'Shipment Code';
        }
    }

    keys
    {
        key(PK; "LineNo")
        {
            Clustered = true;
        }
    }
} 



/// <summary>
/// Table SCANPAN Temptable BarCodes (ID 50000).
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 
/// </remarks>
table 50000 "BarCodesTmpSC"
{
    DataClassification = ToBeClassified;
    TableType = Temporary;
    fields
    {
        field(1; "Item No"; Code[20]) { Caption = 'Item No.'; }
        field(2; "Unit of Measure Code"; Code[10]) { Caption = 'UOM Code'; }
        field(3; "Num Barcodes"; Integer) { Caption = 'No. of Barcodes'; }
        field(4; "Create Now EAN"; Boolean) { Caption = 'Create EAN now'; }
        field(5; "Create Now UPC"; Boolean) { Caption = 'Create UPC now'; }
    }

    keys
    {
        key(Key1; "Item No", "Unit of Measure Code") { Clustered = true; }
    }
}
 




/// <summary>
/// Table CampaignStatistics (ID 50015).
/// </summary>
/// <remarks>
/// 2023.06.12                  Jesper Harder               034 Campaign statistics Added Code
/// </remarks> 
table 50015 "CampaignStatistics"
{
    Caption = 'CampaignStatistics';
    TableType = Temporary;

    DataClassification = ToBeClassified;

    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }
        field(2; "Date"; Date)
        {
            Caption = 'Date';
            DataClassification = ToBeClassified;
        }
        field(10; "Customer No."; Code[20])
        {
            Caption = 'Customer No.';
            DataClassification = ToBeClassified;
            TableRelation = Customer;
        }
        field(11; "Customer Name"; Text[100])
        {
            Caption = 'Customer Name';
            DataClassification = ToBeClassified;
        }
        field(12; "Campaign Code"; Code[20])
        {
            Caption = 'Campaign Code';
            DataClassification = ToBeClassified;
            TableRelation = Campaign;
        }
        field(13; "Campaign Name"; Text[100])
        {
            Caption = 'Campaign Name';
            DataClassification = ToBeClassified;
        }
        /*
        field(14; "Campaign Type"; Enum "CampaignStatistics DocTypes")
        {
            Caption = 'Campaign Type';
            DataClassification = ToBeClassified;
        }
        */
        field(14; "Campaign Type"; Option)
        {
            Caption = 'Campaign Type';
            DataClassification = ToBeClassified;
            OptionMembers = Campaign,Assortment;
            OptionCaption = 'Campaign,Assortment';
        }
        field(15; "Campaign Purpose"; Text[100])
        {
            Caption = 'Campaign Purpose';
            DataClassification = ToBeClassified;
        }
        field(16; "Chain"; Text[100])
        {
            Caption = 'Customer Chain';
            DataClassification = ToBeClassified;
        }
        field(17; "Chain Group"; Text[100])
        {
            Caption = 'Customer Chain Group';
            DataClassification = ToBeClassified;
        }
        field(18; "SalesPerson Code"; code[20])
        {
            Caption = 'SalesPersconCode';
            DataClassification = ToBeClassified;
        }
        field(20; "Item No."; Code[20])
        {
            Caption = 'Item No.';
            DataClassification = ToBeClassified;
            TableRelation = Item;
        }
        field(21; "Item Description"; Text[100])
        {
            Caption = 'Item Description';
            DataClassification = ToBeClassified;
        }
        field(30; "Document Type"; enum "CampaignStatistics DocTypes")
        {
            Caption = 'Document Type';
            DataClassification = ToBeClassified;
        }
        field(31; "Document No."; Code[20])
        {
            Caption = 'Document No.';
            DataClassification = ToBeClassified;
            TableRelation =
                if ("Document Type" = const("Sales Order")) "Sales Header" where("Document Type" = const("Order"))
            else
            if ("Document Type" = const("Invoice")) "Sales Invoice Header"
            else
            if ("Document Type" = const("Forecast")) "Production Forecast Entry";
        }
        field(32; Quantity; Decimal)
        {
            Caption = 'Quantity';
            DataClassification = ToBeClassified;
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(33; "Amount(RV)"; Decimal)
        {
            Caption = 'Amount(RV)';
            DataClassification = ToBeClassified;
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(34; Amount; Decimal)
        {
            Caption = 'Amount';
            DataClassification = ToBeClassified;
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(40; "Currency Code"; Code[20])
        {
            Caption = 'Currency Code';
            DataClassification = ToBeClassified;
        }
        field(41; "Currency Description"; Text[100])
        {
            Caption = 'Currency Description';
            DataClassification = ToBeClassified;
        }
        field(22; "Country Code"; Code[20])
        {
            Caption = 'Country';
            TableRelation = "Country/Region";
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
            SumIndexFields = Amount, "Amount(RV)", Quantity;
        }
        key(KEY1; "Campaign Code")
        {
            SumIndexFields = Amount, "Amount(RV)", Quantity;
        }
    }
}
 
/// <summary>
/// Table InvoiceLines (ID 50013).
/// </summary>
/// <remarks>
/// 2023.05.01              Jesper Harder                       028     SalesCommision
/// </remarks>

table 50013 "DocumentLines"
{
    DataCaptionFields = "Customer Name", "Customer No.", "Document Type", "Document No.";
    Caption = 'Invoice Lines';
    DataClassification = ToBeClassified;
    TableType = Temporary;
    fields
    {
        field(1; "Line No."; integer)
        {
            Caption = 'Line No.';
        }
        field(2; "Customer No."; code[20])
        {
            Caption = 'Customer No.';
        }
        field(3; "Customer Name"; text[100])
        {
            Caption = 'Customer Name';
        }
        field(4; "Posting Date"; date)
        {
            Caption = 'Posting Date';
        }
        field(5; "Document Type"; enum "Enum Posted Document Type")
        {
            Caption = 'Document Type';
        }
        field(6; "Document No."; code[20])
        {
            Caption = 'Document No.';
        }
        field(7; "Salesperson Code"; code[20])
        {
            Caption = 'Salesperson Code';
        }
        field(8; "Salesperson Name"; text[100])
        {
            Caption = 'Salesperson Name';
        }
        field(9; "Salesperson Commission %"; integer)
        {
            Caption = 'Salespersion Commission %';
        }
        field(10; "Campaign Code"; code[20])
        {
            Caption = 'Campaign Code';
        }
        field(11; "Campaign Name"; text[100])
        {
            Caption = 'Campaign Name';
        }
        field(12; "Starting Date"; date)
        {
            Caption = 'Campaign Starting Date';
        }
        field(13; "Ending Date"; date)
        {
            Caption = 'Campaign Ending Date';
        }
        field(14; "Currency Code"; code[20])
        {
            Caption = 'Currency Code';
        }
        field(15; "Currency Factor"; decimal)
        {
            Caption = 'Currency Factor';
        }
        field(16; "Item No."; code[20])
        {
            Caption = 'Item No.';
        }
        field(17; "Item Desription"; text[100])
        {
            Caption = 'Item Description';
        }
        field(18; "Amount(RV)"; decimal)
        {
            Caption = 'Amount(RV)';
            BlankNumbers = BlankZero;
        }
        field(19; "Quantity"; decimal)
        {
            Caption = 'Quantity';
            BlankNumbers = BlankZero;
        }
        field(20; "Commission Amount(RV)"; decimal)
        {
            Caption = 'Commission Amount(RV)';
            BlankNumbers = BlankZero;
        }
        field(21; "Amount"; decimal)
        {
            Caption = 'Amount';
            BlankNumbers = BlankZero;
        }
        field(22; "Commission Amount"; decimal)
        {
            Caption = 'Commission Amount';
            BlankNumbers = BlankZero;
        }
        field(100; "Show Lines"; boolean)
        {
            Caption = 'Show Lines';
        }
    }

    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
            SumIndexFields = "Amount", "Amount(RV)", Quantity, "Commission Amount", "Commission Amount(RV)";
        }
        key("CAMPAIGN"; "Campaign Code")
        {
            SumIndexFields = "Amount", "Amount(RV)", Quantity, "Commission Amount", "Commission Amount(RV)";
        }
        key("POSTINGDATE"; "Posting Date")
        { }
    }
} 




table 50010 "ExtSalesLines"
{
    Caption = 'Temprary Sales Lines Table';
    DataClassification = ToBeClassified;
    TableType = Temporary;
    Extensible = false;

    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }


        field(2; "Sell-to Customer Name"; text[100])
        {
        }

        field(3; "Sell-to Customer No."; code[20])
        {
        }
        field(4; "Ship-to Name"; text[100])
        {
        }

        field(5; "Document No."; code[20])
        {
        }
        field(6; "Type"; Text[20])
        {
        }
        field(7; "No."; code[20])
        {
        }
        field(8; Description; text[100])
        {
        }
        field(9; "Used Campaign NOTO"; text[100])
        {
        }
        field(10; CampaignsDescription; text[100])
        {
        }
        field(11; Quantity; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(12; "Outstanding Quantity"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(13; "Qty. to Ship"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(14; "Quantity Shipped"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(15; "Qty. Shipped Not Invoiced"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(16; "Qty. to Invoice"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(17; "Quantity Invoiced"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(18; "Line Amount"; Decimal)
        {
            BlankNumbers = BlankZero;
        }
        field(19; "Currency Code"; code[20])
        {
        }
        field(20; "Salesperson Code"; code[20])
        {
        }
        field(21; "Requested Delivery Date"; Date)
        {
        }
        field(22; "ChainGroup Code"; code[20])
        {
        }
        field(23; "ChainGroup Name"; text[100])
        {
        }
        field(24; "SalesLine LineNo"; Integer)
        {
            BlankNumbers = BlankZero;
        }
        field(100; SetStyleExpr; Boolean)
        {
        }
    }

    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
    }
}
 




/// <summary>
/// Table Field Selection Table (ID 50016).
/// </summary>
table 50016 "Field Selection Table"
{
    Caption = 'Field Selection Table';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; "Table No."; integer)
        {
            Caption = 'Table No.';
            DataClassification = ToBeClassified;
        }
        field(2; "Table Name"; text[50])
        {
            Caption = 'Table Namne';
            DataClassification = ToBeClassified;
        }
        field(3; "Field No."; integer)
        {
            Caption = 'Field No.';
            DataClassification = ToBeClassified;
        }

        field(4; "Field Name"; text[30])
        {
            Caption = 'Field Name';
            DataClassification = ToBeClassified;
        }

    }
} 




/// <summary>
/// Table "SCANPANTMPIICTracking" (ID 50012).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.22                        Jesper Harder                           012     IIC tracking Norway Denmark.
/// 
/// </remarks>      
/// 
table 50012 "IICTrackingTmpSC"
{
    Caption = 'SCANPANTMPIICTracking';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }
        field(10; Company; Text[50])
        {
            Caption = 'Company Name';
        }
        field(20; "Invoice No."; code[30])
        {
            Caption = 'Invoice No. (NO)';
        }
        field(30; "Sell-to Customer No."; Code[20])
        {
            Caption = 'Sell-to Customer No. (NO)';
        }
        field(35; "Sell-To Customer Name (NO)"; text[100])
        {
            Caption = 'Sell-To Customer Name (NO)';
        }
        field(40; "Document No."; Code[20])
        {
            Caption = 'Document No. (NO)';
            TableRelation = "Sales Invoice Header";
        }
        field(50; "Sales Shipment No. (NO)"; code[30])
        {
            Caption = 'Sales Shipment No. (NO)';
        }
        field(60; "Purchase Order No."; code[30])
        {
            Caption = 'Purchase Order No. (NO)';
        }
        field(70; "Sales Shipment No. (DK)"; code[30])
        {
            Caption = 'Sales Shipment No. (DK)';
        }
        field(80; "Sales Ship Posting Date (DK)"; Date)
        {
            Caption = 'Sales Shipment Posting Date (DK)';
        }

    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
    }
}
 





/// <summary>
/// Table InventoryJournalStatus (ID 50004).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
/// 
/// </remarks>

table 50004 "InventoryJournalStatus"
{


    Caption = 'Inventory Journal Status';
    DataClassification = ToBeClassified;
    Permissions = 
        tabledata InventoryJournalStatus = rimd;


    fields
    {

        field(10; "Line No."; Integer)
        {
            Caption = 'Line No.';
        }
        field(20; "Inventory Journal ID"; text[30])
        {
            Caption = 'Inventory Journal ID';
        }
        field(30; "Ressource ID"; code[20])
        {
            Caption = 'Ressource ID';
        }
        field(40; "Shelf No."; text[30])
        {
            Caption = 'Shelf No.';
        }
        field(50; "Item No."; code[20])
        {
            Caption = 'Item No.';
        }
        field(60; "Item Description"; text[100])
        {
            Caption = 'Item Description';
        }
        field(70; "Base Quantity"; Decimal)
        {
            BlankNumbers = BlankZero;
            BlankZero = true;
            Caption = 'Base Quantity';
        }
        field(80; "Reported Quatity"; Decimal)
        {
            BlankNumbers = BlankZero;
            BlankZero = true;
            Caption = 'Reported Quantity';
        }
        field(90; "Difference Quatity"; Decimal)
        {
            BlankNumbers = BlankZero;
            BlankZero = true;
            Caption = 'Difference Quantity';
        }

    }
    /*
        Inventory Journal ID
        Inventory Journal Name     

        Ressource ID
        Shelf No.

        Item No.
        Item Description

        BaseQty - ref Inventory Journal ID
        Reported Qty
        Difference Qty

    */
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
        key(Key1; "Ressource ID", "Shelf No.", "Item No.")
        { }
    }


} 



/// <summary>
/// Table InventoryJournal (ID 50003).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
/// 
/// </remarks>
/// 
table 50003 "InventoryMapShelfSC"
{

    Caption = 'Inventory Map Shelf No.';
    DataClassification = ToBeClassified;

Permissions = 
        tabledata InventoryMapShelfSC = rimd;

    fields
    {

        field(10; "Ressource Name"; code[20])
        {
            Caption = 'Ressouce Name';
        }
        field(20; "Shelf No."; Code[20])
        {
            Caption = 'Shelf No.';
        }

    }

    keys
    {
        key(PK; "Ressource Name", "Shelf No.")
        {
            Clustered = true;
        }
    }
} 





/// <summary>
/// Table InventoryRessourceID (ID 50005).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.27      Jesper Harder               017     Inventory Journal StockStatus Add Code
/// 
/// </remarks>
table 50005 "InventoryRessourceID"
{
    TableType = Temporary;
    LookupPageId = InventoryRessources;
    Caption = 'Inventory Temporary Ressouce ID';

    DataClassification = ToBeClassified;

    fields
    {
        field(1; "Ressouce ID"; code[20])
        {
            Caption = 'Ressource ID';
        }
    }

    keys
    {
        key(PK; "Ressouce ID")
        {
            Clustered = true;
        }
    }
} 
/// <summary>
/// Table MandatoryFieldSetup (ID 50017).
/// </summary>
/// <remarks>
///
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
///
/// </remarks>



table 50017 "MandatoryFieldSetup"
{
    ObsoleteState = Removed;
    ObsoleteReason = 'Changes to PK keys';

    Caption = 'Mandatory Field Setup';

    fields
    {
        field(1; "Table Type"; enum EnumTableType)
        {
            Caption = 'Table Type';
        }
        field(2; "Table No."; Integer)
        {
            Caption = 'Table No.';
        }
        field(3; "Field No."; Integer)
        {
            Caption = 'Field No.';
            TableRelation = Field."No." where(TableNo = field("Table No."));
            //LookupPageID = 50000;
            BlankZero = true;

            trigger OnValidate()
            var
            begin
                CalcFields("Field Name");
            end;
        }
        field(4; "Field Name"; Text[250])
        {
            Caption = 'Field Name';
            Editable = false;
            FieldClass = FlowField;
            CalcFormula = lookup(Field."Field Caption" where(TableNo = field("Table No."),
                                                        "No." = field("Field No.")));
        }
        field(5; "Conditional Field No."; Integer)
        {
            Caption = 'Conditional Field No.';
            TableRelation = Field."No." where(TableNo = field("Table No."));
            BlankZero = true;

            trigger OnValidate()
            var
            begin
                CalcFields("Conditional Field Name");
            end;
        }
        field(6; "Conditional Field Name"; Text[250])
        {
            Caption = 'Conditional Field Name';
            Editable = false;
            FieldClass = FlowField;
            CalcFormula = lookup(Field."Field Caption" where(TableNo = field("Table No."),
                                                        "No." = field("Conditional Field No.")));
        }
        field(7; "Condition"; Text[250])
        {
            Caption = 'Condition';
        }
    }
    keys
    {
        key(PK; "Table Type", "Field No.")
        {
            Clustered = true;
        }
    }

    trigger OnModify()
    var
    begin
        if Rec."Conditional Field No." = 0 then
            Rec.Condition := '';
    end;

    local procedure CheckMandatoryFields(var MandatoryFieldSetup: Record MandatoryFieldSetup2; RecordRef: RecordRef);
    var
        FieldRef: FieldRef;
    begin
        if MandatoryFieldSetup.FindSet() then
            repeat
                FieldRef := RecordRef.FIELD(MandatoryFieldSetup."Field No.");
                FieldRef.TestField();
            until MandatoryFieldSetup.Next() = 0;
    end;

    /// <summary>
    /// NewRecord.
    /// </summary>
    procedure NewRecord();
    begin
        case "Table Type" of
            "Table Type"::Customer:
                "Table No." := DATABASE::Customer;
            "Table Type"::Vendor:
                "Table No." := DATABASE::Vendor;
            "Table Type"::Item:
                "Table No." := DATABASE::Item;
        end;
    end;

    /// <summary>
    /// CheckItem.
    /// </summary>
    /// <param name="Item">Record Item.</param>
    procedure CheckItem(Item: Record Item);
    var
        MandatoryFieldSetup: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Item);
        MandatoryFieldSetup.SETRANGE("Table Type", MandatoryFieldSetup."Table Type"::Item);
        CheckMandatoryFields(MandatoryFieldSetup, RecordRef);
    end;

    /// <summary>
    /// CheckCust.
    /// </summary>
    /// <param name="Customer">Record Customer.</param>
    procedure CheckCust(Customer: Record Customer);
    var
        MandatoryFieldSetup: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Customer);
        MandatoryFieldSetup.SetRange("Table Type", MandatoryFieldSetup."Table Type"::Customer);
        CheckMandatoryFields(MandatoryFieldSetup, RecordRef);
    end;

    /// <summary>
    /// CheckVend.
    /// </summary>
    /// <param name="Vendor">Record Vendor.</param>
    procedure CheckVend(Vendor: Record Vendor);
    var
        MandatoryFieldSetup: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Vendor);
        MandatoryFieldSetup.SetRange("Table Type", MandatoryFieldSetup."Table Type"::Vendor);
        CheckMandatoryFields(MandatoryFieldSetup, RecordRef);
    end;
}
 


/// <summary>
/// Table MandatoryFieldSetup (ID 50017).
/// </summary>
/// <remarks>
///
/// 2023.08         Jesper Harder               045     Mandatory Fields setup
///
/// </remarks>


table 50018 "MandatoryFieldSetup2"
{
    Caption = 'Mandatory Field Setup';
    Permissions = 
        tabledata MandatoryFieldSetup2 = rimd;

    fields
    {
        field(1; "Table Type"; enum EnumTableType)
        {
            Caption = 'Table Type';
        }
        field(2; "Table No."; Integer)
        {
            Caption = 'Table No.';
        }
        field(3; "Field No."; Integer)
        {
            //LookupPageID = 50000;
            BlankZero = true;
            Caption = 'Field No.';
            TableRelation = Field."No." where(TableNo = field("Table No."));

            trigger OnValidate()
            var
            begin
                CalcFields("Field Name");
            end;
        }
        field(4; "Field Name"; Text[250])
        {
            CalcFormula = lookup(Field."Field Caption" where(TableNo = field("Table No."),
                                                        "No." = field("Field No.")));
            Caption = 'Field Name';
            Editable = false;
            FieldClass = FlowField;
        }
        field(5; "Conditional Field No."; Integer)
        {
            BlankZero = true;
            Caption = 'Conditional Field No.';
            TableRelation = Field."No." where(TableNo = field("Table No."));

            trigger OnValidate()
            var
            begin
                CalcFields("Conditional Field Name");
            end;
        }
        field(6; "Conditional Field Name"; Text[250])
        {
            CalcFormula = lookup(Field."Field Caption" where(TableNo = field("Table No."),
                                                        "No." = field("Conditional Field No.")));
            Caption = 'Conditional Field Name';
            Editable = false;
            FieldClass = FlowField;
        }
        field(7; "Condition"; Text[250])
        {
            Caption = 'Condition';
        }
        field(8; "Field Test"; Text[250])
        {
            Caption = 'Field Test';
        }
        field(9; "Logical Operator"; Enum EnumLogicalOperator)
        {
            Caption = 'Logical Operator';
        }

    }
    keys
    {
        key(PK; "Table Type", "Field No.", "Conditional Field No.")
        {
            Clustered = true;
        }
    }

    trigger OnModify()
    var
    begin
        if Rec."Conditional Field No." = 0 then
            Rec.Condition := '';
    end;

    /// <summary>
    /// CheckCust.
    /// </summary>
    /// <param name="Customer">Record Customer.</param>
    procedure CheckCust(Customer: Record Customer);
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Customer);
        MandatoryFieldSetup2.SetRange("Table Type", MandatoryFieldSetup2."Table Type"::Customer);
        CheckMandatoryFields(MandatoryFieldSetup2, RecordRef);
    end;

    /// <summary>
    /// CheckItem.
    /// </summary>
    /// <param name="Item">Record Item.</param>
    procedure CheckItem(Item: Record Item);
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Item);
        MandatoryFieldSetup2.SETRANGE("Table Type", MandatoryFieldSetup2."Table Type"::Item);
        CheckMandatoryFields(MandatoryFieldSetup2, RecordRef);
    end;

    /// <summary>
    /// CheckVend.
    /// </summary>
    /// <param name="Vendor">Record Vendor.</param>
    procedure CheckVend(Vendor: Record Vendor);
    var
        MandatoryFieldSetup2: Record MandatoryFieldSetup2;
        RecordRef: RecordRef;
    begin
        RecordRef.GetTable(Vendor);
        MandatoryFieldSetup2.SetRange("Table Type", MandatoryFieldSetup2."Table Type"::Vendor);
        CheckMandatoryFields(MandatoryFieldSetup2, RecordRef);
    end;
    /*
local procedure CheckMandatoryFields(var MandatoryFieldSetup2: Record MandatoryFieldSetup2; RecordRef: RecordRef);
    var
        FieldRef: FieldRef;
    begin
        if MandatoryFieldSetup2.FindSet() then
            if MandatoryFieldSetup2."Conditional Field No." = 0 then
                repeat
                    FieldRef := RecordRef.FIELD(MandatoryFieldSetup2."Field No.");
                    FieldRef.TestField();
                until MandatoryFieldSetup2.Next() = 0
            else
                repeat
                until MandatoryFieldSetup2.Next() = 0;
    end;
    
    */
    /// <summary>
    /// NewRecord.
    /// </summary>
    procedure NewRecord();
    begin
        case "Table Type" of
            "Table Type"::Customer:
                "Table No." := DATABASE::Customer;
            "Table Type"::Vendor:
                "Table No." := DATABASE::Vendor;
            "Table Type"::Item:
                "Table No." := DATABASE::Item;
        end;
    end;

    local procedure CheckMandatoryFields(var MandatoryFieldSetup2: Record MandatoryFieldSetup2; RecordRef: RecordRef);
    var
        FieldRef: FieldRef;
        ConditionalFieldRef: FieldRef;
        TestFieldRef: FieldRef;
        TestFieldValue: Text[250];
        ConditionalFieldValue: Text[250];
        ErrorMessageLbl: Label 'The Condition %1 = "%2" \Applying to field %3 With value "%4" \That must be %5 "%6"', Comment = '%1=Condition, %2=Condition Value, %3=Mandatory FieldName, %4=TestFieldValue, %5=Logical Operator, %6=Test Value';
        ErrorLbl: label 'Error found in Mandatory Field Test.';
        TestOperator: enum EnumLogicalOperator;
        TestResult: Boolean;
    begin
        if MandatoryFieldSetup2.FindSet() then
            repeat
                MandatoryFieldSetup2.CalcFields("Conditional Field Name", "Field Name");
                if MandatoryFieldSetup2."Conditional Field No." = 0 then begin
                    FieldRef := RecordRef.Field(MandatoryFieldSetup2."Field No.");
                    FieldRef.TestField();
                end else begin
                    ConditionalFieldRef := RecordRef.Field(MandatoryFieldSetup2."Conditional Field No.");
                    ConditionalFieldValue := Format(ConditionalFieldRef.Value);
                    TestFieldRef := RecordRef.Field(MandatoryFieldSetup2."Field No.");
                    TestFieldValue := Format(TestFieldRef.Value);
                    TestOperator := MandatoryFieldSetup2."Logical Operator";

                    TestResult := false;
                    if ConditionalFieldValue = MandatoryFieldSetup2.Condition then
                        case TestOperator of
                            TestOperator::"Equal":
                                if TestFieldValue <> MandatoryFieldSetup2."Field Test" then
                                    TestResult := true;
                            TestOperator::"Not":
                                if TestFieldValue = MandatoryFieldSetup2."Field Test" then
                                    TestResult := true;
                        end;
                    //
                    if TestResult = true then begin
                        Message(ErrorMessageLbl,
                            MandatoryFieldSetup2."Conditional Field Name",
                            MandatoryFieldSetup2.Condition,
                            MandatoryFieldSetup2."Field Name",
                            TestFieldValue,
                            TestOperator,
                            MandatoryFieldSetup2."Field Test"


                            );
                        Error(ErrorLbl);

                        //Betingelsen MandatoryFieldSetup2."Conditional Field Name": MandatoryFieldSetup2.Condition
                        //Passer ikke med: MandatoryFieldSetup2."Field Name", værdi TestFieldValue, der skal være Samme Som MandatoryFieldSetup2."Field Test"

                    end;
                end;
            until MandatoryFieldSetup2.Next() = 0;
    end;
}


 

/// <summary>
/// Table "ExtSalesMapSalesView" (ID 50002).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03.24              Jesper Harder               014 External Sales ToolBox - 3.2023          Code start.
/// 
/// </remarks>
table 50002 "MapCustomerSalesPerson"
{
    Caption = 'Ext Sales Map SalesPerson';
    DataClassification = ToBeClassified;

    Permissions = tabledata MapCustomerSalesPerson = rimd;

    fields
    {
        field(1; UserName; Code[50])
        {
            //TableRelation = User."User Name";
            Caption = 'User Name';
            DataClassification = ToBeClassified;
        }
        field(2; CustomerSalesCode; Code[20])
        {
            Caption = 'Customer Sales Code';
            DataClassification = ToBeClassified;
            TableRelation = "Salesperson/Purchaser";
        }
        field(3; ShowAllCustomers; Boolean)
        {
            Caption = 'Show All Customers';
            DataClassification = ToBeClassified;
        }
    }
    keys
    {
        key(PK; UserName, CustomerSalesCode)
        {
            Clustered = true;
        }
    }
}

 




/*
table 50006 "PriceListSourceData"
{
    TableType = Temporary;

    fields
    {

        field(10; "Line No."; Integer)
        {
            Caption = 'Line No.';
        }
        field(20; "Item No."; code[20])
        {
            Caption = 'Item No.';
        }
        field(30; "Item Description"; text[100])
        {
            Caption = 'Item Description';
        }
        field(40;

        CrossReferenceNo
UnitOfMeasure
QtyPerUnitOfMeasure
UnitCost
IndirectCostPct
PurchasePriceDirectUnitCost
ENUDescription
    }


    }

*/ 
/// <summary>
/// Table SCANPANTMPProdFoundry (ID 50011).
/// </summary>
///
/// <remarks>
///
/// 2023.03.21                          Jesper Harder                               010     List Production Orders in STØBERI
///
/// </remarks>
table 50011 "ProdContllingRoutingLinesTMP"
{
    Caption = 'SCANPAN TMP Production Controlling Routing Lines';
    DataClassification = ToBeClassified;
    TableType = Temporary;
    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
            Editable = false;
        }
        field(10; "Priority"; Integer)
        {
            Caption = 'Priority';
        }
        field(15; "Comment"; text[150])
        {
            Caption = 'Comment';
        }
        field(20; RoutingType; Text[50])
        {
            Caption = 'Ressource Type';
            Editable = false;
        }
        field(28; "Status"; enum "Production Order Status")
        {
            Caption = 'Production Order Status';
            Editable = false;
        }
        field(30; "Production Order No."; code[20])
        {
            Caption = 'Production Order No.';
            Editable = false;
            TableRelation = "Production Order" where(Status = const(Released));
        }
        field(35; "Ressource No."; Text[20])
        {
            Caption = 'Ressource No.';
            Editable = false;
        }
        field(40; "Routing Description"; text[100])
        {
            Caption = 'Ressource Name';
            Editable = false;
        }
        field(45; "Operation No."; Text[20])
        {
            Caption = 'Operation No.';
            Editable = false;
        }
        field(50; ItemNo; Code[20])
        {
            Caption = 'Item No.';
            Editable = false;
        }
        field(60; "Item Description"; Text[100])
        {
            Caption = 'Item Description';
            Editable = false;
        }
        field(70; "Work Center Group Code"; Text[20])
        {
            Caption = 'Departmnet No.';
            Editable = false;
        }
        field(80; Quantity; Decimal)
        {
            Caption = 'Quantity';
            Editable = false;
        }
        field(90; "Finished Quantity"; Decimal)
        {
            Caption = 'Finished Quantity';
            Editable = false;
        }
        field(100; "Remaining Quantity"; Decimal)
        {
            Caption = 'Remaining Quantity';
            Editable = false;
        }
        field(101; "Finished Percentage"; Decimal)
        {
            Caption = 'Finished Percentage';
            Editable = false;
        }
        field(102; "Item Set Multiplier"; Integer)
        {
            Caption = 'Item Set Multiplier';
            editable = false;
        }
        field(103; "Remaining Set Quantity"; Decimal)
        {
            Caption = 'Remaining Set Quantity';
            editable = false;
        }
        field(104; "Finished Set Quantity"; Decimal)
        {
            Caption = 'Finished Set Quantity';
        }
        field(105; "Quantity Set"; Decimal)
        {
            Caption = 'Quantity Set';
        }
        field(110; "Starting Date"; Date)
        {
            Caption = 'Starting Date';
            Editable = false;
        }
        field(120; "Ending Date"; Date)
        {
            Caption = 'Ending Date';
            Editable = false;
        }
        field(130; "Coating"; Text[50])
        {
            Caption = 'Coating';
            Editable = false;
            TableRelation = ProdControllingItemMap;
        }
        field(131; "Coating Item"; Text[50])
        {
            Caption = 'Coating Item';
            Editable = false;
            TableRelation = ProdControllingItemMap;
        }
        field(132; "First BOM Body"; code[20])
        {
            Caption = 'First BOM Body';
            Editable = false;
            TableRelation = Item;
        }

        field(200; "Modiified"; Boolean)
        {
            Caption = 'Modified record';
            Editable = false;
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
        key(Key1; Modiified)
        {

        }
    }

    trigger OnModify()
    var
    begin
        Rec.Modiified := true;
        if Rec.Modify() then;
    end;
}
 




/// <summary>
/// Table ProdControllingItemMap (ID 50021).
/// </summary>
/// <remarks>
/// 2023.10             Jesper Harder       056         Coating Description on Production Orders
/// </remarks>
table 50021 "ProdControllingItemMap"
{
    Caption = 'SCANPAN Production Controlling Item Map';
    DataClassification = ToBeClassified;

    Permissions = tabledata MapCustomerSalesPerson = rimd;
    
    fields
    {

        field(10; "Item No."; code[20])
        {
            Caption = 'Item No.';
            TableRelation = Item;
        }
        field(20; "Coating"; text[50])
        {
            Caption = 'Coating Name';
        }
    }

    keys
    {
        key(PK; "Item No.", Coating)
        {
            Clustered = true;
        }
    }

} 
/// <summary>
/// Table "SCANPANTmpProdLines" (ID 50007).
/// </summary>
///
/// <remarks>
///
/// 2023.03.13          Jesper Harder                   001 Production Controlling
///
/// </remarks>
table 50007 "ProdControllingLinesTMP"
{
    Caption = 'SCANPANTmpProdLines';
    DataClassification = ToBeClassified;

#if not CLEAN17
    TableType = Temporary;
#else
    ObsoleteState = Pending;
    ObsoleteReason = 'Table will be marked as TableType=Temporary. Make sure you are not using this table to store records';
    ObsoleteTag = '17.0';
#endif

    fields
    {
        field(10; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }
        field(20; "Order Type"; Enum "Enum Controlling Documents")
        {
            Caption = 'Order Type';
            DataClassification = ToBeClassified;
        }
        field(30; "Document No."; Code[20])
        {
            Caption = 'Document No.';
            DataClassification = ToBeClassified;
        }
        field(40; "No."; Code[20])
        {
            Caption = 'No.';
            DataClassification = ToBeClassified;
            TableRelation = Item;
        }
        field(50; Description; Text[100])
        {
            Caption = 'Description';
            DataClassification = ToBeClassified;
        }
        field(60; Quantity; Decimal)
        {
            Caption = 'Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(70; "Finished Quantity"; Decimal)
        {
            Caption = 'Finished Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(71; "Remaining Quantity"; Decimal)
        {
            Caption = 'Remaining Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(72; "Quantity Production Units"; Decimal)
        {
            Caption = 'Quantity Production Units';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(73; "Finished Qty Production Units"; Decimal)
        {
            Caption = 'Finished Quantity Production Units';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(74; "Remaining Qty Production Units"; Decimal)
        {
            Caption = 'Remaining Quantity Production Units';
            BlankZero = true;
            BlankNumbers = BlankZero;
            DataClassification = ToBeClassified;
        }
        field(80; "Starting Date"; Date)
        {
            Caption = 'Starting Date';
            DataClassification = ToBeClassified;
        }
        field(90; "Ending Date"; Date)
        {
            Caption = 'Ending Date';
            DataClassification = ToBeClassified;
        }
        field(100; "Due Date"; Date)
        {
            Caption = 'Due Date';
            DataClassification = ToBeClassified;
        }
        field(110; Material; Text[100])
        {
            Caption = 'Material';
            DataClassification = ToBeClassified;
        }
        field(120; "Route Type"; Text[100])
        {
            Caption = 'Route Type';
            DataClassification = ToBeClassified;
        }
        field(130; YearWeek; Text[10])
        {
            Caption = 'YearWeek';
            DataClassification = ToBeClassified;
        }
        field(140; "Gen. Prod. Posting Group"; Code[20])
        {
            Caption = 'Gen. Prod. Posting Group';
            DataClassification = ToBeClassified;
        }
        field(150; "Product Line Code"; code[20])
        {
            Caption = 'Product Line Code';
            DataClassification = ToBeClassified;
        }
        field(160; "ABCD Category"; Code[20])
        {
            Caption = 'ABCD Category';
            DataClassification = ToBeClassified;
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
    }
}
 



/// <summary>
/// Table ProdControllingPanPlan (ID 50006).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.04.10      Jesper Harder               022     Porting the PanPlan project to AL/Code.
/// 
/// </remarks>
/// 
table 50006 "ProdControllingPanPlan"
{
    Caption = 'Production Controlling PanPlan Table';
    TableType = Temporary;
    DataClassification = AccountData;
    fields
    {
        field(10; "Line No."; Integer)
        {
            Caption = 'Line No.';
        }
        field(20; "Order No."; code[20])
        {
            Caption = 'Order Number';
        }
        field(30; "Start Date"; Date)
        {
            Caption = 'Start Date';
        }
        field(40; "End Date"; Date)
        {
            Caption = 'End Date';
        }
        field(50; "Remaining Quantity"; Integer)
        {
            Caption = 'Remaining Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(60; "Status"; Integer)
        {
            Caption = 'Order Status';
        }
        field(61; "Status Text"; Text[30])
        {
            Caption = 'Status Text';
        }
        field(70; "Order Item No."; code[20])
        {
            Caption = 'Item No.';
        }
        field(80; "Order Item Description"; text[100])
        {
            Caption = 'Item Description';
            //        public string Description1 { get; set; }
        }
        field(90; "Order Unit"; code[20])
        {
            Caption = 'Order Unit';
        }
        field(100; "Bom Item No."; code[20])
        {
            Caption = 'Bom Item No.';
            //    public string BOMItemNum { get; set; }
        }
        field(110; "Bom Description"; Text[100])
        {
            Caption = 'Bom Description';
            //   public string Description2 { get; set; }
        }
        field(120; "Bom Unit"; code[20])
        {
            Caption = 'Bom Unit';
        }
        field(130; "Bom Item Category Code"; Text[100])
        {
            Caption = 'Category';
        }
        field(140; "PO Item No. Level"; Text[10])
        {
            Caption = 'LevelOfProduction Level';
            //public LevelOfProduction Level { get; set; }
        }
        field(150; "Bom Item No. Level"; Text[10])
        {
            Caption = 'LevelOfProduction BomLevel';
            //public LevelOfProduction BOMLevel { get; set; }
        }
        field(160; "Bom Sorting"; Text[10])
        {
            Caption = 'Bom Sorting';
        }
        field(170; "Sorting"; Integer)
        {
            Caption = 'Sorting';
        }
        field(180; "Warehouse Quantity"; Integer)
        {
            Caption = 'Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(190; "Order Quantity"; Integer)
        {
            Caption = 'Order Quantity';
            BlankZero = true;
            BlankNumbers = BlankZero;
            //    public int OrderAmount { get; set; }
        }
        field(200; "Scrap percentage"; Decimal)
        {
            Caption = 'Scrap';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(210; "Bom Expected Quantity"; Integer)
        {
            Caption = 'Expected';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(220; "Bom Remaining Quantity"; Integer)
        {
            Caption = 'Bom Remaining';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }

    }
} 



/// <summary>
/// Table ProdControllingRoutes (ID 50014).
/// </summary>
/// <remarks>
/// 2023.05.11                      Jesper Harder                           030     List All Routing Lines
/// 2023.10                         Jesper Harder                           001     Production Controlling, RoutingLines Priority, Short Comments
/// </remarks>
table 50014 "ProdControllingRoutes"
{
    Caption = 'ProdControllingRoutes';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        //Header Information
        field(1; "Line No."; Integer)
        {
            Caption = 'line No.';
            DataClassification = ToBeClassified;
        }
        field(10; "No."; code[20])
        {
            Caption = 'No.';
        }
        field(20; Description; text[100])
        {
            Caption = 'Description';
        }
        field(40; Status; enum "Routing Status")
        {
            Caption = 'Status';
        }
        field(50; LastDateModified; Date)
        {
            Caption = 'Last Date Modified';
        }
        field(60; Comment; Boolean)
        {
            Caption = 'Has Comment';
        }

        //Lines Information
        field(100; OperationNo; code[20])
        {
            Caption = 'Operation No.';
        }
        field(105; "Routing Priority"; Integer)
        {
            Caption = 'Routing Priority';
        }
        field(110; "Line_Type"; enum "Capacity Type Routing")
        {
            Caption = 'Type';
        }
        field(120; Line_No; code[20])
        {
            Caption = 'Ressource No.';
        }
        field(130; Line_Description; Text[100])
        {
            Caption = 'Ressouce Description';
        }
        field(140; RoutingLinkCode; Code[20])
        {
            Caption = 'Routing Link Code';
        }
        field(150; SetupTime; Decimal)
        {
            BlankZero = true;
            Caption = 'Setup Time';
        }
        field(160; RunTime; Decimal)
        {
            BlankZero = true;
            Caption = 'Runt Time';
        }
        field(170; RunTimeUnitofMeasCode; Code[20])
        {
            Caption = 'Runt Time Unit of Measure Code';
        }
        field(180; WaitTime; Decimal)
        {
            BlankZero = true;
            Caption = 'Wait Time';
        }
        field(190; MoveTime; Decimal)
        {
            BlankZero = true;
            Caption = 'Move Time';
        }
        field(200; FixedScrapQuantity; Decimal)
        {
            BlankZero = true;
            Caption = 'Fixed Scrap Quantity';
        }
        field(210; ScrapFactor; Decimal)
        {
            BlankZero = true;
            Caption = 'Scrap Factor';
        }
        field(220; ConcurrentCapacities; Decimal)
        {
            BlankZero = true;
            Caption = 'Concurrent Capacities';
        }
        field(230; SendAheadQuantity; Decimal)
        {
            BlankZero = true;
            Caption = 'Send Ahead Quantity';
        }
        field(240; UnitCostper; Decimal)
        {
            BlankZero = true;
            Caption = 'Unit Cost per';
        }
        field(500; "isModified"; Boolean)
        {
            Caption = 'Modified Rec.';
        }

    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
    }

    trigger OnModify()
    var
    begin
        Rec.isModified := true;
        if Rec.Modify() then;
    end;
}
 
table 50024 "SalesComparisonData"
{
    /// <summary>
    /// 2024.08             Jesper Harder       076         Sales Comparison Data
    ///
    /// Summary of Recent Changes:
    /// - Due to limitations in renaming fields after deployment, field names remain unchanged.
    /// - Adjusted captions for fields to shorter versions using the Caption property to accommodate limited display space.
    /// - Captions prioritize key information for better readability in the user interface.
    /// - Ensured data integrity by keeping field names consistent while improving user experience.
    /// </summary>

    DataClassification = ToBeClassified;

    fields
    {
        field(1; ID; Integer)
        {
            DataClassification = ToBeClassified;
            AutoIncrement = true; // Identity field that auto-increments
            Caption = 'ID';
        }
        field(2; "Sales Order Amount"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'Total Orders';
        }
        field(3; "Sales Amount INTERN"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'INTERN Orders';
        }
        field(4; "Sales Amount EKSTERN"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'EKSTERN Orders';
        }
        field(5; "Distinct Campaigns"; Integer)
        {
            DataClassification = ToBeClassified;
            Caption = 'Distinct Campaigns';
        }
        field(6; "Sales Index"; Integer)
        {
            DataClassification = ToBeClassified;
            Caption = 'Sales Growth (%)';
        }
        field(7; "Budget Vs Actual"; Integer)
        {
            DataClassification = ToBeClassified;
            Caption = 'Sales vs. Budget (%)';
        }
        field(8; "Last Update"; DateTime)
        {
            DataClassification = SystemMetadata;
            Caption = 'Last Update';
        }
        field(9; "Budget Amount INTERN"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'INTERN Budget';
        }
        field(10; "Budget Amount EKSTERN"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'EKSTERN Budget';
        }
        field(11; "Total Budget Amount"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'Total Budget';
        }
        // Obsolete fields
        field(12; "Realized Sales Amount INTERN"; Decimal)
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not used.';
            DataClassification = ToBeClassified;
        }
        field(13; "Realized Sales Amount EKSTERN"; Decimal)
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not used.';
            DataClassification = ToBeClassified;
        }
        field(14; "Total Realized Sales Amount"; Decimal)
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not used.';
            DataClassification = ToBeClassified;
        }
        // New fields for YTD Sales Amounts with shorter captions
        field(15; "YTD Sales Amount INTERN"; Decimal)
        {
            Caption = 'YTD Sales INTERN';
        }
        field(16; "YTD Sales Amount EKSTERN"; Decimal)
        {
            Caption = 'YTD Sales EKSTERN';
        }
        field(17; "Total YTD Sales Amount"; Decimal)
        {
            Caption = 'Total YTD Sales';
        }
        /*
                field(18; "Last Year YTD Sales Amount INTERN"; Decimal)
                {
                    Caption = 'Last YTD Sales INTERN';
                }
                field(19; "Last Year YTD Sales Amount EKSTERN"; Decimal)
                {
                    Caption = 'Last YTD Sales EKSTERN';
                }
                field(20; "Total Last Year YTD Sales Amount"; Decimal)
                {
                    Caption = 'Total Last YTD Sales';
                }
        */
        field(18; "Last YTD Sales INTERN"; Decimal)
        {
            Caption = 'Last YTD Sales INTERN';
        }
        field(19; "Last YTD Sales EKSTERN"; Decimal)
        {
            Caption = 'Last YTD Sales EKSTERN';
        }
        field(20; "Total Last YTD Sales"; Decimal)
        {
            Caption = 'Total Last YTD Sales';
        }

    }

    keys
    {
        key(PK; ID)
        {
            Clustered = true;
        }
    }
}
 



/// <summary>
/// Table "SCANPANTMPSalesLine" (ID 50009).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03                     Jesper                          005     Sales Lines Page 
/// 2023.03.27                  Jesper Harder                   015     Flowfield Tariff - SalesLine
/// 
/// </remarks>
/// 
table 50009 "SalesLineTMP"
{
    DataCaptionFields = "No.", Description;
    Caption = 'SCANPANTMPSalesLine';
    DataClassification = ToBeClassified;
    TableType = Temporary;
    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }

        field(2; "Document No."; code[20])
        {
            Caption = 'Document No.';
            DataClassification = ToBeClassified;
            //TableRelation = "Sales Header"."No." where ("Document Type" = Const("Order"));
        }
        field(3; "Sell-To Customer Name"; Text[100])
        {
            Caption = 'Sell-To Customer Name';
            DataClassification = ToBeClassified;
        }
        field(4; "Type"; Text[20])
        {
            Caption = 'Type';
            DataClassification = ToBeClassified;
        }
        field(5; "No."; code[20])
        {
            Caption = 'No.';
            DataClassification = ToBeClassified;
        }
        field(6; "Item Cross-Reference No."; code[50])
        {
            Caption = 'Item Cross-Reference No.';
            DataClassification = ToBeClassified;
        }
        field(7; Description; text[100])
        {
            Caption = 'Description';
            DataClassification = ToBeClassified;
        }
        field(8; "Unit Price"; Decimal)
        {
            Caption = 'Unit Price';
            DataClassification = ToBeClassified;
        }
        field(9; Quantity; Decimal)
        {
            Caption = 'Quantity';
            DataClassification = ToBeClassified;
        }
        field(10; "Outstanding Quantity"; Decimal)
        {
            Caption = 'Outstanding Quantity';
            DataClassification = ToBeClassified;
        }
        field(11; "Qty. Shipped Not Invoiced"; Decimal)
        {
            Caption = 'Qty. Shipped Not Invoiced';
            DataClassification = ToBeClassified;
        }
        field(12; "Line Amount"; Decimal)
        {
            Caption = 'Line Amount';
            DataClassification = ToBeClassified;
        }
        field(13; "Outstanding Amount"; Decimal)
        {
            Caption = 'Outstanding Amount';
            DataClassification = ToBeClassified;
        }
        field(14; "Currency Code"; Code[20])
        {
            Caption = 'Currency Code';
            DataClassification = ToBeClassified;
        }
        field(15; "Planned Shipment Date"; Date)
        {
            Caption = 'Planned Shipment Date';
            DataClassification = ToBeClassified;
        }
        field(16; "Salesperson Code"; code[20])
        {
            Caption = 'Salesperson Code';
            DataClassification = ToBeClassified;
            TableRelation = "Salesperson/Purchaser";
        }
        field(17; "Country Code"; code[20])
        {
            Caption = 'Country Code';
            DataClassification = ToBeClassified;
            TableRelation = "Country/Region";
        }
        field(18; "Ship-To Name"; text[100])
        {
            Caption = 'Ship-To Name';
            DataClassification = ToBeClassified;
        }
        field(19; "Sell-To Customer No."; Code[20])
        {
            Caption = 'Sell-To Customer No.';
            DataClassification = ToBeClassified;
            TableRelation = Customer;
        }
        field(20; "External Document No."; Text[50])
        {
            Caption = 'External Document No.';
            DataClassification = ToBeClassified;
        }
        //015     Flowfield Tariff - SalesLine
        field(21; "Tariff No."; code[20])
        {
            Caption = 'Tariff No.';
            DataClassification = ToBeClassified;
        }
        field(22; "Priority"; Text[30])
        {
            Caption = 'Order Priority';
            DataClassification = ToBeClassified;
        }
        field(23; "Location Code"; code[20])
        {
            Caption = 'Location Code';
            DataClassification = ToBeClassified;
        }
        field(24; "Document Status"; Enum "Sales Document Status")
        {
            Caption = 'Document Status';
            DataClassification = ToBeClassified;
        }
        field(25; ItemUnitCode; code[20])
        {
            Caption = 'Item Unit Code';
        }
        field(26; ItemUnitQuantity; Integer)
        {
            Caption = 'ItemUnitQuantity';
            BlankZero = true;
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
            SumIndexFields = "Line Amount", Quantity;
        }
        key(Key1; "Sell-to Customer No.", "Document No.", "No.")
        {
            SumIndexFields = "Line Amount", Quantity;
        }

    }

}
 
table 50025 "SalesOrderLineTemp"
{
    ///<summary>
    /// 2024.09  Jesper Harder  081  API displaying Sales orders for integration with Makes You Local
    ///</summary>

    Caption = 'SalesOrderLineTemp';
    TableType = Temporary;

    fields
    {
        field(1; "Company Name"; Text[30]) { Caption = 'Company Name'; }
        field(100; "Order No."; Code[20]) { Caption = 'Order No.'; }
        field(105; "Document Status"; Enum "Sales Document Status") { Caption = 'Document Status'; }
        field(110; "Order Date"; Date) { Caption = 'Order Date'; }
        field(120; "Customer No."; Code[20]) { Caption = 'Customer No.'; }
        field(130; "Customer Name"; Text[100]) { Caption = 'Customer Name'; }
        field(140; "Address"; Text[100]) { Caption = 'Address'; }
        field(150; "Address 2"; Text[100]) { Caption = 'Address 2'; }
        field(160; "City"; Text[50]) { Caption = 'City'; }
        field(170; "Post Code"; Code[20]) { Caption = 'Post Code'; }
        field(180; "Country/Region Code"; Code[10]) { Caption = 'Country/Region Code'; }
        field(190; "Contact"; Text[100]) { Caption = 'Contact'; }
        field(195; "Phone No."; Text[30]) { Caption = 'Phone No.'; }
        field(196; "Email"; Text[100]) { Caption = 'Email'; }
        field(200; "Line No."; Integer) { Caption = 'Line No.'; }
        field(210; "Item Type"; Enum "Sales Line Type") { Caption = 'Item Type'; }
        field(220; "Item No."; Code[20]) { Caption = 'Item No.'; }
        field(230; Description; Text[100]) { Caption = 'Description'; }
        field(235; "Quantity to Ship"; Decimal) { Caption = 'Quantity to Ship'; }
        field(236; "Quantity Shipped"; Decimal) { Caption = 'Quantity Shipped'; }
        field(240; Quantity; Decimal) { Caption = 'Quantity'; }
        field(250; "Line Amount"; Decimal) { Caption = 'Line Amount'; }
        // Existing fields...

        field(260; "Shipping Agent Code"; Text[250]) { Caption = 'Shipping Agent Code'; }
        field(261; "Shipping Agent Name"; Text[50]) { Caption = 'Shipping Agent Name'; }
        field(262; "Shipping Agent URL"; Text[250]) { Caption = 'Shipping Agent URL'; } // Shortened
        field(270; "Shipping Agent Service Code"; Text[250]) { Caption = 'Shipping Agent Service Code'; }
        field(271; "Shipping Agent Service Name"; Text[100]) { Caption = 'Shipping Agent Service Name'; }
        field(280; "Track & Trace Number"; Text[250]) { Caption = 'Track & Trace Number'; }
        field(281; "Track & Trace URL"; Text[250]) { Caption = 'Track & Trace URL'; }
        // Add other fields as needed
    }

    keys
    {
        key(PK; "Order No.", "Line No.") { Clustered = true; }
    }
}
 
table 50001 "SalespriceListTMP"
{
    Caption = 'SCANPANTemptableSalespriceList';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; LineNo; Integer)
        {
            Caption = 'LineNo';
            DataClassification = ToBeClassified;
        }
        field(10; ItemNo; Code[20])
        {
            Caption = 'ItemNo';
            DataClassification = ToBeClassified;
        }
        field(11; ItemImage; MediaSet)
        {
            Caption = 'ItemImage';
            DataClassification = ToBeClassified;
        }
        field(20; Description; Text[200])
        {
            Caption = 'Description';
            DataClassification = ToBeClassified;
        }
        field(30; Colli; Integer)
        {
            Caption = 'Colli';
            DataClassification = ToBeClassified;
        }
        field(31; ColliCode; code[20])
        {
            Caption = 'ColliCode';
            DataClassification = ToBeClassified;
        }

        field(40; NetPrice; Decimal)
        {
            Caption = 'NetPrice';
            DataClassification = ToBeClassified;
        }
        field(50; GrossPrice; Decimal)
        {
            Caption = 'GrossPrice';
            DataClassification = ToBeClassified;
        }
        field(60; BarCode; Code[20])
        {
            Caption = 'BarCode';
            DataClassification = ToBeClassified;
        }
        field(70; SourceNo; Code[20])
        {
            Caption = 'SourceNo';
            DataClassification = ToBeClassified;
        }
        field(80; CustomerNo; Code[20])
        {
            Caption = 'CustomerNo';
            DataClassification = ToBeClassified;
        }
        field(90; CustomerItemNo; Code[20])
        {
            Caption = 'CustomerItemNo';
            DataClassification = ToBeClassified;
        }
        field(100; VatPct; integer)
        {
            Caption = 'VatPct';
            DataClassification = ToBeClassified;
        }
        field(110; LanguageCode; code[20])
        {
            Caption = 'LanguageCode';
            DataClassification = ToBeClassified;
        }
        field(120; CustomerPriceGroup; Code[20])
        {
            Caption = 'CustomerPriceGroup';
            DataClassification = ToBeClassified;
        }
        field(130; GenProdPostingGroup; Code[20])
        {
            Caption = 'GenProdPostingGroup';
            DataClassification = ToBeClassified;
        }
        field(140; ItemProductLineCode; Code[20])
        {
            Caption = 'ItemProductLineCode';
            DataClassification = ToBeClassified;
        }
        field(150; ItemCategoryCode; Code[20])
        {
            Caption = 'ItemCategoryCode';
            DataClassification = ToBeClassified;
        }
        field(160; NetWeightItemCard; decimal)
        {
            Caption = 'NetWeightItemCard';
            DataClassification = ToBeClassified;
        }
        field(170; GrossWeightItemCard; decimal)
        {
            Caption = 'GrossWeightItemCard';
            DataClassification = ToBeClassified;
        }
        field(180; GrossWeightUnitMeasure; decimal)
        {
            Caption = 'NetWeightUnitMeasure';
            DataClassification = ToBeClassified;
        }
        field(190; ItemUnitOfMeasure; Code[20])
        {
            Caption = 'ItemUnitOfMeasure';
            DataClassification = ToBeClassified;
        }
        field(200; PricelistCode; Code[20])
        {
            Caption = 'PricelistCode';
            DataClassification = ToBeClassified;
        }



    }
    keys
    {
        key(PK; LineNo)
        {
            Clustered = true;
        }
        key(AttributeSort; GenProdPostingGroup, ItemProductLineCode, ItemNo)
        {
            Clustered = false;
        }

    }
    fieldgroups
    {
        fieldgroup(Brick; ItemNo, ItemImage, Description)
        {

        }
    }
}
 




/// <summary>
/// Table API Setup (ID 50020).
/// </summary>
/// <remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>

table 50020 "Scanpan API Setup"
{
    Caption = 'API Setup Table';
    DataClassification = ToBeClassified;

    Permissions = tabledata "Scanpan API Setup" = rimd;

    fields
    {
        field(1; LineNo; Integer)
        {
            Caption = 'Line No.';
        }
        field(10; "Profile Name"; code[20])
        {
            Caption = 'Profile Name';
        }

        field(20; "Request Type"; Enum "Http Request Type")
        {
            Caption = 'Request Type';
        }

        field(30; "URL"; text[200])
        {
            Caption = 'URL';
        }

        field(40; "User Name"; text[100])
        {
            Caption = 'User Name';
        }
        field(50; "Password"; text[100])
        {
            Caption = 'Password';
        }
        field(60; "Subscription key"; text[100])
        {
            Caption = 'Subscription key';
        }
    }

    keys
    {
        key(Key1; LineNo)
        {
            Clustered = true;
        }
    }
} 




/// <summary>
/// Table UserSetupPages (ID 50022).
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
table 50022 "UserSettingsPage"
{
    Caption = 'User Save Settings';
    DataClassification = ToBeClassified;

    Permissions = tabledata "UserSettingsPage" = rimd;

    fields
    {
        field(1; "UserID"; text[250])
        {

        }
        field(2; "PageID"; Text[50])
        {

        }
        field(20; "Text50_1"; Text[50])
        {

        }
        field(21; "Text50_2"; text[2048])
        {

        }
        field(22; "Text50_3"; Text[50])
        {

        }
        field(30; "Boolean_1"; boolean)
        {

        }
        field(40; "Integer_1"; Integer)
        {

        }
        field(41; "Integer_2"; Integer)
        {

        }
        field(42; "Simulated"; boolean)
        { }
        field(43; "Planned"; boolean)
        { }
        field(44; "Firm Planned"; boolean)
        { }
        field(45; "Released"; boolean)
        { }
        field(46; "Finished"; boolean)
        { }


        field(100; "EnumPeriodFormat"; Enum "PeriodType")
        {

        }
        field(101; "EnumChartDataType"; Enum EnumChartDataType)
        { }
        field(102; "EnumBusinessChartType"; enum "Business Chart Type")
        { }

        field(200; "ChartVisibilityAll"; Boolean)
        { }
        field(201; "ChartVisibility1"; Boolean)
        { }
        field(202; "ChartVisibility2"; Boolean)
        { }
        field(203; "ChartVisibility3"; Boolean)
        { }
        field(204; "ChartVisibility4"; Boolean)
        { }
        field(205; "ChartVisibility5"; Boolean)
        { }
        field(206; "ChartVisibility6"; Boolean)
        { }
        field(207; "ChartVisibility7"; Boolean)
        { }
        field(208; "ChartVisibility8"; Boolean)
        { }
        field(209; "VisibleFoundry"; Boolean)
        { }


        field(210; "Visible09"; Boolean)
        { }
        field(211; "Visible15"; Boolean)
        { }
        field(212; "Visible10"; Boolean)
        { }
        field(213; "Visible16"; Boolean)
        { }
        field(214; "Visible18"; Boolean)
        { }
        field(215; "Visible25"; Boolean)
        { }
        field(216; "Visible27"; Boolean)
        { }
        field(217; "VisiblePA"; Boolean)
        { }
        field(218; "VisibleSK"; Boolean)
        { }
        field(219; "VisibleNI"; Boolean)
        { }
        field(220; "VisibleProcessing"; Boolean)
        { }
        field(221; "VisiblePackaging"; Boolean)
        { }
    }

    keys
    {
        key(PK; UserID)
        {
            Clustered = true;
        }
        key(Key1; PageID)
        {

        }
    }
} 

/// 
/// 2024.04             Jesper Harder       063         EU tax system
/// 

table 50023 "VATEntriesBaseAmtSum"
{
    Caption = 'VATEntriesBaseAmtSum';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; "Entry No."; Integer)
        {
            Caption = 'Entry No.';
            Editable = false;
        }

        field(8; Base; Decimal)
        {
            //Method = Sum;
            AutoFormatType = 1;
            Caption = 'Base';
            Editable = false;
        }
        field(12; "Bill-to/Pay-to No."; Code[20])
        {
            Caption = 'Bill-to/Pay-to No.';
        }
        field(13; "EU 3-Party Trade"; Boolean)
        {
            Caption = 'EU 3-Party Trade';
        }
        field(19; "Country/Region Code"; Code[10])
        {
            Caption = 'Country/Region Code';
        }
        field(44; "Additional-Currency Base"; Decimal)
        {
            //Method = Sum;
            AutoFormatExpression = GetCurrencyCode();
            AutoFormatType = 1;
            Caption = 'Additional-Currency Base';
            Editable = false;
        }
        field(55; "VAT Registration No."; Text[20])
        {
            Caption = 'VAT Registration No.';
        }
        field(59; "EU Service"; Boolean)
        {
            Caption = 'EU Service';
            Editable = false;
        }
        field(90; "EU Country/Region Code"; Code[10])
        {
            Caption = 'EU Country/Region Code';
        }
    }
    keys
    {
        key(Key1; "Entry No.")
        {
            Clustered = true;
        }
    }

    var
        GeneralLedgerSetup: Record "General Ledger Setup";
        GLSetupRead: Boolean;

    local procedure GetCurrencyCode(): Code[10]
    begin
        if not GLSetupRead then begin
            GeneralLedgerSetup.Get();
            GLSetupRead := true;
        end;
        exit(GeneralLedgerSetup."Additional Reporting Currency");
    end;

} 


/// <summary>
/// Table "SCANPANWMSPickBinBalance" (ID 50008).
/// </summary>
/// 
/// <remarks>
/// 
/// 2023.03                     Jesper Harder                   002             Check warehouse balance in Bin
/// 
/// </remarks>  
table 50008 "WMSPickBinBalanceTMP"
{
    Caption = 'TMP Pick Bin Balance';
    DataClassification = ToBeClassified;
    TableType = Temporary;

    fields
    {
        field(1; "Line No."; Integer)
        {
            Caption = 'Line No.';
            DataClassification = ToBeClassified;
        }
        field(2; "Item No"; Code[20])
        {
            Caption = 'Item No';
            DataClassification = ToBeClassified;
        }
        field(3; "Item Description"; Text[100])
        {
            Caption = 'Item Description';
            DataClassification = ToBeClassified;
        }
        field(4; "Bin Code"; Code[20])
        {
            Caption = 'Bin Code';
            DataClassification = ToBeClassified;
        }
        field(6; "Pick Quantity"; Decimal)
        {
            Caption = 'Pick Quantity';
            DataClassification = ToBeClassified;
        }
        field(7; "Bin Quantity"; Decimal)
        {
            Caption = 'Bin Quantity';
            DataClassification = ToBeClassified;
        }
        field(8; "Bin Quantity Balance"; Decimal)
        {
            Caption = 'Bin Quantity Balance';
            DataClassification = ToBeClassified;
        }
    }
    keys
    {
        key(PK; "Line No.")
        {
            Clustered = true;
        }
    }
}
 


/// <summary>
/// TableExtension "BinContentTableExt" (ID 50008) extends Record Bin Content.
/// </summary>
/// 
/// <remarks>
/// 
///  2023.03.18                 Jesper Harder               009     Bin Content Added flowfield Inventory Posting Group, Product Line
/// 
/// </remarks> 
tableextension 50008 "BinContentTableSC" extends "Bin Content"
{
    fields
    {
        field(50000; "Inventory Posting Group"; Code[20])
        {
            Caption = 'Inventory Posting Group';
            FieldClass = FlowField;
            CalcFormula = lookup(Item."Inventory Posting Group" WHERE("No." = field("Item No.")));
        }
        field(50001; "Product Line Code"; Code[50])
        {
            Caption = 'Product Line Code';
            FieldClass = FlowField;
            CalcFormula = lookup(Item."Product Line Code" where("No." = field("Item No.")));
        }
        field(50003; "Transfer Order No."; code[20])
        {
            Caption = 'Transfer Order No.';
            FieldClass = FlowField;
            CalcFormula = lookup("Transfer Line"."Document No." where("Item No." = field("Item No.")));

        }
    }
}
 



/// <summary>
/// TableExtension CapacityLedgerEntry (ID 50029) extends Record Capacity Ledger Entry.
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
tableextension 50029 "CapacityLedgerEntry" extends "Capacity Ledger Entry"
{
    fields
    {
        field(50000; Status; Enum "Production Order Status")
        {
            Caption = 'Status';
            FieldClass = FlowField;
            CalcFormula = lookup("Prod. Order Line".Status where("Prod. Order No." = field("Order No.")));
        }
        field(50005; "Item Category Code"; code[20])
        {
            Caption = 'Item Category Code';
            fieldClass = Flowfield;
            CalcFormula = lookup(Item."Item Category Code" where("No." = field("Item No.")));
        }
    }
} 




tableextension 50021 "CDO E-Mail Recipient" extends "CDO E-Mail Recipient"
{

    fields
    {
        field(50000; "Customer Name"; text[100])
        {
            Caption = 'Customer Name';

            FieldClass = FlowField;
            CalcFormula = lookup(
                Customer.Name where("No." = field("No.")));
        }
        field(50001; "Customer Country/Region Code"; code[20])
        {
            Caption = 'Customer Country/Region Code';
            FieldClass = FlowField;
            CalcFormula = lookup(
                    Customer."Country/Region Code" where("No." = field("No.")));
        }
        field(50002; "Customer SalesPerson"; code[20])
        {
            Caption = 'Customer SalesPerson Code';
            FieldClass = FlowField;
            CalcFormula = lookup(
                    Customer."Salesperson Code" where("No." = field("No.")));
        }
    }
} 


///
/// 2024.05             Jesper Harder       067         Add fields to facilitate Datawarehouse fields
/// 
tableextension 50032 "CountryRegion" extends "Country/Region"
{
    fields
    {
        //067
        field(50000; "SalesMarket"; Code[20])
        {
            Caption = 'Sales Market';
            TableRelation = "Country/Region".Code;
        }
        field(50001; "Market Type"; Text[30])
        {
            Caption = 'Market Type (Removed)';
            ObsoleteState = Removed;
            ObsoleteReason = 'This field has been removed.';
        }
        field(50002; "Channel Type"; Text[30])
        {
            Caption = 'Channel Type (Removed)';
            ObsoleteState = Removed;
            ObsoleteReason = 'This field has been removed.';

        }

        field(50003; "Market Types"; enum CountryMarketType)
        {
            Caption = 'Market Type';
        }
        field(50004; "Channel Types"; enum CountrySalesChannelEnum)
        {
            Caption = 'Channel Type';
        }
    }
} 




/// <summary>
/// TableExtension "SCANPAN_Customer" (ID 50004) extends Record Customer.
/// 
/// 2023.01.23          Jesper Harder       0193        Extends Customer table with lookup to Bank, to be used in bank-address information on printouts
/// 2023.01.27          Jesper Harder       0193        Extends Customer table with Claims Code + User
/// 2023.11             Jesper Harder       059         PO Number City, break lookup for Web Customers
/// 2024.09             Jesper Harder       080         Self-insured limit check with warning on sales order.
/// 2024.10             Jesper Harder       090         Field for Claims, allow reporting quantity
/// 
/// </summary>
tableextension 50004 "Customers" extends Customer
{
    fields
    {
        field(50000; Bank; Code[20])
        {
            Caption = 'Bank';
            DataClassification = AccountData;
            TableRelation = "Bank Account";
        }
        field(50001; ClaimsCode; code[20])
        {
            Caption = 'Claims Code';
            DataClassification = EndUserIdentifiableInformation;
        }
        field(50002; ClaimsUser; code[20])
        {
            Caption = 'Claims User';
            DataClassification = EndUserIdentifiableInformation;
        }
        field(50003; UseSalesNoSeries; code[20])
        {
            Caption = 'Use alternative Sales Order No.Series';
            DataClassification = SystemMetadata;
            TableRelation = "No. Series";
        }
        field(50004; "ShowCountryCode"; boolean)
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Reserved for future use.';
            Caption = 'Show Country Code on Invoice';
            DataClassification = SystemMetadata;
        }
        field(50005; "Self-Insured (LCY)"; Decimal)
        {
            DataClassification = ToBeClassified;
            Caption = 'Self-Insured Limit (LCY)';
        }

        // 090
        field(50006; "Allow Claims Quantity"; Boolean)
        {
            DataClassification = ToBeClassified;
            Caption = 'Allow Claims Quantity';
        }
    }
}
 



/// 2024.05             Jesper Harder       066         Test for Correct Chain Dimension value on Customer
tableextension 50031 DefaultDimension extends "Default Dimension"
{

    fields
    {
        //066
        field(50000; "Dimension Value Type"; Option)
        {
            Caption = 'Dimension Value Type';
            OptionCaption = 'Standard,Heading,Total,Begin-Total,End-Total';
            OptionMembers = Standard,Heading,Total,"Begin-Total","End-Total";

            //TableRelation = "Dimension Value";
            FieldClass = FlowField;
            CalcFormula = lookup("Dimension Value"."Dimension Value Type" where(
                                "Dimension Code" = field("Dimension Code"),
                                 Code = field("Dimension Value Code")
                                ));
        }
    }
}


 
//SHIPITREMOVE

/// <summary>
/// TableExtension IDYSTransportOrderLine (ID 50010) extends Record IDYS Transport Order Line.
/// </summary>
///
/// <remarks>
/// 2023.05.01                  Jesper Harder                   027         Add Shipment tracking
/// </remarks>
///


/*
tableextension 50010 "IDYSTransportOrderLine" extends "IDYS Transport Order Line"
{
    fields
    {
        field(50000; "Document Date"; date)
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';

            Caption = 'Transport Order Document Date';
            Description = 'Transport Order Document Date.';
            //FieldClass = FlowField;
            //CalcFormula = lookup(
            //    "IDYS Transport Order Header"."Document Date" where("No." = field("Transport Order No.")));
        }
        field(50001; "Tracking No."; code[50])
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';

            Caption = 'Tracking No.';
            Description = 'Shows IDYS Transport Order Tracking No.';
            //FieldClass = FlowField;
            //CalcFormula = lookup(
            //    "IDYS Transport Order Header"."Tracking No." where("No." = field("Transport Order No.")));
        }
    }
}
*/ 


/// <summary>
/// TableExtension SCANPAN Inventory Setup (ID 50001) extends Record Inventory Setup.
/// </summary>
/// <remarks>
/// 
/// Version list
/// 2022.12             Jesper Harder       0193        Added modifications
/// 2023.07.23          Jesper Harder       042     Salesprice based on PurchasePrice Markup
/// 
/// </remarks>
tableextension 50001 "InventorySetup" extends "Inventory Setup"
{
    fields
    {
        //0193
        field(50000; "EAN Country Code"; Code[2]) { Caption = 'EAN Country Code'; }
        field(50001; "EAN Company No."; Code[5]) { Caption = 'EAN Company No.'; }
        field(50002; "Last EAN Code Used"; code[5]) { Caption = 'Last EAN Code Used'; }

        field(50003; "Use Bar Code Type"; Option)
        {
            Caption = 'Use Bar Code Type';
            OptionCaption = 'UCC-12,EAN-13';
            OptionMembers = "UCC-12","EAN-13";
        }
        field(50004; "UPC Prefix"; Code[1]) { Caption = 'UPC Prefix'; }
        field(50005; "UPC Company No."; Code[5]) { Caption = 'UPC Company No.'; }
        field(50006; "Last UPC Code Used"; Code[5]) { Caption = 'Last UPC Code Used'; }

        //042
        field(50007; "PriceMarkupPct"; Decimal)
        {
            Caption = 'Salesprice Purchase Markup pct';
        }


    }
}
 
/// <summary>
/// TableExtension SCANPAN Item (ID 50000) extends Record Item.
/// </summary>
/// <remarks>
///
/// Version list
/// 2022.12             Jesper Harder       0193    Added modifications
/// 2023.03             Jesper Harder       007     Added flowfield identifying Warehouse orders from Auning to Ryom
/// 2023.07.23          Jesper Harder       042     Salesprice based on PurchasePrice Markup
/// 2024.06             Jesper Harder       069     ItemBodyType, Enum, TableExtension and PageExtension
///
/// </remarks>
tableextension 50000 "ItemExt" extends Item
{
    fields
    {
        field(50000; "Item Vendor Name"; Text[100])
        {
            CalcFormula = lookup(Vendor.Name WHERE("No." = field("Vendor No.")));
            Editable = false;
            fieldClass = Flowfield;
        }
        field(50001; "Trans. RYOM-AUNING (Qty.)"; Decimal)
        {
            fieldClass = Flowfield;
            CalcFormula = sum("Transfer Line"."Outstanding Qty. (Base)" where("Derived From Line No." = const(0),
                                                                               "Item No." = field("No."),
                                                                               "Transfer-from Code" = const('RYOM'),
                                                                               "Transfer-to Code" = const('AUNING'),
                                                                               "Variant Code" = field("Variant Filter"),
                                                                               "Shortcut Dimension 1 Code" = field("Global Dimension 1 Filter"),
                                                                               "Shortcut Dimension 2 Code" = field("Global Dimension 2 Filter"),
                                                                               "Receipt Date" = field("Date Filter"),
                                                                               "Unit of Measure Code" = field("Unit of Measure Filter")
            ));
            Caption = 'Trans. Outstanding RYOM-AUNING (Qty.)';
            DecimalPlaces = 0 : 5;
            Editable = false;
        }

        //042
        field(50002; "MarkupPurchaseprice"; Decimal)
        {
            ObsoleteState = removed;
            ObsoleteReason = 'Not used 042';
            Caption = 'Markup Purchase price';
        }
        field(50003; "Purch.price pri.vendor"; Decimal)
        {
            ObsoleteState = removed;
            ObsoleteReason = 'Not used 042';
            Caption = 'Last Purchase price Primary Vendor';
        }
        field(50004; "Purch.price Markup pct"; Decimal)
        {
            ObsoleteState = removed;
            ObsoleteReason = 'Not used 042';
            Caption = 'Purchase Price Markup pct';
            TableRelation = "Inventory Setup";
            FieldClass = FlowField;
            CalcFormula = lookup("Inventory Setup".PriceMarkupPct where("Primary Key" = const('')));
        }

        //069
        field(50005; "ItemBodyType"; Enum "EnumItemBodyType")
        {
            Caption = 'Item Body Type';
        }
    }

    fieldgroups
    {
        addlast(DropDown; "Calculated Available NOTO", "Calculated Available Date NOTO", "Calculated Available Ext. NOTO") { }
    }
} 
/// <summary>
/// TableExtension ItemLedgerEntry (ID 50015) extends Record Item Ledger Entry.
/// </summary>
///
/// <remarks>
///
/// 2023.07             Jesper Harder           036         Value Entry, new fields, Added Code
///
/// </remarks>
tableextension 50014 "ItemLedgerEntry" extends "Item Ledger Entry"
{
    fields
    {
        field(50000; "Product Line Code"; code[20])
        {
            Caption = 'Product Line Code';
            TableRelation = "NOTO Item Categories".code where("Category Code" = const(ProductLineCode));
        }
    }
} 
/// <summary>
/// TableExtension ItemUnitofMeasureExtSC (ID 50003) extends Record Item Unit of Measure.
/// </summary>
tableextension 50003 "ItemUnitofMeasureExtSC" extends "Item Unit of Measure"
{
}
 







/// <summary>
/// TableExtension PostedWhseShipmentHeader (ID 50016) extends Record Posted Whse. Shipment Header.
/// </summary>
/// <remarks>
/// 
/// 2023.7.19                   Jesper Harder           035 Post TransportOrderID posted to Posted Whse. ShipmentLines through 14.7.2023 Added Code
/// 
/// </remarks>      
tableextension 50016 "PostedWhseShipmentHeader" extends "Posted Whse. Shipment Header"
{

    fields
    {
        field(50000; "Transport Order No.";code[20])
        {
            Caption = 'Transport Order No.';
            DataClassification = ToBeClassified;
        }
    }
} 
/// <summary>
/// TableExtension PostedWhseShipmentLine (ID 50013) extends Record Posted Whse. Shipment Line.
/// </summary>
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// </remarks>
tableextension 50013 "PostedWhseShipmentLine" extends "Posted Whse. Shipment Line"
{
    fields
    {
        field(50000; "Transport Order No."; code[20])
        {
            Caption = 'Transport Order No.';
            DataClassification = ToBeClassified;
        }
        field(50001; "Transport Order No2"; Code[20])
        {
            Caption = 'Transport Order No2.';
            FieldClass = FlowField;
            CalcFormula = lookup("Posted Whse. Shipment Header"."Transport Order No."
                        where("No." = field("No.")));
        }
    }
} 
/// <summary>
/// TableExtension ProdOrderLine (ID 50009) extends Record Prod. Order Line.
/// </summary>
/// <remarks>
/// 2023.11             Jesper Harder       057         Page Part - Graphs sorting parts
/// </remarks>
tableextension 50009 "ProdOrderLine" extends "Prod. Order Line"
{
    fields
    {
        field(50000; Int; Integer)
        {
            Caption = 'Int';
            DataClassification = ToBeClassified;
            ObsoleteState = Pending;
            ObsoleteReason = 'To be removed.';
            ObsoleteTag = '17.0';
        }

        //57
        field(50002; "Set Quantity"; Decimal)
        {
            Caption = 'Set Multiplier';
        }
        field(50003; "Finished Set Quantity"; Decimal)
        {
            Caption = 'Finished Set Quantity';
        }
        field(50004; "Remaining Set Quantity"; Decimal)
        {
            Caption = 'Remaining Set Quantity';
        }
        field(50005; "Item Category Code"; code[20])
        {
            Caption = 'Item Category Code';
            fieldClass = Flowfield;
            CalcFormula = lookup(Item."Item Category Code" where("No." = field("Item No.")));
        }
        field(50006; "Quantity SetQuantity"; Decimal)
        {
            Caption = 'Quantity SetQuantity';
        }
    }
} 





/// <summary>
/// TableExtension ProdOrderRoutingLine (ID 50027) extends Record prod.
/// </summary>
/// <remarks>
/// 2023.10            Jesper Harder        055         Priority and Description P.Order RoutingLines
/// </remarks>
tableextension 50027 "ProdOrderRoutingLine" extends "Prod. Order Routing Line"
{
    fields
    {
        field(50010; "Priority"; Integer)
        {
            Caption = 'Priority';
            BlankZero = true;
            BlankNumbers = BlankZero;
        }
        field(50015; "Comment"; text[150])
        {
            Caption = 'Comment';
        }

        /*
                field(50016; "Coating"; Text[50])
                {
                    Caption = 'Coating';
                    Editable = false;
                    TableRelation = ProdControllingItemMap;
                }
        */

    }


} 
/// <summary>
/// TableExtension "SCANPANProductionOrder" (ID 50007) extends Record Production Order.
/// </summary>
/// <remarks>
///
/// 2023.03.17                      Jesper Harder                        008     Released Production Added flowfield for Finished + Remaining Quantity
///
/// </remarks>

tableextension 50007 "ProductionOrder" extends "Production Order"
{
    fields
    {
        //008
        field(50000; "Finished Quantity"; Decimal)
        {
            Caption = 'Finished Quantity';
            DecimalPlaces = 0 : 5;
            Editable = false;
            FieldClass = FlowField;
            CalcFormula = sum("Prod. Order Line"."Finished Quantity" WHERE(
                                                        "Status" = field(Status),
                                                        "Prod. Order No." = field("No."),
                                                        "Item No." = field("Source No.")

            ));
        }
        //008
        field(50001; "Remaining Quantity"; Decimal)
        {
            Caption = 'Remaining Quantity';
            DecimalPlaces = 0 : 5;
            Editable = false;
            FieldClass = FlowField;
            CalcFormula = sum("Prod. Order Line"."Remaining Quantity" WHERE(
                                                        "Status" = field(Status),
                                                        "Prod. Order No." = field("No."),
                                                        "Item No." = field("Source No.")

            ));
        }
        field(50002; "Component Lines Count"; integer)
        {
            Caption = 'Component Lines Count';
            Editable = false;
            FieldClass = FlowField;
            CalcFormula = count("Prod. Order Component" where(
                                                    Status = field(Status),
                                                    "Prod. Order No." = field("No.")
                                                    ));
        }
    }
}
 





/// <summary>
/// TableExtension Purchase Header (ID 50022) extends Record Purchase Header.
/// </summary>
/// ///<remarks>
/// 2023.09             Jesper Harder       048         API stack for DSV API
/// </remarks>
tableextension 50022 "Purchase Header" extends "Purchase Header"
{
    Caption = 'Extension table Purchase Header';

    fields
    {

        field(50000; "Transport API Sent"; Boolean)
        {
            Caption = 'Transport API Sent';
        }
        field(50001; "Transport API Sent date"; DateTime)
        {
            Caption = 'Transport API Sent date';
        }
        field(50500; "TransportMode"; enum DSVTransportMode)
        {
            Caption = 'TransportMode';
        }

    }
}
 






/// <summary>
/// TableExtension PurchInvHeader (ID 50025) extends Record Purch. Inv. Header.
/// </summary>
/// <remarks>
/// 2023.10             Jesper Harder       044         LTS Drop Shipment exclude from Exports
/// </remarks>
tableextension 50025 PurchInvHeader extends "Purch. Inv. Header"
{
    fields
    {
        field(50000; "Drop Shipment"; Boolean)
        {
            Description = 'Displays if any lines are marked Drop Shipment.';
            Caption = 'Drop Shipment.';
            CalcFormula = exist("Purch. Inv. Line" where("Document No." = field("No."),
                                                         "Drop Shipment" = const(true)));
            Editable = false;
            FieldClass = FlowField;
        }
    }
} 




/// <summary>
/// TableExtension PurchInvLine (ID 50024) extends Record Purch. Inv. Line.
/// </summary>
/// <remarks>
/// 2023.10             Jesper Harder       044         LTS Drop Shipment exclude from Exports
/// </remarks>
tableextension 50024 "PurchInvLine" extends "Purch. Inv. Line"
{

    fields
    {
        /// <remarks>
        /// Using Base Application field no. to facilitate automatic transfer of fieldvalue when purchase order is invoiced.
        /// </remarks> 
        field(73; "Drop Shipment"; Boolean)
        {
            Caption = 'Drop Shipment';
            Editable = false;
        }
    }

} 
/// <summary>
/// TableExtension RoutingLine (ID 50023) extends Record Routing Line.
/// </summary>
/// <remarks>
/// 2023.10                         Jesper Harder                           001     Production Controlling, RoutingLines Priority, Short Comments
/// </remarks>
tableextension 50023 "RoutingLine" extends "Routing Line"
{
    fields
    {
        field(50000; "Routing Priority"; Integer)
        {
            Caption = 'Routing Priority';
        }
    }
} 
/// <summary>
/// TableExtension "SalesHeaderExt" (ID 50006) extends Record Sales Header.
/// </summary>
///
/// <remarks>
///
/// 2023.03.23             Jesper Harder       013         Display DropShip Purchase Order No. On Sales Order List
/// </remarks>
tableextension 50006 "SalesHeaderSC" extends "Sales Header"
{
    fields
    {
        //013
        field(50000; "Drop Shipment Order No."; code[30])
        {
            Caption = 'Drop Shipment Order No.';
            FieldClass = FlowField;
            CalcFormula = lookup("Purchase Line"."Document No." where("Document Type" = const(Order),
                                                                       "Drop Shipment" = const(true),
                                                                       "Sales Order No." = field("No.")));
        }
    }
} 




/// <summary>
/// TableExtension SalesInvHeader (ID 50026) extends Record Sales Invoice Header.
/// </summary>
/// <remarks>
/// 2023.10             Jesper Harder       044         LTS Drop Shipment exclude from Exports
/// </remarks>
tableextension 50026 SalesInvHeader extends "Sales Invoice Header"
{

    fields
    {
        //044
        field(50000; "Drop Shipment"; Boolean)
        {
            Description = 'Displays if any lines are marked Drop Shipment.';
            Caption = 'Drop Shipment.';
            CalcFormula = exist("Sales Invoice Line" where("Document No." = field("No."),
                                                           "Drop Shipment" = const(true)));
            Editable = false;
            FieldClass = FlowField;
        }
    }
} 
/// <summary>
/// TableExtension SalesInvoiceLine (ID 50011) extends Record Sales Invoice Line.
/// </summary>
/// <remarks>
/// 2023.05.12                                  Jesper Harder                          031     Added CountryRegion FlowField to Posted Invoices
/// </remarks>

tableextension 50011 "SalesInvoiceLine" extends "Sales Invoice Line"
{
    fields
    {
        field(50000; "Country/Region of Origin Code"; Code[20])
        {
            Caption = 'Country/Region of Origin Code';
            FieldClass = FlowField;
            CalcFormula = lookup(
                Item."Country/Region of Origin Code" where("No." = field("No.")));
        }
    }
}
 
/// <summary>
/// TableExtension "SCANPAN_SalesLine" (ID 50002) extends Record Sales Line.
/// </summary>
///
/// <remarks>
///
/// 2023.01             Jesper Harder       0193        Added flowfield for ItemBarCode
/// 2023.03             Jesper Harder       004         Added flowfield for ABCD Category
/// 2023.03             Jesper Harder       015         Added Flowfield Tariff - SalesLine 27.3.2023
/// 2024.09             Jesper Harder       079         Show Alternative Delivery Address on Sales Orders page, item,reference,sales orders
///
/// </remarks>
tableextension 50002 "SalesLine" extends "Sales Line"
{
    fields
    {
        field(50000; "Item Cross-Reference No."; Code[50])
        {
            Description = 'Used to display Item Barcode Reference.';
            Caption = 'Item Cross-Reference No.';

            CalcFormula = lookup("Item Reference"."Reference No."
                                 where(
                                        "Item No." = field("No."),
                                        "Unit of Measure" = field("Unit of Measure Code"),
                                        "Reference Type" = const("Bar Code")));
            Editable = false;
            FieldClass = FlowField;
        }

        //Used in ExtSalesPerson
        field(50001; "Salesperson Code"; Code[20])
        {
            Description = 'Used in Ext Salesperson function';
            FieldClass = FlowField;
            Caption = 'Salesperson Code';
            CalcFormula = lookup(
                Customer."Salesperson Code" where("No." = field("Sell-to Customer No.")));
        }

        //Used in ExtSalesPerson
        field(50002; "Sell-To Customer Name"; Text[100])
        {
            Description = 'Used in Ext Salesperson function';
            FieldClass = FlowField;
            Caption = 'Sell-To Customer Name';
            CalcFormula = lookup(
                "Sales Header"."Sell-to Customer Name" where("Document Type" = field("Document Type"),
                                                             "No." = field("Document No.")));
        }

        //004
        field(50003; "ABCD Category"; code[20])
        {
            Description = '004 Used in sales line';
            FieldClass = FlowField;
            Caption = 'ABCD Category';
            CalcFormula = lookup(
                Item."ABCD Category" where("No." = field("No.")));
        }
        //015
        field(50004; "Tariff No."; code[20])
        {
            Description = '015 Used in sales/invoice linje';
            FieldClass = FlowField;
            Caption = 'Tariff No.';
            CalcFormula = lookup(
                    Item."Tariff No." where("No." = field("No.")));
            TableRelation = "Tariff Number"."No.";
        }
        field(50005; "Ship-to Code"; Text[100])
        {
            Description = 'Ship-to Code';
            FieldClass = FlowField;
            Caption = 'Ship-to Code';
            CalcFormula = lookup(
                "Sales Header"."Ship-to Code" where("Document Type" = field("Document Type"),
                                                             "No." = field("Document No.")));
        }
        field(50006; "Ship-to Name"; Text[100])
        {
            Description = 'Ship-to Name';
            FieldClass = FlowField;
            Caption = 'Ship-to Name';
            CalcFormula = lookup(
                "Sales Header"."Ship-to Name" where("Document Type" = field("Document Type"),
                                                             "No." = field("Document No.")));
        }
    }
    var
} 

/// <summary>
/// TableExtension SalesShipmentHeader (ID 50017) extends Record Sales Shipment Header.
/// </summary>
/// <remarks>
/// 
/// 2023.7.19           Jesper Harder       035         Post TransportOrderID posted to Posted Whse. ShipmentLines through 14.7.2023 Added Code
/// 2024.07             Jesper Harder       072         Pallet Manifest v2 fetch from new tasklet tables and use PostedSalesShipment as base table
/// 
/// </remarks>      

tableextension 50017 "SalesShipmentHeader" extends "Sales Shipment Header"
{
    fields
    {
        field(50000; "Transport Order No."; code[20])
        {
            Caption = 'Transport Order No.';
            FieldClass = FlowField;
            CalcFormula = lookup("Posted Whse. Shipment Line"."Transport Order No." where("Posted Source No." = field("No.")));
        }

        //072
        field(50001; "PostedWhseShipmentNo"; code[20])
        {
            Caption = 'Posted Whse. Shipment No.';
            FieldClass = FLowField;
            CalcFormula = lookup("Posted Whse. Shipment Line"."Whse. Shipment No." where("Posted Source No." = field("No.")));
        }
    }
} 
//SHIPITREMOVE

/// <summary>
/// TableExtension SalesShipmentLine (ID 50012) extends Record Sales Shipment Line.
/// </summary>
/// <remarks>
/// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
/// </remarks>
tableextension 50012 "SalesShipmentLine" extends "Sales Shipment Line"
{
    fields
    {
        field(50000; "Transport Order Id"; Code[20])
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';
            Caption = 'Transport Order No.';
            Editable = false;
        }
        field(50001; "Transport Order No2"; Code[20])
        {
            Caption = 'Transport Order No.';
            FieldClass = FlowField;
            CalcFormula = lookup("Posted Whse. Shipment Line"."Transport Order No." where("Posted Source No." = field("Document No.")));
        }
        field(50002; "Shipping Agent Code"; Code[20])  
        {
            Caption = 'Transport Shipping Agent Code';
            //ShipIT 
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';
            //FieldClass = FlowField;
            //CalcFormula = lookup("IDYS Transport Order Header"."Shipping Agent Code" where("No." = field("Transport Order No2")));
        }
        field(50003; "Shipping Agent Service Code"; Code[20])
        {
            Caption = 'Transport Shipping Agent Service Code';
            //ShipIT 
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';
            //FieldClass = FlowField;
            //CalcFormula = lookup("IDYS Transport Order Header"."Shipping Agent Service Code" where("No." = field("Transport Order No2")));
        }
        
        field(50004; "Shipping Agent Code2"; Code[20])  
        {
            Caption = 'Transport Shipping Agent Code';
            FieldClass = FlowField;
            CalcFormula = lookup("Sales Shipment Header"."Shipping Agent Code" where("No." = field("Document No.")));
        }
        field(50005; "Shipping Agent Service Code2"; Code[20])
        {
            Caption = 'Transport Shipping Agent Service Code';
            FieldClass = FlowField;
            CalcFormula = lookup("Sales Shipment Header"."Shipping Agent Service Code" where("No." = field("Document No.")));
        }
    }
} 


tableextension 50033 "SCANPANSetupExt" extends "SCANPAN Setup"
{
    ///<summary>
    ///
    /// 2024.09             Jesper Harder       080         Self-insured limit check with warning on sales order.
    /// This table extension adds fields to the SCANPAN Setup table to enable configuration options for displaying warnings related to self-insured and credit maximum situations.
    ///</summary>
    fields
    {
        // Field to indicate whether to show a warning for self-insured situations
        field(11; "Show SelfInsured Warning"; Boolean)
        {
            Caption = 'Show SelfInsured Warning';
        }

        // Field to indicate whether to show a warning when the credit maximum is reached
        field(12; "Show CreditMax Warning"; Boolean)
        {
            Caption = 'Show CreditMax Warning';
        }
    }
} 






/// <summary>
/// TableExtension Tariff Number (ID 50020) extends Record Tariff Number.
/// </summary>
/// <remarks>
/// 2023.09            Jesper Harder        050         Duty Percentage to Tariff page 
/// </remarks>
tableextension 50020 "Tariff Number" extends "Tariff Number"
{
    fields
    {
        field(50000; "Duty Percentage"; Decimal)
        {
            Caption = 'Duty Percentage';
            DecimalPlaces = 0 : 5;
        }
    }
} 





/// <summary>
/// TableExtension UserSetup (ID 50018).
/// </summary>
/// 
/// <remarks>
/// 2023.09             Jesper Harder       047         Restrict changes to user setup and General ledger posting dates
/// </remarks>
/// 
tableextension 50018 "User Setup" extends "User Setup"
{
    fields
    {
        field(50000; "Allow Edit Posting Dates"; Boolean)
        {
            Caption = 'Allow Edit Posting Dates';
        }
    }
} 
/// <summary>
/// TableExtension ValueEntry (ID 50014) extends Record Value Entry.
/// </summary>
/// <remarks>
///
/// 2023.07             Jesper Harder           036         Value Entry, new fields, Added Code
///
/// </remarks>
tableextension 50015 "ValueEntry" extends "Value Entry"
{
    fields
    {
        field(50000; "Product Line Code"; code[20])
        {
            Caption = 'Product Line Code';
            TableRelation = "NOTO Item Categories".code where("Category Code" = const(ProductLineCode));
        }
    }
} 




/// <summary>
/// TableExtension Warehouse Employee (ID 50019) extends Record Warehouse Employee.
/// </summary>
/// <remarks>
/// 2023.09             Jesper Harder       049         Restrict changes to Warehouse Source Filter (5771)
/// </remarks>
tableextension 50019 "Warehouse Employee" extends "Warehouse Employee"
{

fields
{
    field(50000;"Permit Change Warehouse Filter"; Boolean)
    {
        Caption = 'Permit Change Warehouse Source Filter';
    }
}

} 
tableextension 50005 WarehouseShipmentHeader extends "Warehouse Shipment Header"
{
    /// <summary>
    /// TableExtension "WarehouseShipmentHeaderExtSC" (ID 50005) extends Record Warehouse Shipment Header.
    /// </summary>
    /// <remarks>
    /// 2023.07.14          Jesper Harder       035         Post TransportOrderID through
    /// </remarks>

    fields
    {
        field(50000; Description; Text[130])
        {
            Caption = 'Description';
            DataClassification = ToBeClassified;
        }
        field(50001; "Warehouse Pick No."; Code[20])
        {
            Caption = 'Warehouse Pick No.';
            FieldClass = FlowField;
            CalcFormula = lookup("Warehouse Activity Line"."No."
                where("Whse. Document No." = field("No."), "Whse. Document Type" = const(Shipment)));
        }

        //SHIPITREMOVE
        field(50002; "Transport Order No."; code[20])
        {
            ObsoleteState = Removed;
            ObsoleteReason = 'Not in use anymore';
            Caption = 'Transport Order No.';
            DataClassification = ToBeClassified;
            //TableRelation = "IDYS Transport Order Header"."No.";
        }
    }
}
 
